{"meta":{"title":"Misaka mikoto","subtitle":"CLANNAD","description":"simple description : yesterday I dream you again","author":"Rhymeet Liu","url":"http://rhymeet.github.io","root":"/"},"pages":[{"title":"404","date":"2022-09-15T13:02:08.000Z","updated":"2022-09-15T13:04:57.637Z","comments":true,"path":"404/index.html","permalink":"http://rhymeet.github.io/404/index.html","excerpt":"","text":""},{"title":"categories","date":"2022-09-15T12:48:10.000Z","updated":"2022-09-15T12:59:53.453Z","comments":true,"path":"categories/index.html","permalink":"http://rhymeet.github.io/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2022-09-15T12:50:03.000Z","updated":"2022-09-15T12:53:17.599Z","comments":true,"path":"about/index.html","permalink":"http://rhymeet.github.io/about/index.html","excerpt":"","text":""},{"title":"contact","date":"2022-09-15T12:50:44.000Z","updated":"2022-09-15T13:00:27.216Z","comments":true,"path":"contact/index.html","permalink":"http://rhymeet.github.io/contact/index.html","excerpt":"","text":""},{"title":"friends","date":"2022-09-15T12:50:59.000Z","updated":"2022-09-15T12:56:55.203Z","comments":true,"path":"friends/index.html","permalink":"http://rhymeet.github.io/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-09-15T12:49:51.000Z","updated":"2022-09-15T13:00:58.809Z","comments":true,"path":"tags/index.html","permalink":"http://rhymeet.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Replenish","slug":"Replenish","date":"2023-02-02T07:41:27.000Z","updated":"2023-02-02T08:26:22.950Z","comments":true,"path":"2023/02/02/Replenish/","link":"","permalink":"http://rhymeet.github.io/2023/02/02/Replenish/","excerpt":"","text":"# replenish replenish verb [ T ] formal UK /rɪˈplen.ɪʃ/ US /rɪˈplen.ɪʃ/ to fill something up again 補充；把… 再備足；重新裝滿 # 捎带确认 当主机收到远程主机的 TCP 数据包之后，通常不马上发送 ACK 数据包，而是等上一个短暂的时间，如果这段时间里面主机还有发送到远程主机的 TCP 数据包，那么就把这个 ACK 数据包 “捎带” 着发送出去，把本来两个 TCP 数据包整合成一个发送。一般的，这个时间是 200ms。可以明显地看到这个策略可以把 TCP 数据包的利用率提高很多。 一个 TCP 连接允许数据在任何一个方向流动，并允许任何一个应用程序在任何时刻发送数据。即当两个进程 A 和 B 建立连接后，任何一方均能发送数据给另一方。当分组从 A 发往 B 时，可携带对 B 发来数据的确认。同理，当分组从 B 发往 A 时，可携带对 A 发来数据的确认。即采用捎带确认的机制。","categories":[{"name":"计网","slug":"计网","permalink":"http://rhymeet.github.io/categories/%E8%AE%A1%E7%BD%91/"}],"tags":[]},{"title":"Ch5_应用层","slug":"Ch5-应用层","date":"2023-02-01T16:13:01.000Z","updated":"2023-02-01T16:13:24.003Z","comments":true,"path":"2023/02/02/Ch5-应用层/","link":"","permalink":"http://rhymeet.github.io/2023/02/02/Ch5-%E5%BA%94%E7%94%A8%E5%B1%82/","excerpt":"","text":"","categories":[{"name":"计网","slug":"计网","permalink":"http://rhymeet.github.io/categories/%E8%AE%A1%E7%BD%91/"}],"tags":[]},{"title":"Ch4_运输层","slug":"Ch4-运输层","date":"2023-01-26T12:18:16.000Z","updated":"2023-02-02T16:03:52.080Z","comments":true,"path":"2023/01/26/Ch4-运输层/","link":"","permalink":"http://rhymeet.github.io/2023/01/26/Ch4-%E8%BF%90%E8%BE%93%E5%B1%82/","excerpt":"","text":"# 概述 运输层协议又称端到端协议 在计算机网络中进行通信的真正实体是位于通信两端主机中的进程 运输层的任务是 如何为在不同主机上运行的进程提供直接的通信服务 因特网的运输层为应用提供了两种不同的运输协议： 面向连接的 TCP 无连接的 UDP # 端口号、复用、分用 PID : 运行在计算机上的进程使用 进程标识符 PID 来标志 不同的 OS (Mac os、Linux、windows) 使用 不同格式的进程标识符 -&gt; 统一 --&gt; 端口号 # 端口号 TCP/IP 体系的运输层使用端口号来区分应用层的不同应用进程； 端口号使用 16bit 表示，取值范围 0~65535; 熟知端口号: 0~1023 、FTP 21/20、HTTP 80、DNS 53 登记端口号: 1024 ~ 49151、为没有熟知端口号的应用程序使用。需在 IANA 手续登记、 短暂端口号：49152~65535、留给客户进程选择暂时使用. 端口号只具有本地意义，只是为了标识本计算机应用层中的各进程 在因特网中、不同计算机中的相同端口号是没有联系的。 # 发送方の复用 ＆ 接收方の分用 发送方 UDP 复用：在运输层使用 UDP 协议进行封装 TCP 复用：在运输层使用 TCP 协议进行封装 IP数据报首部中协议字段的值 用来表明IP数据报的数据载荷部分 封装的是何种协议数据单元： = 6 -&gt; 封装的是TCP报文段 = 17 -&gt; 封装的是UDP用户数据报 接收方 的网络层收到 IP 数据报后进行 IP 分用 = 17 -&gt; 则把IP数据报的数据载荷部分 封装的UDP用户数据报 上交运输层的UDP = 6 -&gt; 则把IP数据报的数据载荷部分 封装的TCP报文段 上交运输层的TCP 运输层对UDP用户数据报进行UDP分用 运输层对TCP报文段进行TCP分用 也就是根据端口号将它们交付给上层相应的应用进程 # 应用层熟知端口号 # UDP 和 TCP 的对比 ##UDP 用户数据报协议 User Datagram Protocol ##TCP 传输控制协议 Transmission Control Protocol ## 对比 # TCP 流量控制 流量控制 (flow control): 让发送方的发送速率不要太快、要让接收方来得及接收 利用滑动窗口机制可以很方便地在 TCP 连接上实现对发送方的流量控制： TCP 接收方利用自己的接收窗口大小来限制发送窗口的大小 TCP 发送方接收到 接收方的零窗口通告后、应启动持续计时器。 持续计时器超时后、像接收方发送 零窗口探测报文 TCP 的发送窗口 = min [自身拥塞窗口，TCP 接收方接收窗口] 例题： # TCP 的拥塞控制 拥塞：(congestion) 在某段时间内，若 对网络中某一资源的需求超过了该资源所能提供的可用部分，网络性能就要变坏。 网络资源 -- 链路容量 (带宽)、交换结点中的缓存和处理机、、 若出现拥塞而不进行控制，整个网络的吞吐量将随输入负荷的增大而下降 # 4 种拥塞控制算法 假定： 1. 数据是单方向传送，而另一个方向只传送确认 2. 接收方总是有足够大的缓存空间，因而发送方发送窗口的大小由网络的拥塞程度来决定。 3. 以最大报文段 MSS 的个数为讨论问题的单位，而不是以字节为单位。 初始发送方： cwnd (拥塞窗口 congestion w、动态变化、) swnd = cwnd (发送窗口) ssthresh (Slow start threshold、慢开始门限、状态变量) # 慢开始 &amp; # 拥塞避免 慢开始 ---☞一开始向网络注入的报文段少，并不是指拥塞窗口 cwnd 增长速度慢； 拥塞避免 --- 并非完全能够避免拥塞，☞在拥塞避免阶段 将拥塞窗口 cwnd 控制为按线性规律增长，使网络比较不容易出现拥塞； # 快重传 (fast retransmit) 可以让发送方尽早知道 发生了个别报文段的丢失 尽快进行重传、不是等超时器超时再重传 # 快恢复 (fast recovery) 发送方一旦收到连续 3 个重复确认 ----&gt; 执行快恢复算法 将 ssthresh &amp; cwnd 值 ---&gt; 当前窗口的一半，然后开始拥塞避免算法 CA # 例 # TCP 超时重传时间的选择 RTO, (Retransmission TimeOut) 短了：不必要的重传，使网络负荷增大 ！ RTT0 &gt; RTO 长了：会使网络的空闲时间增大，降低了传输效率 ！RTT0 &lt; RTO # TCP 可靠传输的实现 # TCP の运输连接管理 # TCP 的连接建立 # TCP 的连接释放 # TCP 报文段の首部格式","categories":[{"name":"计网","slug":"计网","permalink":"http://rhymeet.github.io/categories/%E8%AE%A1%E7%BD%91/"}],"tags":[]},{"title":"Piano","slug":"Piano","date":"2023-01-15T03:29:09.000Z","updated":"2023-01-22T14:11:11.681Z","comments":true,"path":"2023/01/15/Piano/","link":"","permalink":"http://rhymeet.github.io/2023/01/15/Piano/","excerpt":"","text":"# 1 # 6 BEST Chord Progressions for Piano Beginners EASY # Simple-But-Mesmerizing Piano Pattern (PERFECT For Beginners) # (16)Beautiful Arpeggio Patterns for Beginners (Easy!!) # choppy adjective UK /ˈtʃɒp.i/ US /ˈtʃɑː.pi/ (of sea, lakes, or rivers) with a lot of small, rough waves caused by the wind （大海、湖泊或河流）波浪滔滔的，波瀾起伏的","categories":[],"tags":[{"name":"Music","slug":"Music","permalink":"http://rhymeet.github.io/tags/Music/"}]},{"title":"Math","slug":"Math","date":"2023-01-07T11:33:27.000Z","updated":"2023-02-01T16:10:03.941Z","comments":true,"path":"2023/01/07/Math/","link":"","permalink":"http://rhymeet.github.io/2023/01/07/Math/","excerpt":"","text":"#","categories":[{"name":"Math","slug":"Math","permalink":"http://rhymeet.github.io/categories/Math/"}],"tags":[]},{"title":"leetcode","slug":"leetcode","date":"2023-01-06T15:58:59.000Z","updated":"2023-01-06T16:58:32.563Z","comments":true,"path":"2023/01/06/leetcode/","link":"","permalink":"http://rhymeet.github.io/2023/01/06/leetcode/","excerpt":"","text":"# 453 non-overlapping 给定一个区间的集合 intervals ，其中 intervals [i] = [starti, endi] 。返回 需要移除区间的最小数量，使剩余区间互不重叠 。 示例 1: 输入: intervals = [[1,2],[2,3],[3,4],[1,3]] 输出: 1 解释：移除 [1,3] 后，剩下的区间没有重叠。 示例 2: 输入: intervals = [[1,2], [1,2], [1,2] ] 输出: 2 解释：你需要移除两个 [1,2] 来使剩下的区间没有重叠。 示例 3: 输入: intervals = [[1,2], [2,3] ] 输出: 0 解释：你不需要移除任何区间，因为它们已经是无重叠的了。 class Solution: def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int: intervals.sort() cnt = 0 preEnd = intervals[0][1] for start,end in intervals[1:]: if start >= preEnd: preEnd = end else: cnt+=1 preEnd = min(end,preEnd) return cnt","categories":[{"name":"LEET","slug":"LEET","permalink":"http://rhymeet.github.io/categories/LEET/"}],"tags":[]},{"title":"GRE","slug":"GRE","date":"2022-12-14T08:42:52.000Z","updated":"2023-02-01T16:10:08.521Z","comments":true,"path":"2022/12/14/GRE/","link":"","permalink":"http://rhymeet.github.io/2022/12/14/GRE/","excerpt":"","text":"# 单词 # odium 憎恨 厌恶 [ˈəʊdi:əm] sibling 兄弟 or 姊妹 guzzle 狂饮 暴食 drawl 慢吞吞地说话 paranoia 偏执狂 voracious 渴求的 贪婪的 elicit 引出 探出 even 平坦的 相等的 martial 战争的 hegemony [hɪˈdʒeməni:] n. 霸权；领导权 press 困扰 instrumentalist pragmatic 实际的 实用主义的 gobble 贪婪的吃 狼吞虎咽 parallelism 平行 类似 waggish 诙谐的 滑稽的 cogitate 慎重思考 思索 lexical 词汇的 词典的 # repudiate 拒绝 抛弃 [rɪˈpju:di:ˌeɪt] diatribe 抨击 stowaway 偷乘者 inanimate 无生命的 pied 杂色的 alluring 迷人的 superfluity 多余 冗余 impenitent 不悔悟的 abbreviate 缩写 sinuous 蜿蜒的 弯曲的 tacit 默许的 不言而喻的 frothy 起泡的 lounge 休息室 nonporous 无孔的 不渗透的 dimension 维度 embroider 刺绣 # conglomerate [kənˈglɔməˌreɪt] v. 聚集成团 aggrieve 使痛苦、受委屈、受伤害 lure 引诱、诱惑 [luə] expel 排出、开除 plague 困扰、纠缠、使烦恼 resume 重新开始 继续 conglomerate 聚集成团 [kənˈglɔməˌreɪt] evasive 回避的 illegitimate 不合法的 私生的 非婚生的 smug 自命不凡的 自满的 leisureliness 悠然 从容 [leʒə'laɪnəs] ethos [ˈi:ˌθɔs] n. （个人、团体或民族）道德风貌，思潮... facsimile 复制本 摹本 [fækˈsɪməli:] pigment 天然色素 干粉颜料 firearm 枪支 greenhorn 新手 傻瓜 vintner 葡萄酒商贩 酒商；葡萄酒酿制者 [ˈvɪntnə] vendor 小贩 nihilism 虚无主义 [ˈnaɪəˌlɪzəm] #","categories":[{"name":"English","slug":"English","permalink":"http://rhymeet.github.io/categories/English/"}],"tags":[]},{"title":"Random","slug":"Random","date":"2022-11-27T14:09:47.000Z","updated":"2023-01-12T15:42:06.026Z","comments":true,"path":"2022/11/27/Random/","link":"","permalink":"http://rhymeet.github.io/2022/11/27/Random/","excerpt":"","text":"若是能避开猛烈的欢喜，自然就不会有悲烈的来袭 win + ctrl + Space --- 输入法切换","categories":[],"tags":[{"name":"Life","slug":"Life","permalink":"http://rhymeet.github.io/tags/Life/"}]},{"title":"Ch3_网络层","slug":"Ch3-网络层","date":"2022-11-27T13:27:59.000Z","updated":"2023-02-01T08:10:56.741Z","comments":true,"path":"2022/11/27/Ch3-网络层/","link":"","permalink":"http://rhymeet.github.io/2022/11/27/Ch3-%E7%BD%91%E7%BB%9C%E5%B1%82/","excerpt":"","text":"# 概述 网络层的主要任务是实现网络互连，进而实现数据包在网络之间的传输。 要实现网络层任务，需解决以下问题： 网络层向运输层提供怎样的服务 (&quot;可靠传输&quot;or&quot;不可靠传输&quot;) 网络寻址问题 路由选择问题 ###internet 小写代表互联网，Internet 大写代表因特网。 因特网 (Internet) 是目前全世界用户数量最多的互联网，它使用 TCP/IP 协议栈。 由于 TCP/IP 协议栈的网络层使用网际协议 IP, 它是协议栈的核心协议，因此在 TCP/IP 协议栈中网络层常称网际层。 # 网络层提供的两种服务 # 面向连接的虚电报服务 可靠通信由网络来保证 必须建立网络层的连接 --- 虚电路 VC( Virtual Circuit ) 通信双方沿着已建立的虚电路发送分组 目的主机的地址仅在连接建立阶段使用，之后每个分组的首部只需携带一条虚电路的编号 (构成虚电路的每一段链路都有一个虚电路编号) 这种通信方式如果使用 可靠传输的网络协议，就可使所发送的分组最终正确到达接收方 (无差错按需到达、不丢失、不重复) 通信结束后 ，需要释放之前所建立的虚电路 很多广域分组交换网都使用面向连接的虚电路服务。如，曾经的 X.25 和逐渐过时的帧中继 FR、异步传输模式 ATM... # 无连接的数据报服务 可靠通信应当由用户主机来保证 不需要建立网络层连接 每个分组可走不同的路径 每个分组的首部必须携带目的主机的完整地址 这种通信方式所传送的分组可能误码、丢失、重复、失序 由于网络本身不提供端到端的可靠传输服务，这就是网络中的路由器可以做的比较简单，且价格低廉 (与电信网的交换机比较)。 因特网采用了这种设计思想，也就是将复杂的网络处理功能置于因特网的边缘 (用户主机和其内部的运输层), 而将相对简单的尽最大努力的分组交付功能置于因特网核心。 # IPv4 地址概述 # 概述 IPv4 地址就是给因特网 (Internet) 上的每一台主机 (or 路由器) 的每一个接口分配一个在全世界范围内是唯一的 32 比特的标识符 采用点分十进制表示方法 # 分类的 IPv4 地址 只有 A 类、B 类、C 类 地址 可分配给网络中的主机 or 路由器的各接口 主机号 全 0 的地址是网络地址，不能分配给主机 or 路由器的各接口 主机号 全 1 的地址是广播地址，不能分配给主机 or 路由器的各接口 # A 类地址 最小网络号 0、不指派 第一个可指派的 IP ： 1.0.0.0 最大网络号 127, 不指派： 最小的本地环回测试地址 127.0.0.1 最大的本地环回测试地址 127.255.255.254 可指派的网络数量 128- 2 = 126 (- 最小网络号、最大网络号) 每个网络中可分配的 IP 地址数量 224- 2 (除主机号全 0 的地址 全 1 的广播地址) # B 类地址 开头得 10 最小网络号即第一个可指派的网络地址 128.0.0.0 最大网络号即最后一个可指派网络地址 127.255.0.0 可指派网络数量 214 每个网络中可分配的 IP 地址数量 216- 2 (除主机号全 0 的地址 全 1 的广播地址) # C 类地址 开头得 110 最小网络号即第一个可指派的网络地址 192.0.0.0 最大网络号即最后一个可指派网络地址 223.255.255.0 可指派网络数量 222 每个网络中可分配的 IP 地址数量 28- 2 (除主机号全 0 的地址 全 1 的广播地址) # SUM # 划分子网的 IPv4 地址 32 比特的子网掩码可以表明 分类 IP 地址的主机号部分被借用了几个比特作为子网号 子网掩码使用连续的 1 来对应网络号和子网号 子网掩码使用连续的 0 来对应主机号 将划分子网的 IPv4 地址与其相应的子网掩码进行逻辑与运算就可得到 IPv4 地址所在子网的网络地址 # 默认子网掩码 # 无分类编址的 IPv4 地址 CIDR(Classless Inter-Domain Routing) 无分类域间路由选择 CIDR 消除了传统的 A、B、C 类地址，以及划分子网的概念； CIDR 可以更加有效地分配 IPv4 的地址空间，并且可以在新的 IPv6 使用之前允许因特网的规模继续增长 # 路由聚合 找共同前缀 # 应用规划 # FLSM 定长的子网掩码 Fixed Length Subnet Mask 使用同一个子网掩码来划分子网 每个子网所分配的 IP 地址数量相同，造成 IP 地址浪费 子网划分方式不灵活：只能划分出 2n 个子网 (n 是从主机号部分借用的 用来作为子网号的的比特数量) # VLSM 变长的子网掩码 Variable Length Subnet Mask 使用不同的子网掩码来划分子网 每个子网所分配的 IP 地址数量可以不同，尽可能减少对 IP 地址的浪费 子网划分方式灵活：可以按需分配 # IP 数据报の发送和转发过程 IP 数据报の发送和转发过程包含以下 2 部分: 主机发送 IP 数据报 路由器转发 IP 数据报 ！😮声明🤦‍♂️：为了将重点放在 TCP/IP 协议栈的网际层发送 and 转发 IP 数据报的过程上，在之后的举例中，我们忽略使用 ARP 协议来获取目的主机 or 路由器的 MAC 地址的过程以及以太网自学习和帧转发的过程。 主机发送 IP 数据报： 判断目的主机是否与自己在同一网络： 若在同一网络，则属于直接交付； 若不在同一网络，则属于间接交付，传输给主机所在网络的默认网关 (路由器), 由默认网关帮忙转发； 路由器转发 IP 数据报 检查 IP 数据报首部是否出错： 若出错，则直接丢弃该 IP 数据报 并通告源主机 若未出错，则转发 根据 IP 数据报的目的地址在路由表中查找匹配的条目： 若找到匹配的条目，则转发给条目中指示的吓一跳 若找不到，则丢弃该 ip 数据报并通告源主机 # 【举例】 # 源主机如何知道目的主机是否与自己在同一网络中？ C-&gt;F 用 C 的掩码与 C 的 ip and F 的 ip 相与得到两个网络地址 如果两个目的网络地址相同 # 主机 C 如何知道 路由器 R 的存在？ 与接口 0 的默认网关 (即接口 0 的 ip) 相同 # 路由器收到 ip 数据报后如何转发？ 检查 IP 数据报首部是否出错： 若出错，则直接丢弃该 IP 数据报 并通告源主机 若未出错，则转发 根据 IP 数据报的目的地址在路由表中查找匹配的条目： 若找到匹配的条目，则转发给条目中指示的吓一跳 若找不到，则丢弃该 ip 数据报并通告源主机 路由表中的 目的网络为目的 ip 与原掩码相与的 目的网络地址 # 路由器隔离广播域 # 题目 # 静态路由配置 &amp; 路由环路 #静态路由配置及其可能产生的路由环路问题 静态路由配置是指 用户 or 网络管理员 使用路由器的相关命令给路由器人工配置路由表。 方式简单、开销小 但不能及时适应网络状态 (流量、拓扑～) 的变化 一般只在小规模网络中采用 使用静态路由配置可能出现以下导致产生路由环路的错误 配置错误 聚合了不存在的网络 网络故障 路由条目的类型 直连网络 静态路由 (人工配置) 动态路由 (路由选择协议) 特殊的静态路由条目： 默认路由 (目的网络为 0.0.0.0, 地址掩码 0.0.0.0) 特定主机路由 (目的网络为特定主机的 IP 地址，地址掩码为 255.255.255.255) 黑洞路由 (下一条为 null0) # 例 - 静态路由配置 # 默认路由 # 特定主机路由 # 路由环路 # 静态路由配置错误导致的路由环路 # 聚合了不存在的网络导致路由环路 # 网络故障导致路由环路 # 路由选择协议 # 概述 # 静态路由选择 由人工配置的 网络路由、默认路由、特定主机路由、黑洞路由... 都属于静态路由 方式简单、开销小 但不能及时石英网络状态的变化 (流量、拓扑等) 一般只在小规模网络中采用 # 动态路由选择 路由器通过路由选择协议 自动获取路由信息。 比较复杂、开销大 能较好地适应网络状态的变化 适用于大规模网络 # 主要特点 ## 因特网所采用的路由选择协议的主要特点 自适应 动态路由选择，能较好地适应网络状态的变化 分布式 路由器之间交换路由信息 分层次 将整个因特网划分为许多较小的自治系统 AS (Autonomous System) # 分层次的 因特网采用分层次的路由选择协议 # 常见路由选择协议 # 路由器基本结构 # RIP 的基本工作原理 路由信息协议 RIP RIP 要求 AS 内的每一个路由器都要维护从它自己到 AS 内其它每一个网络的距离记录。 这是一组距离，称为 &quot; 距离向量 D-V (Distance-Vector)&quot; RIP 使用跳数 (Hop Count) 作为度量 (Metric) 来衡量到达目的网络的距离： 路由器到直连网络的距离定义为 1 路由器到非直连网络的距离定义为所经过的路由器数目 + 1 允许一条路径最多只能包含 15 个路由器。 距离 = 16 时、等价于不可达 thus,RIP 只适用于小型互联网 # RIP 基本工作过程 若干次交换更新后，每个路由器都知道到达本 AS 内各网络的最短距离和下一跳地址，称为收敛。 # RIP の路由条目的更新规则 # RIP 存在 &quot;坏消息传播得慢&quot; 的问题 环路问题 距离无穷技术问题 限制最大路径距离为 15,(16 为不可达) 当路由表变化时就立即发送更新报文 (&quot;触发更新&quot;), 而不仅是周期性发送 让路由器记录收到某特定路由信息的接口，而不让同一路由信息再通过此接口反方向发送 (&quot;水平分割&quot;)？ # OSPF 的基本工作原理 开放最短路径优先 - 使用了 Dijkstra 的最短路径算法 SPF open shortest path first OSPF 是基于链路状态的，而不是 RIP 那样基于向量的 OSPF 采用 SPF 算法计算路由，从算法上保证不会产生路由环路 OSPF 不限制网络规模，更新效率高，收敛速度快。 链路状态: ☞本路由器都和哪些路由器相邻，以及相应链路的 &quot;代价&quot;(cost) &quot;代价&quot; 用来表示费用、距离、时延、带宽、... 由网络管理人员来确定 # OSPF 相邻路由器之间通过交互问候 (hello) 分组，建立和维护邻居关系。 hello 分组封装在 IP 数据包中，发往组播地址 224.0.0.5; 发生周期为 10 秒 40 秒未收到来自邻居路由器的 hello 分组，则认为该邻居不可达 # 使用 OSPF 的每个路由器都会产生链路状态通告 LSA link state advertisement LSA: 直连网络的链路状态信息 邻居路由器的链路状态信息 LSA 被封装在链路状态更新分组 LSU 中，采用洪泛法发送。 使用 OSPF 的每个路由器都有一个链路状态数据库 LSDB, 用于存储 LSA。 通过各路由器洪泛发送封装有 LSA 的 LSU 分组，各路由器的 LSDB 最终将达到一致 # 基于 LSDB 进行 SPF 计算，构建 Rx -&gt; Ry 的最短路径，即构建各自路由表 # OSPF 有以下 5 种分组类型 类型一：问候 (hello) 分组 用来发现和维护邻居路由器的可达性 类型二：数据库描述 (D Description) 分组 向邻居路由器给出自己的链路状态数据库中的所有链路状态项目的摘要信息 类型三：链路状态请求 (LSR) 分组 向邻居路由器请求发送某些链路状态项目的详细信息 类型四：链路状态更新 (LS Update) 分组 路由器使用这种分组将其链路状态进行洪泛发送，即用洪泛法对全网更新路由状态 类型五：链路状态确认 (LSA acknowledgement) 分组 是对链路状态更新分组的确认分组 # OSPF 工作过程 # OSPF 在多点接入网络中路由邻居关系的建立 # OSPF 自治系统再划分，区域 (Area) 区域内路由器 IR 区域边界路由器 ABR (area border router) 主干路由器 BBR (backbone router) 自治系统边界路由器 ASBR (AS border) # BGP 边界网关协议的基本工作原理 # basic 外部网关协议 EGP (例如边界网关协议 BGP) 在不同的自治系统内，度量路由的 &quot;代价&quot;(距离、带宽、费用等) 可能不同 因此，对于自治系统之间的路由选择，使用代价作为度量来寻找最佳路由是不行的。 # BGP 发言人 配置 BGP 时，每个 AS 的管理员至少选择一个路由器作为该 AS 的 &quot;BGP 发言人 &quot; 不同 AS 的 BGP 发言人 要交换路由信息，首先必须建立 TCP 连接，端口号为 179 在此 TCP 连接上 交换 BGP 报文以建立 BGP 会话 利用 BGP 会话交换路由信息 (ru, 增加新的路由、撤销过时的路由、报告出错的情况等) 使用 TCP 连接交换路由信息的两个 BGP 发言人，彼此称为对方的邻站 (neighbor) or 对等站 (peer) # BGP 适用于多级结构的因特网 # BGP-4 有以下 4 种报文 OPEN UPDATE KEEPALIVE (保活) NOTIFICATION # 题目 BGP-4 报文被封装在 TCP 报文段中进行传输 传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议， 传输控制协议（TCP，Transmission Control Protocol）是为了在不可靠的互联网络上提供可靠的端到端字节流而专门设计的一个传输协议。 # IPV4 数据报的首部格式 # 1 # IP 数据报分片 以太网规定 MTU=1500 字节 这三个字段共同用于 IP 数据报分片 标识 16bit、属于同一个数据报的各分片数据报应该具有相同的标识。 count ++计数数据报 数 标志 3bit、1+1+1 DF 位：1 不允许分片、0 允许分片 MF 位：1 “后面还有分片”、0 “这是最后一个分片” 保留位：必须 = 0 片偏移 13bit、指出分片数据报的数据载荷部分偏移其在原数据报的位置有多少个单位 以 8 字节为单位 举例： # TTL、protocol、checksum # 生存时间 TTL: 8bit, now 以 &quot;跳数&quot; 为单位，l 路由器转发 IP 数据报时，将 IP 数据报首部中该字段的值 - 1, 若不为 0 就转发，否则就丢弃。 作用：防止 IP 数据报在网络中永久兜圈 # 协议 8bit # 首部检验和 16bit # 源、目的 IP 地址 # 【题目】 # ICMP 网际控制报文协议 Internet Control Message Protocol 主机 or 路由器 使用 ICMP 来发送 差错报告报文 and 询问报文 ICMP 被封装在 IP 数据报中发送 # ICMP 差错报告报文 5 种 终点不可达 源点抑制 时间超过 参数问题 改变路由 (重定向) # when 不应发送 ICMP 差错报告报文 对 ICMP 差错报告报文不再发送 ICMP 差错报告报文 对第一各分片的数据分配的所有后续数据分配都不 对具有多播地址的数据报都不 对具有特殊地址 (127.0.0.0 or 0.0.0.0 等) 的数据报 不 # ICMP 询问报文 请求和回答 -&gt; 测试目的站是否可达 时间戳请求和回答 -&gt; 进行时钟同步 and 测量时间 # ICMP 应用举例 # PING 分组间探测 (packet InterNet Group) # traceroute 跟踪路由 # VPN &amp; NAT 虚拟专用网 &amp; 网络地址转换 # VPN 虚拟专用网 Virtual Private Network 利用公用的因特网 作为本机构各专用网之间的通信载体 内联网 VPN 外联网 VPN 远程接入 VPN # NAT 网络地址转换 network address translation 缓解 IPV4 地址空间即将耗尽的问题 NAT 能使大量内部专用地址的专用网络用户 共享少量外部全球地址来访问因特网上的主机和资源 NAPT natwork address and port translation 将端口号和 IP 地址一起进行转换的技术叫做网络地址与端口号转换 NAPT","categories":[{"name":"计网","slug":"计网","permalink":"http://rhymeet.github.io/categories/%E8%AE%A1%E7%BD%91/"}],"tags":[]},{"title":"CET6","slug":"CET6","date":"2022-11-09T13:55:17.000Z","updated":"2023-01-27T13:56:57.279Z","comments":true,"path":"2022/11/09/CET6/","link":"","permalink":"http://rhymeet.github.io/2022/11/09/CET6/","excerpt":"","text":"# 单词 # one bizarre 奇异的 contend 竞争、坚决主张 perplex 迷惑、困惑 verge 边缘 speciality 特产、专业、特长 collective 集体的 集体 kit 成套工具、用具包 sly 狡猾的、诡秘的、偷偷摸摸的 handful 一把、少数、费劲的 living 活的、生动的 erroneous 错误的 deed 行为 实际 功绩 (房产) 契约证书 v. 通过行为转化 hut 小屋 torrent 奔流 山洪 激流的汹涌的 rear 后部臀部 养育饲养建立培养 mountain 山岳山脉 dormitory decieve 欺骗 silver 银子银器 waggon 四轮运货马车 敞篷货车 letter 信证书 印刷 租赁人 revise 修订 校订 pie 喜鹊 爱说话的人 弄乱 throng 群 群众 一大群 大量 拥挤的 menace 威胁 traverse 横越 横切 recorder 首席 法官 竖笛 录音机 habit 长袍 穿衣 murmur 低语 portuguese 葡萄牙 tragedy 惨案 ego 自我 revolt 叛乱 反感 使・・・恶心 exterior 表面的 对外的 leak 泄露 漏洞 assumption 傲慢 采取 ditch 沟 渠道 迫降 brisk 活泼的 敏锐的 凛冽的 wear 磨损 耐久性 exceedinly 极端地 很 resignation 辞职 放弃 顺从 bud 发芽 chase 狩猎 追捕 Oceania 大洋洲 wind 卷曲 缠绕 bounce 向・透露 注意 恢复 conservative 守旧的 cassette 匣子 chorus 合唱 liability 责任倾向 义务 indignant 愤慨的 kettle 水壶 锅 坑 穴 corrode 破坏 侵蚀 pretend 假托 赝品的 模拟的 extraordinary 特派的 纵向的 gasoline 汽油 seemingly 表面上 clause 子句，条款 ambulance 救护车 野战 医院 tribe 部落 宗族 sensation 感觉 知觉 轰动 canal 建河 疏导 undertaking 任务 事业 企业 保证 许诺 leap 跳跃 猛冲 sore 疮痛处 痛心的 恼火的 oval 卵形的 locality 位置 disposal 丢掉 处理 销毁 碾碎器 interval 间隔 休息间距 retort 反击 反驳 interpret 解释 口译 演出 apprehension 理解 忧惧 逮捕 opaque 不透明的 不传导的 impart 给予 传递 告诉 rusty 生锈的 tremendous 极大的 巨大的 惊人的 sympathetic 同情的共鸣的 交感神经 exceed 超出 领先 foreigner commend 称赞 表扬 vain 虚荣的 manipulate 操作 控制 手持 millimetre 毫米 ward 病房 identical soap 肥皂 阿谀奉承 Atlantic 大西洋 dismay 惊慌 沮丧 灰心 thorn 刺 荆棘 summit 顶点 极度 最高点 representative 典型的 compulsory 强迫的 义务的 electronics 电子学 announcer noun 名词 ascertain 查明 弄清 envelope 封套 皮壳 preliminary hoist 生气 扯起来 flaw 瑕疵 裂缝 sociology 社会学 narrative 叙述 故事 tariff 关税 价格表 refine 精炼 提纯 净化 valve 阀门 电子管 transplant 移植 种植 divine 神的 敬神的 evolution 进化 发展 bribe 贿赂 clutch 抓住 掌握 sufficiently dentist costume 装束 alter 改变 ounce gen 司 英两 metallic 金属的 金属粒子 efficient 有胜任的 veil 面纱 面罩 修女 aggressive 侵略的 好斗的 攻击性的 motor 机动的 ball 球状舞会 elite 精英 中坚分子 simplicity 简朴 toe 脚趾 dilute 冲淡 稀释 bracket 支架 括弧 托架 cement 水泥胶 结合剂 补牙物 基石 v 维护保养 compile 搜集 tease 戏弄 强求 shrug 怂 耸肩 enroll 登记 参军 comb 梳子 鸡冠 蜂巢 exceptation 预期 crime 羞耻 犯罪 erosion 糜烂 commerce 社交 贸易 plaster 灰泥 石膏药 feeble 虚弱的 微弱的 sake 理由 利益 好处 materialism 唯物主义 实例主义 upside-down 颠倒的 乱七八糟 gang 一帮 一伙 sensible 明智的 可察觉的 实用的 club 夜总会 suck 吮吸 mill 磨坊 制造厂 preferable 更合意的 agent 工人 药剂 adverse 相反的 逆的 敌对的 initial scope 范围 能力 眼力 仔细研究 democracy 民主 民主国家 humorous invest 包围 preposition 前置词介词 recur 再发生 重现 expertise 专家的意见 专门技术 coil 线圈绕 盘绕 commodity 日用品 商品 物品 federation 联邦 联盟 weight 使负重 、倾斜 hysterical 歇斯底里的 异常兴奋的 timid 胆怯的 羞怯的 breakdown 崩溃 suspicious 猜疑的 warfare clearance 清除 间隙 pillar 柱子 栋梁 velocity 速率 迅速 authorize plant 设备 设立 工厂 deer 鹿 fourth superb 壮丽的 超等的 coherent 粘着的 紧凑的 reconcile 使和好 调停 discern 辨出 communist 共产主义的 curt 简略的 生硬的 简短的 succession 继承 investigation 研究 调查 smuggle 私运 走私 imagine 认为 猜测 meridiem 正午 electricity hedge 篱笆 障碍物 限制 拐弯抹角 保护自己不受财产损失 inspection 视察 forehead tragic physician 内科医生 difference 分歧 post 竿 邮件 moderate 温和的 适度的 稳健的 anticipate 预期 interst 利益 嗜好 股份 利息 pint 品脱 resemblance 相似 相似性 corresponding 符合的 一致的 相当的 overlook 看漏 忽视 horrible 极可厌的 revelation 揭露 泄露 启示 展示 humble 谦逊的 粗鄙的 bull 斗牛犬 宗教 猛冲 devise 设计 遗赠 (的财产) snap 猛咬 突然折断 commute 交换 兑换 经常来往 lorry 运货 汽车卡车 portion 一部分 命运 分担的责任 correspondent 通讯记者 与。相应 horrible 极可恶的 revelation 揭露 泄漏 启示 practise 实践 indirect 迂回的 欺骗的 orient 亚洲 远东 东方 corrupt 贿赂 腐败的 mock 嘲弄 挖苦 diverse misfortune 灾祸 灾难 deprive 夺去 使失去 dew 露水 hydrogen 氢 conspicuous 显眼的 出众的 bank 堆积 blow 殴打 吹响 practicable 能实行的 适用的 northern 北部的 gloomy 黑暗的 令人沮丧的 cater 迎合 投合 vacuum 真空空间吸尘器 misunderstand 误会 曲解 instance 诉讼 例子 程序 conform 使遵守 一致 shrewd 精明的敏锐的 storage 贮藏 存储 保管 仓库 philosopher 哲学家 inhabit 栖息于 dwell 居住 凝思 细想 hamper 妨碍 阻碍 牵制 longitude 经线 steamer 汽船 蒸笼 wreath 花环 花圈 花冠 facet 方面 刻面 consequent 必然的 作为结果的 nightmare 噩梦 oath 誓言 宣誓 breeze 微风 轻而易举的事 dish 菜肴 凹形 挖空 闲谈 prolong 拖延 reckless 鲁莽的 disclose 揭露 interpreter 程序 allowance 津贴 beef 抱怨诉苦 headquarters 司令 指挥 总部 resonance 共鸣 共振 widow 寡妇 遗孀 ceramic 陶器的 transcend 超过 胜过 habitual 习惯的 skirt 边缘郊区 gulf 海湾 quart 夸脱 (=2 品脱) unusually 显著的 drown 淹死 statistics 统计数字 sentence 判决 刑罚 命题 使遭受 lend 贷款 增添 给予 adverb 副词 encounter 遭遇 偶然 碰到 converge 聚合 集中于一点 bolt 螺 栓 钉 闪电 狼吞虎咽 B.C. 公元前 oral 口试 whistle 啸啸 汽笛 simple 无辜的 纯粹的 n. 平民 精神病人 草药 lest 唯恐 以免 mutual 相同的 共同的 compensate 补偿 赔偿 tow 牵引 waterproof 不透水的 防水的 雨衣 photograph 照相 照片 mortgage 抵押 disposition 性情 处置 处理 布置 elevate 提高 抬高 concentrate 聚集 浓缩 精选 trifle 小事 琐事 浪费 玩忽 tell 吩咐 辨别 告诉 dragon 凶暴的人 quartz 石英 security 保证 抵押 债券证券 competitive 竞赛的 比赛的 eve 前夜 前夕 thereafter 此后以后 bulletin 告示 公告 student 研究生 学者 reflexion 反射 映像 折射 考虑 = reflection July 七月 meal 膳食 谷物进餐 adjoin 贴近 吡连 靠近 progress 前进 进步 slippery 狡猾的 不可靠的 recreation 消遣 娱乐活动 sue 控告 请愿 deem 认为 想 hostage 人质 抵押品 crush 碾碎 镇压 关键时刻 果汁 repay 偿还 报答 relativity 相关性 buzz 嗡嗡 recession 衰退 proportional 比例的 相称的 startle 吃惊 sausage 腊肠 boycott 联合抵制 presumably 推测起来 大概 copper 铜币 镀铜 一种蝴蝶 spectacular 惊人的 展览物 definitely 确切的 condemn 谴责 rouse 唤醒 hasten 催促 急忙 symposium 专题研讨会 讨论会 drive 驾驶驱入 journalist 记者 republic 共和国 共和政体 diameter 直径 outlook 观点 前景 景色 shipment 货物 intricate 复杂的 纠缠的 suppress 镇压 隐瞒 servant 雇工 deficiency 缺乏 prayer 祷告 immigrant manufacture 制造加工 illusion 幻想 错觉 onto 到... 上 division 分配 除法 continuous 连续不断的 versatile 多方面的 bankrupt 破产 dignity legislation 立法 法规 prototype 原型 flank 肋 侧面的 instantaneous 瞬间的 即刻的 tomorrow tug 猛拖 repetition 重复 反复 exhaust 耗尽 排气装置 illegal 非法移民 stiffen 使僵硬 变粘稠 criticism 批判 评论 shed 脱落 流出 小棚 descend 下降 vegetation 植物 草木 reproach 责备 耻辱 volume 卷册 容积 体积 音量 electrician 电工技师 handicap 妨碍 使不利 stumble 绊倒 踌躇 notable 著名的 warrant 许可证 正当理由 委任状 obstacle 障碍物 # day1 expire 满期 到期 断气 散发 embody 体现 包含 periodical 期刊 overlap 重叠 覆盖物 deligate 代表 christian 基督教的 dwarf 矮子 ferrous 铁的 treasurer 司库 财务主管 wield 挥 行使 Christ n. 救世主 christian 基督教的 ironical 讽刺的 everlasting 永久的 breakdown 细目列表 # 2. excise 切除 subsequent 随后的 后来的 incredible 惊人的 charter 宪章 章程 包租 发给... Moslem 穆斯林的 duke 公爵 pose 提出 造成 hamper 妨碍 牵制 analytic vigorous 剧烈的 活跃的 精神旺盛的 He is none the less vigorous for his years. 他虽年老而依然健壮. resemblance 相似 escort 陪同 护送 narration 叙事 故事 #3. extraction 抽出 血统 家世 counsel 律师 忠告 propaganda 宣传 avail 益处 pneumatic 充气的 furious 狂怒的 激烈的 taper 逐渐变细 ，减少 acquaint 使结识 了解 datum 资料 数据 counsel 建议 忠告 律师 attorney 辩护律师 propaganda 宣传 pneumatic 充气的 气动的 # 4. referee 裁判 locality 位置 sift 筛子 brand 在。上烙印 加污名于 installment 分期付款 instrumental 有帮助的 乐器的 descent 出身 下降 斜坡 subsequently 其次 接着 adjacent 毗邻的 commence 获得学位 着手 balcony 阳台 楼厅 thereof 在其中 它的 editorial 社论的 编辑的 mustard 芥末 sandwich 夹裹 把... 夹入 # 5. goodness 善良 美德 plump 丰满的 胖乎乎的 contradict 反驳 xerox 复印 影印 cross 生气的 愤怒的 herald 预告 宣布 detach 分开 拆卸 使脱离 bazaar 集市 义卖 pantry 食品柜 餐具室 integrity 诚实 正直 完整 decorative documentary 文件的 survival 遗物 幸存 successor 继任者 # 6. tread 踩 踏 步行 disorder 失调 wharf 码头 停泊所 confirmation 证实 streamline 精简 practicable 切实可行的 pilgrim 香客 朝圣者 equation 平衡 综合体 radical 基本的 彻底的 激进的 revenue 收入 收益 税收 offspring # 7. superstition 迷信 迷信观念 infinite 无限的 无穷的 极度的 damn 一点点 丝毫 诅咒 谴责 hail 冰雹 一阵 rapture 狂喜 periodic 周期的 cloak 披风 斗篷 借口 掩饰 rectify 纠正 修正 senator 参议员 censeless 无意义的 失去知觉的 magnitude 巨大 重要性 震级 deprive 剥夺 # 8. respectable 可敬的 可观的 体面的 viscous 粘的 blunder 疏忽 continental 欧洲大陆的 大陆的 coordinate 使协调 调和 assassinate 暗杀 刺伤 grunt 呼呼声 hurricane shovel 铲 # 9. ruby 红宝石 contrast deform 使变形 损毁外形 integrate 使融入 使结合 psychology 心理学 心里 haughty 傲慢的 目中无人的 blaze 燃烧 inevitably 不可避免的 inadequate 不充足的 不够格的 inaccurate 不精确的 specimen 抽样 样本 pal 朋友 incorporate 使并入 包含 haughty 傲慢的 目中无人的 # 10. strife 冲突 consistent friction 矛盾 不和 slide 贬值 滑动 gangster 匪徒 inaugurate 开创 为举行 kinetic 运动的 rooster 公鸡 patriot 爱国者 absorption 吸收 合并 inaugurate 开创 friction 矛盾 摩擦力 # 11. dictator 独裁者 nourishment 滋养品 营养 interior 内部的 内心的 inflation 通货膨胀 strip 狭长区域 antique 古董 intake 摄取量 magician 巫师 tact 机敏 圆滑 得体 inspiration 灵感 妙计 baffle 挡板 困惑 interior 内部的 内心的 # 12. incline 斜坡 斜面 ambient 周围的 四周的 inertia 惯性 惰性 迟钝 tyrant 暴君 专制君主 专横的人 modification 缓和 修改 修饰 competitive 竞争的 antenna 天线 触角 agitation 鼓动 搅动 焦虑 烦恼 twilight 黄昏 暮光 meditate 沉思 冥想 仔细考虑 ascend 攀登 上升 graze 擦伤 放牧 clown 小丑 # 13. drainage 排水 luxurious 奢侈的 豪华的惬意的 implore 乞求 恳求 哀求 conviction 确信 定罪 判罪 hinge 合页 铰链 dome 圆屋顶 半球形物 sensitivity 敏感性 灵敏性 liner 邮轮 客轮 衬里 衬垫 veto 否决 bull 公牛 雄兽 买空的证券投机商 bribe 行贿 response 回复 回答 commission 授权 委托 佣金 smart 刺痛 剧透 难受 negligible 微不足道的 可忽略不计的 # 14. axle 轮轴 车轴 whilst 同时 时时 metallic persecute 迫害 残害 骚扰 fro 向后 向那边 zinc 镀锌 coincide 巧合 同时发生 unanimous 一致同意的 无异议的 theorem 定理 persecute 迫害 残害 骚扰 pamphlet 小册子 overthrow 推翻 瓦解 multiplication decisive 决定性的 果断的 awkward 使人尴尬的 难携带的 笨拙的 quantitative 大小的数量的 # 15. resultant 作为结果的 velocity 速率 disperse 分散 驱散 inspector 巡警 督察长 composite 合成物 realistic 现实的 resent 怨恨 unique islam 伊斯兰教 woodpecker 啄木鸟 whitewash 粉饰 石灰水粉刷 reside 居住 属于 perstige 威望 声望 # 16. empirical 经验主义的 partinent 恰当的 中肯的 induce 劝诱 劝说 flaw 瑕疵 谬误 inorganic 无生物的 无机的 specificaion 详述 规格 说明书 collide 碰撞 filement 细丝 细线 细状物 colonist 移民 # 17. inclination 倾向 爱好 cereal 谷物 麦片 personaliy 个性 性格 incidentally 附带地 顺便提及 estate 地区 遗产 住宅区 proverb 谚语 格言 superficial 表面的 肤浅的 fossil 化石的 sequence 序列 decompose 使腐烂 分解 # 18. tuberculosis 结核病 肺结核 foresee tile 瓦片 瓷砖 mistress 情妇女主人 villa 别墅 historian popularity 声望 流行 maple cleanliness span 墩距 间隔 blond 白肤金发碧眼的人 scope 眼界 施展余地 机会 seige 包围 围攻 bridegroom 新郎 merchandise 买卖 销售 optical 光的 burglar 夜盗 窃贼 preset 预先设置 propulsion 推进 # 19. passport 护照 undertake 承诺 从事 ridicule 嘲弄 奚落 theatre 剧院 演戏 cosmic 宇宙的 gnaw 折磨 jug 壶 greed torque 扭转 bypass 路过 # 20. applaud equator 赤道 radiator 暖气片 散热器 冷却器 perpendicular 垂直 (线) deficient scrap 废弃 取消 consul 领事 rear 饲养 领养 overhear 偶然听到 偷听 eloquence 雄辩 口才 plateau 高原 平稳时期 operation 企业 stride 大步 步态 进展 finance makeup 体格 unreasonable eclipse 日食月食 黯然失色 # 21. symphony 交响乐 alteration 更改 vaccinate 给。接种疫苗 earnings 工资 wardrobe 衣柜 衣橱 行头 feminine 女性的 阴性的 masculine 男性的 阳刚的 supplement 增刊 offset 抵消 补偿 substantial 物质的 坚固的 大量的 mend 修改 康复 second 临时调任 productivity 生产率 shady 可疑的 背阴的 不正当的 notion 观点 endeavor 尝试 试图 compatible 兼容的 # 22. siren 汽笛 警报器 妖妇 requisite 必需品 consolidate 合并 联合 aviation 航空 飞机制造业 horn 角状物 喇叭 角质 coward 胆小鬼 懦夫 destiny 命运 pedlar 流动小贩 supersonic 超音速的 allied 联合的 同盟的 insignificant ponder certainty # 23. panther 豹 黑豹 美洲豹 ward 病房 被监护人 vicious 残暴的 恶意的 reactor 反应堆 inferior 差的 Mars 火星 战神 metropolitan 大主教 frustrate 挫败 沮丧 fabrication 制造 构造物 捏造 lodging 寄宿 租住的房间 tyranny 暴政 专横 saturation 饱和 浸透 catholic 天主教徒 productive ignorance immigrate # 24. bourgeois 资产阶级的 manifest 明显的 显而易见的 patriotic 爱国的 obedient 服从的 顺从的 温驯的 expedition 探险 远足 overestimate 过高估计、评价 establish 查实 patron 代言人 intonation 语调 声调 characterize 描述 perfection 完美 leakage 漏出 opaque 不透明是 hymn 圣歌 歌颂 moor 使停泊 consumption # 25. ultrasonic 超声波 fluctuation 波动 起伏 涨落 symmetrical 对称的 匀称的 mock 嘲弄 flap 拍打 massacre 大屠杀 signify 意味着 handout 施舍物 救济品 讲义 terminology 术语 专用术语 occurrence 事件 发生 cruise 航船 游览 untie 解开 松开 compliment 赞美 boiler misfortune cruise 乘船游览、航游 # 26. ranch 大农厂 rational 理性的 理智的 peripheral 周围的 次要的 predominant 占优势的 executive 总经理 主管 行政部门 deposition 罢免 沉淀 书面证词 compact 把.. 压实 decree 法令 判决 hover 犹豫不决 徘徊 flux 流体 波动 bewilder 使困惑 使糊涂 不知所措 prevalent 流行的 盛行的 perplex 迷惑 seaport 海港 港口城市 politics diagnose photography recommendation # 27. errand 差事 tensile 张力的 能伸长的 petition 请愿 tape 录制 粘贴 enlighten 启发 liability 责任 债务 累赘 currency 货币 ware 商品 货物 陶器 puff 吹 equilibrium 平衡 均衡 平静 utensil 器皿 用具 sensible 明智的 理智的 baron 男爵 大亨 巨头 royalty 王室 版费 使用费 torpedo 用鱼雷袭击 故意破坏 crisis # 28. ventilate 使通风 发表 (看法) wrath 狂怒 stern 严厉的 stem 茎 essense 本质 精华 精油 prey 猎物 伤害的对象 aerial 空气中的 航空的 mortgage 抵押 individual 单独的 grind 磨碎 用力挤压 barge 驳船 游艇 supervise 监督 locomotive 机车 火车头 vowel 元音 squeeze version notify thereafter optimism # 29.fortress [ˈfɔ:tris] 堡垒 要塞 initiate 开始 创始 接纳 deputy [ˈdepjuti] 副的 代理人 diesel [ˈdi:zəl] 柴油 柴油车 exceptional 优越的 versatile 多才多艺的 多功能的 mount 山峰 坐骑 indefinite 无限期的 cradle 摇篮 发源地 peril [ˈperil] n. 重大危险；（某活动或行为的）危险，... bid 努力 投标 sheriff 郡长 县治安官 missionary 传教士 nursery 苗圃 托儿所 mobilize 动员起来 observe Jesus deem composition # 30. perception 感觉 洞察力 理解 hazard 危险 molecular [məˈlekjələ] 分子的 patent 专利 goddess [ˈgɔdɪs] n. 女神；被崇拜的女人 grassy [ˈgræsi:] adj. 长满草的；覆盖着草的 hospitality [ˌhɔspiˈtæliti] n. 殷勤好客；热情友好；款待 outlet [ˈautlet] n. 出口；排放管；（情感的）发泄途径；. dove [dʌv] n. 鸽子；（政界的）鸽派人士 yolk 蛋黄 measurement # 31. hydrocarbon 烃 碳氢化合物 commonplace 平常的事 merciful 仁慈的 幸运的 prairie 大草原 distort 歪曲 变形 invariably [ɪnˈveəriəbli] adv. 不变地；总是 stiffness 僵硬 生硬 crank 转动 rapidity [rəˈpɪdɪtɪ] n. 急速，迅速；陡，险峻 plague 鼠疫 瘟疫 灾难 profound 深刻的 知识渊博的 adore 崇拜 热爱 generalize 形成概念 ambassador 大使 代表 # 32. tranquil 平静的 宁静的 [ˈtræŋkwil] resolute 坚决的 果断的 [ˈrezəˌlu:t] finite 有限的 限定的 trench 深沟 地沟 战壕 lump 结成块 nought 零 无 [nɔ:t] repel 击退 使厌恶 dreadful [ˈdredful] adj. 可怕的；糟糕透顶的；极严重的 perch [pə:tʃ] n. （禽鸟的）栖息；高位 rim 边沿，边缘； butt 大酒桶；烟蒂 prejudice intellect 理解力；才智非凡的人；出众的... homogeneous adj. 同类的，同性质的 drain v. 使流出；使排干；喝光 count 指控；罪状；事项；计数 # 33. disillusion [ˌdisiˈlu:ʒən] 使醒悟 理想破灭 shipwreck [ˈʃɪpˌrek] n. 船舶失事；海难 incomplete adj. 不完全的；未完成的 corrupt adj. 腐败的，贪污的 dynamo [ˈdaɪnəˌməʊ] n. 发电机；精力充沛的人 overwhelm vt. 压倒；使不知所措；征服 cling vi. 粘住；依附；紧紧抓住 hearty [ˈhɑ:ti:] adj. 衷心的；（饭菜）丰盛的；强烈的 gleam vt.&amp;vi. 发微光；闪烁 merit [ˈmerit] n. 价值；优点 environmental junction n. 连接；交叉路口；汇合处 nominate vt. 提名，推荐；任命 marginal [ˈmɑ:dʒinəl] adj. 微小的；边缘的；（土地）贫瘠的 storage budget n. 预算；预算案 gravel [ˈɡrævəl] n. 砂跞；砾石；结石 prolong vt. 延长；拉长；拖延 # 34. enterprise [ˈentəpraiz] 事业 进取心 创业 企业 nucleus [ˈnju:kliəs] 原子核 核心 中心 indicative [inˈdikətiv] adj. 指示的；象征的 serpent [ˈsɜ:pənt] n. 蛇；狡猾的人 petty adj. 不重要的；小题大做的；下级的 notwithstanding prep. 尽管；虽然 opstinate [ˈɔbstənɪt] adj. 固执的，执拗的；难以移动的 limp [limp] n. 跛行 lace vt. 用鞋带系（鞋）；在… 里掺入；在…... retort vi. 回嘴；反驳 workpiece n. 工件，工作部件 arch [ɑ:tʃ] vt. 成拱形；拱起 regularity n. 规则性；整齐 diploma # 35. drastic 激烈的 严厉的 drastic [ˈdræstik] adj. 激烈的；严厉的 germ[dʒə:m] n. 细菌；病菌；起源，发端 gathering [ˈgæðərɪŋ] n. 集会；聚会；聚集 prudent [ˈpru:dnt] adj. 谨慎的；精明的 retard [rɪˈtɑ:d] vt. 延迟，减缓 subdivide vt. 把… 再分 doctrine n. 信条；主义；学说；正式声明 spectator [spekˈteitə] n. 旁观者，观众 humanitarian [hju:ˌmænɪˈteəri:ən] n. 慈善家；人道主义者 ascertain 弄清 burner [ˈbɜ:nə] n. 炉头，燃烧器 notable 显著的 bacterium lengthen vt.&amp;vi. 延长 windy thesis # 36. versus 与... 相对、对阵 summon [ˈsʌmən] vt. 召唤；鼓起（勇气） maiden n. 少女；未婚女子 lathe [leɪð] vt. 用车床加工 hostile [ˈhɔstail] adj. 敌对的；怀有敌意的；不友善的；... album 唱片集 相册 symposium 研讨会 likeness 相似；肖像 speculate 思索 推测 marvel 惊叹不已 ingenious 机灵的 shrill 尖声叫 constituent [kənˈstitjuənt] n. 选民；成分 # 37. assault 攻击 [əˈsɔ:lt] orient 东方 亚洲 disturbance 动乱 困扰 mountainous 庞大的 jack 千斤顶 reptile [ˈreptail] 爬行动物 quantify vt. 确定… 的数量 elliptical [iˈliptikəl] 椭圆的 隐晦的 间接的 symmetry 对称 相当 illiterate 文盲 dissipate 消散 uproar [ˈʌpˌrɔ:] 骚动 喧嚣 momentary 瞬间的 片刻的 ornament [ˈɔ:nəmənt] vt. 装饰，点缀 bandit [ˈbændit] n. 土匪，盗匪，歹徒 presentation idealism lunar # 38. straighten 挺起来 intercourse 交际 来往 numerical scorch [skɔ:tʃ] 烧焦、疾驰 martyr [ˈmɑ:tə] n. 烈士，殉难者；深受… 之苦者 stray 迷路的 ferry 运送 渡运 fret 烦恼 notorious [nəuˈtɔ:riəs] adj. 臭名昭著的；声名狼藉的 finely 细微的 correlate [ˈkɔrileit] v. 相互关联；使显示联系 thrash 拍打 pacific cosmos 宇宙 panel 面板 专门小组 combat # 39. parachute 降落伞 风散种子 [ˈpærəʃu:t] refugee [ˌrefjuˈdʒi:] n. 难民，避难者 second-hand n. 旧的，第二手的 outline 概述 stairway 楼梯 limestone 石灰岩 torment 折磨 戏弄 [ˈtɔ:ment] locust 蝗虫 magnetism 磁力 [ˈmægnɪˌtɪzəm] warehouse 仓库 货栈 tangle 使缠结 混乱 [ˈtæŋɡl] exert 施加 (影响、压力)、运用 persuation assert 断言 维护 # 40. wholesome 健康的 [ˈhəulsəm] fixture [ˈfikstʃə] n. 固定装置；定期存款；体育活动；常客 overall 工作服 罩衣 souvenir manipulate 操作 控制处理 cylinder 圆筒 汽缸 analogy 相似 类比 pathetic 差劲的 可怜的 uphold 拥护 支持 维持 principally 首要的 inland 内陆的 内地的 yoke 枷锁 wring 挤 扭 excess 过多 undertaking 任务 事业 bitterness underestimate # 41. postulate 假定 假设 [ˈpɔstʃəˌleɪt] illuminate 照明 alongside rascal 流氓 家伙 [ˈræskəl] alternate 交替的 [ˈɔːltə(r) neɪt] fission 裂变 分裂 deviate 背离 [ˈdi:vieit] intent 坚决的 专心的 专注的 indoor 室内的 uranium [juəˈreinjəm] n. 铀 wade 蹚 跋涉 regenerative slang 俚语 spatial [ˈspeiʃəl] anniversary raisin 葡萄干 # 42. correspondence 通信 符合 相似 discount 折扣 exclusive 排外的 独用的 高级的 convert impluse 冲动 一时的念头 silicon flatter 奉承 谄媚 straightforward 坦率的 watertight 不透水的 严密的 oath 誓言 誓约 咒骂 prophecy [ˈprɔfisi] n. 预言，预言能力 testify 证实 作证 [ˈtestɪfaɪ] # 43. maintenance 生活费 维持 brood 一窝 diversion 转移 娱乐 转向 wrinkle 使起皱 corrosion 腐蚀 侵蚀 province 领域 范围 settlement 殖民 定居点 和解 incapable 软弱无能的 emerge 显露 seam 接缝 煤层 echo 重复 随声附和 vein 静脉 矿脉 clasp 扣住 抱紧 warning colonial # 44. obscure 鲜为人知的 晦涩的 gigantic 巨大的 simultaneous 同步的 fragrant 芳香的 domestic 国内的 家务的 家用的 驯养的 ornamental 装饰品 tulip 郁金香 emission # 45. confidential 秘密的 机密的 悄悄的 stillness 寂静 静止 catalogue 为。编目录 列举 历数 specialize 专攻 embassy 大使馆 ideally 理想地 完美地 intermediate 中间的 insulator 绝缘体 pedestrian 行人 disastrous 灾难性的 极糟糕的 erect 直立的 竖直的 monk 僧侣 和尚 physically 身体上 ham 火腿 蹩脚演员 melody 旋律 曲调 悦耳 # 46. bureaucracy 官僚主义 、制度 introduce 引进 主持 ignite 点火 lining 内衬 [ˈlaɪnɪŋ] verse 诗 韵文 distinctly 无疑地 清楚地 embarrass 使尴尬 gross 严重的 jealousy n. 妒忌；小心提防；羡慕 positively 确实的的确确 flatten hoist 起重机 # 47. derivation 引出 起源 由来 romantic 不切实际的 penalty 处罚 点球 [ˈpenəlti] normalization 标准化 subsidiary [səbˈsidiəri] adj. 辅助的，次要的 sneer 冷笑 嘲笑 sweeten 变甜 capacitor [kəˈpæsɪtə] n. 电容器 formerly 以前 extinct [prəˈpel] 绝种的 不复存在的 cigar 雪茄 # 48. trifle [ˈtraifl] 琐事 少量 fluctuate 使波动 residual [rɪˈzɪdʒu:əl] 剩余的 残留的 penetration [ˌpenɪˈtreɪʃən] 穿透 渗透 侵入 vulgar 粗俗的 庸俗的 stagger 使摇晃、震惊、错开 mint 薄荷 巨额钱财 铸币厂 hose 袜类 软管 水管 dependant 受赡养者 侍从 家眷 refrain 克制、忍住 mob confront prototype terminate # 49. stuffy 古板的 闷热的 不通的 orchard [ˈɔ:tʃəd] n. 果园 pasture n. 牧场；牧草地 lubricate vi. 润滑 watchful adj. 警觉的，警惕的 rash adj. 轻率的；鲁莽的 virgin adj. 未使用的 violate vt. 违反，违背；侵犯；亵渎 pope [pu:p] n. （天主教）教皇 reef comedy systematic adj. 成体系的；有条理的 sweetness n. 令人愉快；芬芳 destructive hum # 50. fraction 分数、少量、一点儿 pierce 刺穿、突破、穿透 witty 风趣的、机智的 fellowship 友谊、联谊会、研究院职位 frail 虚弱的、易碎的、体弱的 pant vi. 喘气 explicit 清晰的、直率的 manuscript 手稿、原稿、手抄本 suppress 镇压、隐瞒、抑制 outermost 最远的 haunt 常去的地方 litter 使凌乱 category commend 称赞、表扬、推荐 economics # 51. pious [ˈpaɪəs] adj. 虔诚的；伪善的 poultry [ˈpəultri] 家禽 quench 扑灭、止渴 capacitance [kəˈpæsɪtəns] 电容量 fracture v. 使裂开、骨折 ripple 涟漪、细浪、波痕 luminous 发光的 assessment 评估 stereo irrigation laundry suffice vi. 充足的 soften vi. whisper # 52.dedicate [ˈdedikeit] vt. 致力，献身，投身 magistrate 地方法官 herd 兽群 hearth 壁炉地面、壁炉炉床 cartridge 弹药筒、子弹 heave vt. 举起、使起伏、呕吐 overseas adj. 国外的、海外的 divert vi. 转移 sodium 钠 tilt sodium abundance milky commodity # 53.melancholy [ˈmelənkəli] adj. 忧郁的；悲伤的 spectrum 系列、范围、波谱 [ˈspektrəm] analogue 类似物 [ˈænəˌlɔ:g] groove vt. 开槽于 algebra 代数 [ˈældʒibrə] mighty 强大的、巨大的 [ˈmaɪti:] preach 说教 valve 阀 paragraph troublesome reckless 粗心大意的 鲁莽的 validity 有效、效力、可信性 # 54. forge [fɔ:dʒ] vt. 缔造、创造、开创、伪造 noted 著名的、知名的 first-rate 一流的、高级的 snore vi. 打鼾、呼噜 mast 给.. 装桅杆 charcoal 木炭、炭笔 kilowatt 千瓦 pitch 球场、音高、程度、沥青 vault [vɔ:lt] 拱顶、金库、墓穴 grove [ɡrəuv] 小树林、树丛 pipe 管乐器、烟斗、管道 scripture 经文、经典 persistence 锲而不舍 deposite 押金、寄存物、保证金、存款 # 55. persevere vi. 坚持、锲而不舍 [ˌpə:siˈviə] waver vi. 摇晃 犹豫不决 trample 践踏 踩伤 distinguish devour vt. 狼吞虎咽 thrill slaughter 屠杀 屠宰 brace 准备 使紧靠 紧绷 (肩 or 膝) latent 潜在的 compulsory 强迫的 义务的 representative initially propagation 繁殖 宣传 传播 drawback yacht [jɔt] 游艇 remainder 剩余物 余数 # 56. boycott vt. 联合抵制 tower vi 高耸 屹立 gather qualify suspicious 可疑的 猜疑的 [səˈspiʃəs] violation 违反 regime [reiˈʒi:m] 政体 制度 养生法 proposition 观点 命题 amusement 娱乐 消遣 whisker 络腮胡子 一丝 一点儿 knight 骑士 武士 爵士 descendant 子孙 后裔 breed 品种 prose 散文 idleness 懒惰 闲散 shrug 耸肩 obedience 服从 complement 补充 衬托物 sincerity [sɪnˈserɪti:] 真诚 诚意 # 57. designate [ˈdeziɡneit] vt. 指派；指定；标示；把… 定名为 dock 船停码头 入港 dominate reconcile 使和好 调和 顺从 telex 发电报 resume 重新开始 恢复 destine 命定 注定 预定 [ˈdestɪn] watery subordinate 下级的 次要的 [səˈbɔ:dinit] cable 缆绳 电报 champion [ˈtʃæmpjən] 冠军 拥护者 deficiency tropic 热带地区 回归线 disagreement warrant 拘捕令 正当理由 shipbuilding shrine [ʃrain] n. 神庙，神龛，圣祠；圣地 # 58. ingenuity [ˌɪndʒiˈnjuiti] n. 心灵手巧 participate forsake [fəˈseik] 遗弃 抛弃 离开 flect 弯曲 deflect 偏移 转移 使脱离 放弃 pluck 采摘 拔 弹乐器 修眉毛 industrious [ɪnˈdʌstri:əs] 勤劳的 勤奋的 geographical decimal [ˈdesiməl] adj. 小数的，十进制的 singular [ˈsiŋɡjulə] adj. 异常的；非凡的；单数的 membership 成员资格 会员人数 hollow 树洞 embroidery 刺绣 terrorist 恐怖分子 substance 物质 重要性 主旨 buffalo [ˈbʌfələu] 水牛 水陆坦克 miser [ˈmaɪzə] 守财奴 吝啬鬼 wrench 痛苦 扳钳 [rentʃ] 猛拉 使痛苦 slander 诽谤 诋毁 [ˈslændər] # 59. fling [fliŋ] vt.&amp;vi. 猛掷；突然冲向；急伸 deal 买卖 wretched 不幸的 讨厌的 苦恼的 难过的 [ˈretʃid] woe 悲伤 悲痛 麻烦 bead 珠子 generosity 慷慨 大方 shrub 灌木 banquet 宴会 盛宴 [ˈbæŋkwit] expenditure [ɪkˈspendətʃə] n. （时间等）消耗；花费，开销，支出 inference 推论 结论 Egyptian [ɪˈdʒɪpʃən] n. 埃及人 graphite 石墨 [ˈgræfˌaɪt] Jupiter erosion # 60. rebuke [riˈbju:k] vt. 指责，非难，斥责 entreat 恳求 乞求 [enˈtri:t] preside vi. 主持 负责 flutter vi. 振翼 飘动 peck 啄 轻吻 rinse 漱口 冲洗 [rins] rebuck 指责 斥责 monstrous 骇人听闻的 巨大的 yeast 酵母 [ji:st] motorway [ˈməʊtəˌweɪ] 高速公路 seaside ultraviolet [ˌʌltrəˈvaiəlit] 紫外线辐射 vocation 职业 使命 horizon 地平线 范围 眼界 pirate [ˈpaiərit] 海盗 道德破坏者 steak [steik] 牛排 牛肉 # 61. console 安慰 慰藉 安抚 [kənˈsəul] chord vi. 和谐 [kɔ:d] plain 素色的 朴素的 明显的 相貌平平的 willow 柳树 standardize alignment 调准 结盟 联合 conceit 自负 自大 spite 恶意 怨恨 monarch [ˈmɔnək] 君主 帝王 stout 矮胖的 结实的 坚决的 [staut] expel 驱除 thermal 热的 天然温热的 保暖的 chill v. 使变冷 冷却 恐惧 bankrupt yearn vi. 渴望 渴求 向往 evaporate vi. 消失 lofty 高耸的 崇高的 傲慢的 ruthless 无情的 冷酷的 坚决的 overwhelming [ˌəuvəˈhwelmiŋ] 巨大的 势不可挡的 pulley 滑轮 皮带轮 [ˈpʊli] herb 草 simplicity 质朴 简单 reproduction 繁殖 复制品 [ˌri:prəˈdʌkʃən] exposition [ˌekspəˈziʃən] n. 说明，解释；展览会，博览会 outlaw 逃犯 亡命之徒 [ˈautlɔ:] # 63. faultless 完美无缺的 无可挑剔的 salute 向致敬 赞扬 [səˈlu:t] subdue 征服 克服 [səbˈdju:] patrol v. 巡逻 [pəˈtrəul] muse vi. 沉思 冥想 hike vi. 徒步旅行 gamble 冒险 vt. choice 优等的 negative 呈阴性的 cape 披肩 斗篷 sentiment 情绪 见解 感伤 眷恋 regulation frequency aerospace 航天工业 (工业) proton 质子 norm 规范 chestnut 栗子 栗树 栗色 lease 租约 租契 # 64. bridle vt. 控制 给... 套头 [ˈbraɪdl] endow vt. 资助 赋予 barren 贫瘠的 无用的 不孕的 [ˈbærən] striking 显著的 妩媚动人的 gradient [ˈgreɪdi:ənt] adj. 倾斜的 梯度 dynaimic (al) 力的 kidney 肾脏 肾 [ˈkidni] 肾，肾脏；（供食用的）腰子 bugle 军号 喇叭 [ˈbju:gəl] ballet hostage 人质 受限制的人 [ˈhɔstidʒ] cooperative 合作社 qualification 资格 素质 资历 限制条件 # 65.reel v. 蹒跚 摇摆 踉跄 卷 绕 stitch vt. 缝 thicken 变浓稠 变密集 undesirable 不受欢迎的 不良的 有害的 questionable 可疑的 有问题的 infinitely adv. 无限地，无穷 [ˈɪnfɪnɪtlɪ] flake 小薄片 碎片 bearing 忍受 方位 举止 轴承 Saturn [罗神] 农神 土星 [ˈsætən] fastener 扣件 纽扣 拉链 [ˈfɑ:sənə] arctic 北极 [ˈɑ:ktɪk] misery 痛苦 不幸 穷困 [ˈmizəri] epoch 时代 历元 [ˈi:pɔk] 、 # 66. squat vt.(使) 蹲下 擅自占用 [skwɔt] negotiate 谈判 协商 顺利通过 reproduce 模拟 复制 重复 繁殖 raise [reiz] 提出 举起 起身 提高 筹集 adjoin 邻接 毗连 [əˈdʒɔin] insulate 将。隔离 使隔热、隔音、绝缘 conceive 想象 以为 怀孕 southwards poll vi. 对・・・进行民意检测 获得 (票数) sovereign 独立自主的 拥有最高统治权的 [ˈsɔvrin] thorough 仔细的 严谨的 modesty 谦逊 (地方) 小 filth 污秽 污物 淫秽 [filθ] terrace 排屋 平台 梯田 [ˈterəs] warfare 战争 amplitude 广大 广阔 大量 振幅 [ˈæmplɪˌtu:d] preservation [ˌprezəˈveiʃən] 保存 refinery 精炼厂 提炼厂 [rɪˈfaɪnəri:] # 67. overhang vi. 悬垂 [ˌəʊvəˈhæŋ] coin 杜撰 制造硬币 steal 窃取 grope vi 探索 conform vi pattern 防制 模仿 以图案装饰 reclaim 开垦 收回 申请退税 indispensable eternal 永久的 不朽的 没完没了的 [i:ˈtə:nl] chorus [ˈkɔ:rəs] 合唱 合唱团 副歌 scarcity 缺乏 不足 稀少 [ˈskeəsɪti:] snob 势利小人 battery 电池 一排 一系列 [ˈbætəri] quartz 石英 incidence 发生 发生率 入射 # 68. menace [ˈmenəs] v. 威胁 恐吓 fence vi. 击剑 围栅栏 gorgeous [ˈɡɔ:dʒəs] 令人愉快的 漂亮的 绚丽的 pregnent 怀孕的 意义深长的 耐人寻味的 identical 同一的 完全相同的 ordinarily 通常 admiration [ˌædməˈreɪʃən] 钦佩 赞赏 羡慕 coefficient [ˌkəʊəˈfɪʃənt] 协同因素 系数 marsh 沼泽 湿地 partition [pɑ:ˈtiʃən] 隔墙 隔断 分开 complexity pumpkin resignation [ˌrezɪgˈneɪʃən] 屈从 顺从 辞呈 predecessor [ˈpri:disesə] 前辈 前任 前身 weaver 织布工、者 # 69. bestow [biˈstəu] 给予 赠与 授予 bend vi. 屈从 弯腰 indulge [inˈdʌldʒ] vi. 纵容 娇惯 filter vi. 过滤 走漏 overtake 突然袭击 压倒 赶上 trigger vt. 触发 引爆 onward (s) 向前的 regorous [ˈriɡərəs] 严格的 严密的 一丝不苟的 literary 精通文学的 electronics forum [ˈfɔ:rəm] 论坛 regiment 团 一大群 [ˈredʒimənt] courtesy [ˈkə:tisi] 礼貌 彬彬有礼 subscript 下标 correlation 关系 granite [ˈɡrænit] 花岗岩 # 70. hurl vi. 猛投 [hə:l] contend [kənˈtend] 声称 主张 wag 摇摆 摇动 摇晃手指 worship vi. 做礼拜 slack 萧条的 不景气的 懈怠的 thrifty [ˈθrɪfti:] 节俭的 茂盛的 photoelectric [ˌfəʊtəʊɪˈlektrɪk] 光电的 sheer 纯粹的 陡峭的 极薄的 token 代金券 记号 辅币 jewellery [ˈdʒuːəlri] 珠宝 首饰 deflection 偏斜 偏转 satisfaction 满足 赔偿 补偿 olive neutron [ˈnu:ˌtrɔn] 中子 sitting-room shade 浓淡 深浅 阴凉处 enclosure [inˈkləuʒə] 围绕 围场 圈占地 附件 # 71 reign [rein] v. 占优势 盛行 统治 主宰 impose 强加 使承受、打扰 denounce 谴责 痛斥 告发 traverse vt. 横穿 穿过 [ˈtrævəs] cherish 珍爱 怀有 acknowledge 承认 公认 表示感谢 diminish 减少 减弱 贬低 [diˈminiʃ] subtle 微妙的 机巧的 清淡的 [ˈsʌtl] integral 基本的 构成整体所必须的 [ˈintiɡrəl] accessory 附属的 同谋的 [ækˈsesəri] interface 界面 接口 vicinity 邻近 附近地区 [viˈsiniti] displacement 取代 免职 wasp 黄蜂 [wɔsp] detector 探测器 检测仪 electrician 电工 电气技师 row 严重分歧 争吵 吵闹 windmill 风车 [ˈwɪndˌmɪl] bachelor # 72 rattle 发出震颤声 发出格格声 [ˈrætl] tack 用大头钉固定 曲折航行 shatter 使粉碎 、破碎 [ˈʃætə] paralyse 使麻痹、瘫痪 [ˈpærəlaiz] thoughtless 粗心的 欠考虑的 自私的 [ˈθɔ:tlɪs] irrespective 不考虑的 不顾的 [ˌɪrisˈpektiv] summary 概括的 速决的 glider 滑翔机 propeller 螺旋桨 推进器 [prəˈpelə] dismay 惊恐 焦虑 哀伤 ingredient 配料 成分 因素 denial 否认 拒绝 [diˈnaiəl] accord 一致 符合 协议 audience 正式会见 听众 读者 [ˈɔ:djəns] # 73 rally vi 集合 团结 恢复 [ˈræli] perish vi. 惨死 毁灭 老化 [ˈperiʃ] surpass 超出 [səˈpɑ:s] instantaneous 瞬间的 即刻的 [ˌɪnstənˈteinjəs] grim 严峻的 阴森的 严肃的 polar 极地的 完全相反的 fair 合理的 sturdy 坚定的 牢固的 [ˈstə:di] antarctic 南极洲 stew 炖煮的菜 [stju:] skyscraper 摩天楼 lever 把手 杠杆 手段 方法 [ˈli:və] spice 香料 调味品 香气 趣味 [spais] burial 埋葬 葬礼 [ˈberiəl] disappearance 消失 失踪 丢失 被盗 # 74 riot vi. 发动暴乱 闹事 oar vi. 划 [ɔ:] coke vt.&amp;vi. 炼成焦炭 exemplify 作为... 例证 是... 典范 even 恒定的 平坦的 平均的 comparable 可比较的 类似的 counter 反方向地 对立地 directory 通讯录 目录 parameter 参数 界限 thigh 股 大腿 [θai] cavity 洞 [ˈkæviti] succession 继承权 一连串 receiver 接收者 听筒 recipe [ˈresəpi] vigour 活力 精力 元气 [ˈvɪgə] faction 派别派系 小集团 内讧 [ˈfækʃən] projector 投影仪 放映机 lounge [laundʒ] # 75 scramble [ˈskræmbl] [s gan bl] vi. 爬 攀登 仓促行动 争夺 inlet 引进 paper 贴纸 掩饰 用纸覆盖 [ˈpeipə] ascribe 把... 归因于 认为... 具有 [əsˈkraib] relay 转播 传送 传话 转述 interconnect 使相互联系 [ˌɪntəkəˈnekt] quanlitative 品质的 性质的 [ˈkwɔlitətiv] peak 帽舌 frock 女裙 女装 [frɔk] criterion [kraiˈtiəriən] firmness 坚固 坚实 [ˈfə:mnɪs] punch 打孔机 穿孔器 gust 一阵狂风 迸发 (感情) [ɡʌst] pickle 腌菜 泡菜 困境 窘境 [ˈpɪkəl] array 陈列 布置 一大批 transverse 横轴 [trænsˈvɜ:s] superiority [suːˌpɪəriˈɒrəti] 优越性 优势 romance [rəuˈmæns] # 76 clash v. 争论 发生冲突 不相容 unlimited stiff 生硬的 不灵活的 酸痛的 circular 环形的 poke 戳 刺 jingle 叮当响 revive 使苏醒 复兴 ashore 在岸上 上岸 nun 修女 spectacle 场面 景象 [ˈspektəkl] majesty 庄严 雄伟 陛下 [ˈmædʒisti] grant 拨款 补助金 concert 一致 和谐 音乐会 vision 视力 展望 幻觉 [ˈviʒən] slit 狭长的切口 狭缝 [slit] anode 阳极 正极 [ˈænˌəʊd] architect 建筑师 [ˈɑ:kitekt] # 77 scoff vi. 嘲笑 嘲弄 狼吞虎咽 deafen 使聋","categories":[{"name":"English","slug":"English","permalink":"http://rhymeet.github.io/categories/English/"}],"tags":[]},{"title":"relate_words","slug":"relate-words","date":"2022-11-09T13:54:41.000Z","updated":"2023-02-02T16:04:06.456Z","comments":true,"path":"2022/11/09/relate-words/","link":"","permalink":"http://rhymeet.github.io/2022/11/09/relate-words/","excerpt":"","text":"# semaphore /ˈseməˌfôr/ 名词：信号，旗语，臂板信号，信号机 binary semaphore 二进制信号量 # simultaneously 同时地 # exclusive 独有的、专用的、排外的、排斥的 # synchronization 同步 # mutel exclusion within the monitor 监视器内的互斥排除 # monitor 管程 # intervals 名词：间隔，间隙，音程，幕间休息，际","categories":[{"name":"English","slug":"English","permalink":"http://rhymeet.github.io/categories/English/"}],"tags":[]},{"title":"OS(三)内存管理","slug":"OS-三-内存管理","date":"2022-11-09T11:56:48.000Z","updated":"2022-12-16T16:28:45.142Z","comments":true,"path":"2022/11/09/OS-三-内存管理/","link":"","permalink":"http://rhymeet.github.io/2022/11/09/OS-%E4%B8%89-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/","excerpt":"","text":"# 内存管理の概念 # 内存空间の分配与回收 操作系统负责内存空间的分配与回收 # 内存空间の扩充 覆盖技术 交换技术 虚拟存储技术 操作系统需要提供某种技术从逻辑上对内存空间进行扩充 # 地址转换 操作系统需要提供地址转换功能，负责程序的逻辑地址与物理地址的转换 程序员只需关注指令、数据的逻辑地址。 而逻辑地址到物理地址的转换 (此过程称为地址重定位) 应该由 OS 负责 三种装入方式 绝对装入：编译时产生绝对地址 编译器负责地址转换 (单道程序阶段，此时还没有产生操作系统) 可重定位装入：装入时将逻辑地址转换为物理地 装入程序负责地址转换 (用于早期的多道批处理系统) 动态运行时装入：运行时将逻辑地址转换为物理地址，需设置重定位寄存器 运行时才负责地址转换 (现代操作系统) # 内存保护 操作系统需要提供内存保护功能，保证各进程在各自存储空间内运行，互不干扰 方法 1：在 CPU 中设置一对上、下限寄存器，存放进程的上、下限地址。进程的指令要访问某个地址时，CPU 检查是否越界。 方法 2：采用重定位寄存器 (又称基址寄存器) 和界地址寄存器 (又称限长寄存器) 进行越界检查。 重定位寄存器中存放的是进程的 起始物理地址， 界地址寄存器中存放的是进程的 最大逻辑地址。 # 覆盖与交换 # 覆盖技术 思想：将程序分为多个段 (多个模块)。常用的段 常驻内存、不常用的段在需要时调入内存 内存中分为一个 &quot;固定区&quot; &amp; 若干个 &quot;覆盖区&quot; 需要常驻内存的段放在 “固定区”、调入内存后就不再调出。 不常用的段放在 “覆盖区”、需要用到时调入内存、用不到时调出内存。 # 交换技术 思想：内存空间紧张时、系统将内存中某些进程暂时换出外存、把外存中某些具备运行条件的进程换入内存 (进程在内存与磁盘 间动态调度) 内存紧张时、换出某些进程以腾出内存空间、再换入某些进程。 磁盘分为文件区和对换区、换出的进程放在对换区。 中级调度 (内存调度)、就是要决定将哪个处于挂起状态的进程重新调入内存。 暂时换出外存等待的进程为挂起状态 (suspend)--- 就绪挂起、阻塞挂起 # 覆盖与交换 区别： 覆盖是在同一个程序 or 进程中的 交换是在不同进程 (or 作业) 之间的 # 连续分配管理方式 # 单一连续分配 内存中只有一道用户程序、用户程序独占整个用户区空间。 优点：实现简单、无外部碎片；可采用覆盖技术扩充内存； 不一定需要采取内存保护 # 固定分区分配 # 动态分区分配","categories":[{"name":"OS","slug":"OS","permalink":"http://rhymeet.github.io/categories/OS/"}],"tags":[]},{"title":"Kmeans","slug":"Kmeans","date":"2022-11-07T01:12:46.000Z","updated":"2022-11-07T01:12:46.869Z","comments":true,"path":"2022/11/07/Kmeans/","link":"","permalink":"http://rhymeet.github.io/2022/11/07/Kmeans/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"4_mul_linerRegression","slug":"4-mul-linerRegression","date":"2022-11-07T01:11:48.000Z","updated":"2022-11-07T01:11:48.478Z","comments":true,"path":"2022/11/07/4-mul-linerRegression/","link":"","permalink":"http://rhymeet.github.io/2022/11/07/4-mul-linerRegression/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"OS(二)进程与线程","slug":"OS-二-进程与线程","date":"2022-11-03T09:12:47.000Z","updated":"2023-02-01T16:10:11.344Z","comments":true,"path":"2022/11/03/OS-二-进程与线程/","link":"","permalink":"http://rhymeet.github.io/2022/11/03/OS-%E4%BA%8C-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/","excerpt":"","text":"# 进程の概念、组成、特征 概念：是动态的 是程序的一次执行过程 概念：是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位 # 进程の组成 - PCB 进程被创建时，OS 为其分配の Process ID OS 要记录 PID、进程所属用户 ID（UID） PCB 是进程存在の唯一标志 process control block PCB 、程序代码、数据段 组成了进程实体 (进程映像) PCB 是给 OS 用的 程序代码、数据段是给进程用的 一个进程实体 (进程映像) 由 PCB、程序段、数据段组成。 进程是动态的，** 进程实体 (进程映像)** 是静态的。 # 进程 d 特征 动态性是 most basic # 进程の状态与转换 # 状态 # 创建态、就绪态 进程正在被创建时，它的状态是 “创建态”，在这个阶段操作系统会为进程 分配资源，初始化 PCB 当进程创建完成后，便进入 “就绪态”，处于就绪态の进程已经具备运行条件，但由于没有空闲の CPU，就暂时不能运行 # 运行态 如果一个进程此时在 CPU 上运行，那么这个进程称处于 “运行态” CPU 会执行该进程对应の程序 (执行指令序列) # 阻塞态 在进程运行过程中，可能会请求等待某个事件的发生 (如等待某种系统资源の分配 or 等待其他进程的响应) 让这个进程下 CPU ，并让它进入 &quot; 阻塞态 &quot; 当 CPU 空闲时，又会选择另一个 “就绪态” 进程上 CPU 运行 # 终止态 该进程可执行 exit 系统调用，请求操作系统终止该进程 此时该进程会进入 “终止态”，操作系统会让该进程下 CPU 并回收内存空间等资源，最后还要回收该进程的 PCB。 当终止进程的工作完成后，这个进程彻底消失了 # 状态间の转换 进程 PCB 中，会有一个变量 state 来表示进程的当前状态 # 进程的组织方式 # 进程控制 # 基本概念 WHAT： 进程控制的主要功能是对系统中所有进程 实施有效的管理，具有创建新进程、策划小已有新进程、实现进程状态转换等功能 实现进程状态的转换 如何实现：用原语实现 原语 是一种特殊的程序，它的执行具有原子性。 # 进程控制相关的原语 Tip：无论哪个进程控制原语，要做的就三件事 更新 PCB 中信息 (修改进程状态 state) 保存 / 恢复运行环境 所有的进程控制原语一定都会会修改进程状态标志 录夺当前运行进程的 CPU 使用权 必然需保存其运行环境 某些进程开始运行前必然要恢复其运行环境 将 PCB 插入合适的队列 分配 / 回收资源 # 进程的创建 # 进程的终止 # 进程的阻塞 # 进程的唤醒 # 进程的切换 # 进程通信 (IPC) Inter-process Communication 两个进程之间产生 数据交互 进程 是分配系统资源的单位 (include 内存地址空间)，因此各进程拥有的内存地址空间相互独立 为保证安全，一个进程不能直接访问另一个进程的地址空间 # 共享存储 为避免出错，各个进程对共享空间的访问应该是互斥的 各个进程可使用 OS 内核提供的同步互斥工具 (PV 操作) 基于数据结构的共享 比如共享空间里只能放一个长度为 10 的数组。这种通信方式速度慢、限制多、是一种低级通信方式 基于存储区的共享 OS 在内存中划出一块共享存储区，数据的形式、存放位置都由通讯进程控制，而不是 OS。这种共享方式速度很快，是一种高级通讯方式 # 消息传递 进程间的数据交换以格式化的消息 (Message) 为单位 进程通过 OS 提供的 “发送消息 / 接收消息” 两个原语进行数据交换 直接通信方式 消息发送进程要指明 接收进程的 ID 间接通信方式 通过 “信箱” 作为中间实体进行消息传递 # 管道通信 管道是一个特殊的共享文件，又名 pipe 文件。其实就是在内存中开辟一个大小固定的内存缓冲区 写进程往管道写数据，即使管道没被写满，只要管道没空，读进程就可以从管道中读数据 都进程从管道中读数据，即使管道没被读空，只要管道没满，写进程就可以往管道中写数据 管道只能采用半双工通信，某一时间段内只能实现单向的传输。如果要实现双向同时通信，则需要设置两个管道 各进程要互斥地访问管道 (由操作系统实现) 当管道写满时，写进程将阻塞，直到都进程将 管道中的数据取走，即可唤醒写进程 当管道读空时，读进程将阻塞，直到写进程往 管道中写入数据，即可唤醒读进程 管道中的数据一旦被读出，就彻底消失。 SO，当多个进程读同一个管道时，可能会错乱。对此，通常有两种解决方案： 一个管道允许多个写进程，一个读进程 (14 年官方答案) 允许有多个写进程，多个读进程，但系统会让各个读进程轮流从管道中读数据 (Linux の方案) # 线程概念、多线程模型 可以把线程理解为 “轻量级进程” 线程是一个基本的 CPU 执行单元，也是程序执行流的最小单位。 引入线程之后，不仅是进程之间可以并发，进程内的各线程之间也可以并发，从而进一步提升了系统的并发度，使得一个进程内使得一个进程内也可以并发处理各种任务 (如 tim 视频、文字聊天、传文件) 引入线程后，进程只作为除 COU 之外的系统资源的分配单元 (如 打印机、内存地址空间等 都是分配给进程的) 线程则作为处理机的分配单元 # 变化 资源分配、调度 传统进程机制中，进程是 资源分配、调度的基本单位 引入线程后，进程是资源分配的基本单位，线程是调度的基本单位 并发性 传统进程机制中，只能进程之间并发 引入线程后，各线程间也能并发，进程间也并发，提高了并发度 系统开销 传统进程间并发，需要切换进程的运行环境，系统开销很大 线程间并发，如果是同一进程内的线程切换，则不需要切换进程环境，系统开销小 引入线程后，并发所带来的系统开销小 # 属性 线程是处理机调度的单位 多 CPU 计算机中，各个线程可占用不同的 CPU 每个线程都有一个线程 ID 、线程控制块 (TCB) 线程也有 就绪、阻塞、运行 三种基本状态 线程几乎不拥有系统资源 同一进程の 不同线程间共享 进程の资源 由于共享内存地址空间，同一进程中の线程间通信甚至无需系统干预 同一进程间の线程切换 不会引起进程切换 不同进程中の线程切换 会引起进程切换 切换同进程内の线程，系统开销很小 切换进程，系统开销很大 # 线程的实现方式 &amp; 多线程模型 # 线程的实现方式 # 用户级线程 用户级线程由应用程序通过线程库实现，所有的线程管理工作都由应用程序负责 (包括 线程切换) 用户级线程中，线程切换可以在用户态下即可完成，无需操作系统干预 在用户看来，是由多个线程。但是在操作系统内核看来，并 意识不到线程の存在。 “用户级线程” 就是 “从用户视角能看到の线程” 优缺点： 优点：用户级线程の切换 在用户空间即可完成，不需要切换到核心态，线程管理の系统开销小，效率高。 缺点：当一个用户级线程被阻塞后，整个进程都会被阻塞，并发度不高。 多个线程不可在多核处理机上并行运行。 # 内核级线程 内核级线程の管理工作由操作系统内核完成 线程调度、切换等工作都由内核负责，so 内核级线程の切换必然需要在核心态下才能完成 操作系统 会为每个 内核级线程建立相应的 TCB (Thread control Block 线程控制块)，通过 TCB 对线程进行管理。“内核级线程” 就是 “从操作系统内核视角看 能看得到的线程” 优缺点： 优点：当一个线程被阻塞后，别的线程还可以继续执行，并发能力强。 多线程可在多核处理机上并发执行。 缺点：一个用户会占用多个内核级线程，线程切换由 OS 内核完成，需要切换到核心态，so 线程管理の成本高，开销大。 # 多线程模型 在支持内核级线程的系统中，根据用户级线程 and 内核级线程 の映射关系，可以划分为几种多线程模型 # 一对一模型 一个用户级线程 映射到 一个内核级线程。每个用户进程有与 用户级线程同数量の内核级线程 优点： # 多对一模型 # 多对多模型 # 线程的状态与转换 # 状态与转换 # 组织与控制 # 调度算法 Tips 作业调度 or 进程调度？ 抢占式 or 非抢占式？ 优缺点？是否导致饥饿？ # 先来先服务 (FCFS) # 短作业优先 (SJF) # 高响应比优先 (HRRN) ！ 😂 算法 可抢占？ 优点 缺点 考虑等待时间、运行时间 饥饿？ (某进程长期得不到服务) FCFS 非抢占式 公平；实现简单 对短作业不利、长作业有利 等待时间 不会 SJF/SPF 默认非抢占式 SJF/SPF 、抢占式 SRTN 拥有最短の平均等待时间、平均周转时间 对长作业不利、可能导致饥饿；难以做到真正の短作业优先 运行时间 会 HRRN 非抢占式 FCFS &amp; SJF の折中 😵 综合考虑等待时间、运行时间 不会 SJF/SPF 可用于 作业调度 job、进程调度 process 作业 / 进程の运行是由用户提供的，并不一定真实，不一定能做到真正的短作业优先 S Remaining Time Next # 调度の层次、概念 作业：一个具体の任务 用户向系统提交一个作业～用户让 OS 启动一个程序 (来处理一个具体の任务) 挂起： 内存不够时，可将某些进程の数据调出外存。等 内存空闲 or 进程需要 运行时再重新调入内存。 暂时调到外存等待の进程状态 为 挂起状态。被挂起的进程 PCB 会被组织成挂起队列。 挂起态可分为：就绪挂起、阻塞挂起。 有的 OS 会把 就绪挂起、阻塞挂起 分为两个挂起队列，甚至会根据阻塞原因不同再把 阻塞挂起进一步细分为多个队列 # 三个层次 高级调度 (作业调度): 外存 ---&gt; 内存 按照某种规则，从后备队列中选择合适の作业将其调入内存，并为其创建进程。 按一定的原则从 外存の作业后备队列中挑选一个作业 调入内存，并创建进程。 每个作业值调入一次，调出一次。 作业调入时 会创建 PCB，调出时 才撤销 PCB。 低级调度 (进程调度 / 处理机调度)： 内存 ---&gt;CPU 按照某种规则，从就绪队列中选择一个进程为其分配处理机。 按照某种策略 从就绪队列中选取 一个进程，将处理机分配给它。 是 OS 中最基本の一种调度，在一般の OS 中都必须配置 进程调度。 进程调度の 频率很高，一般几十毫秒一次 中级调度 (内存调度)： 外存 ---&gt; 内存 按照某种规则，从挂起队列中选择合适的进程 将其数据调回内存 按照某种策略决定将哪个处于挂起状态の进程重新调入内存。 一个进程可能会被 多次调出、调入内存，因此中极调度 发生の频率要比高级调度更高。 # 进程互斥の软件实现方法 # 单标志法 算法思想：两个进程在访问完临界区后会把使用临界区の权限 转交给另一个进程。 = 每个进程进入临界区の权限只能由另一个进程赋予 “同一时刻最多只允许一个进程访问临界区” 未遵循 “空闲让进” # 双标志先检查 未遵循 “忙则等待” (p0,p1 搞不好同时访问临界区) # 双标志后检查 未遵循 “空闲让进 、 有限等待” ，可能导致饥饿 # Peterson 算法 遵循了 空闲让近、忙则等待、有限等待 三个原则，but 依未遵循 让权等待 原则 # 进程互斥の硬件实现方法 # 中断屏蔽方法 利用 “开 / 关中断指令” 实现 (与原语的实现思想相同，即 在某进程开始访问临近区到结束访问为止都不允许被中断，也就不能发生进程切换， 因此也不能发生两个同时 访问临界区的情况) 关中断； 临界区； 开中断； 优点：简单、高效 缺点：不适用于 多处理机；只适用于操作系统内核进程，不适用于 用户进程 (因为 开 / 关 中断指令只能运行在内核态， 这组指令如果能让用户随意使用会很危险) # TestAndSet 指令 简称 TS、TSL 指令 TSL 是用硬件实现的，执行过程中不允许被中断，只能一气呵成。 优点：适用于多处理机环境 实现简单、无需像软件方法严格检查是否有漏洞 缺点：不满足” 让权等待 “原则，暂时无法进入临界区の进程会占用 CPU 并循环执行 TSL 指令，从而导致 “忙等” # Swap 指令 简称 Exchange XCHG 指令 Swap 指令是用硬件实现の，执行过程中不允许被中断，只能一气呵成。 优点：适用于多处理机环境 实现简单、无需像软件方法严格检查是否有漏洞 缺点：不满足” 让权等待 “原则，暂时无法进入临界区の进程会占用 CPU 并循环执行 TSL 指令，从而导致 “忙等” # 互斥锁 解决临界区最简单工具の就是互斥锁 (mutex lock) . 一个进程在进入临界区时应获得锁；在退出临界区时释放锁。 函数 acquire () 获得🔒，release () 释放🔒。 每个互斥锁有一个布尔变量 availabel, 表示🔒是否可用。 如果🔒是可用の，调用 acquire () 会成功，且🔒不再可用。当一个进程试图获取不可用的🔒时，会被阻塞，直到🔒被释放。 acquire() while(!available)&#123; ； //忙等待 available = false; //获得锁 &#125; release()&#123; available = true; //释放锁 &#125; acquire () 和 release () 的执行必须是原子操作，因此互斥锁通常采用硬件机制来实现。 互斥锁の主要缺点是忙等待，当有一个进程在临界区，任何其他进程在进入临界区时必须连续循环调用 acquire () 当多个进程共享同一 CPU 时，就浪费了 CPU の生命周期。 因此，互斥锁 通常用于多处理系统，一个线程可以在一个处理器上等待，不影响其他线程の执行。 需要连续循环忙等的互斥锁，都可称为自旋锁 (spin lock), 如 TSL、swap、单标志法 特性： 需忙等，进程时间片用完才下 处理机，违反 “让权等待” 优点：等待期间不用切换上下文，多处理系统中，若上锁の时间短，则等待代价很低 常用于多处理系统，一个核忙等，其他核正常工作，并快速释放临界区 不太适用于单处理机系统，忙等の过程中不可能照常工作 # 信号量机制 1965，荷兰科学家 Dijkstra 提出の实现 “进程互斥、同步の方法”-- 信号量机制 用户进程可以通过使用 OS 提供の一对原语来对信号量进行操作，实现了进程互斥、进程同步。 每个信号量至少记录 2 个信息：信号量的值 and 等待该信号量的进程队列 (queue PCB) (类 PASCAL 语言来描述) semaphore = record value: integer; queue: ^PCB; end; 其中 PCB 是进程控制块，是操作系统为每个进程建立的数据结构。 信号量其实就是一个变量，一个信号量可 表示系统中某种资源の数量，如：系统中只有一台打印机，就可以设置一个处置为 1 的信号量。 原语是一种特殊的程序段，其执行只能一气呵成，不可被中断。原语是由关中断 / 开中断指令实现的。 一对原语：wait (S) 原语 &amp; signal (S) 原语，原语可理解为自己写的函数，信号量 S 为函数调用时传入の参数。 wait、signal 原语常简称为 P、V 操作。平时常写为 P (S)、V (S) # 整型信号量 用一个整数型变量作为信号量，用来表示系统中某种资源的数量。 与普通整数信号量の区别：对信号量的操作只有三种：初始化、P 操作、V 操作 Eg：某计算机系统有一台打印机 int S = 1; //初始化整形信号量，表示打印机资源个数 void wait(int S)&#123; //wait原语，相当于“ 进入区” while( S &lt;=0 ); S = S - 1; &#125; void signal(int S)&#123; //signal原语，相当于“ 退出区” S = S + 1; &#125; 进程 pi ... wait (s); // 进入区，申请资源 使用资源... // 临界区，访问资源 signal (s); // 退出区，释放资源 ... # 记录型信号量 整型信号量缺陷 存在 “忙等” 问题，-&gt;, 记录型 数据结构表示の信号量。 信号量 value&gt;0，value 表示可用资源的数量；value&lt;0，value 表示因该类资源阻塞的进程数量。 // 记录型信号量の定义 typedef struct { int value; // 剩余资源数 struct process *L; // 等待队列 } semaphore; void wait( semaphore S)&#123; S.value--; if(S.value &lt; 0)&#123; block(S.L); //如果剩余资源数不够，使用block原语使进程 运行态-&gt;阻塞态，并把挂到信号量S的等待(阻塞)队列中 &#125; &#125; void singal( semaphore S)&#123; S.value++; if(S.value &lt;= 0)&#123; wakeup(S.L); //释放资源后，若还有别的进程在等待这个资源，则使用wakeuo原语唤醒等待队列中的一个进程，该进程从 阻塞态-&gt;就绪态 &#125; &#125; P 操作 S.value &lt;0 该类资源已分配完毕，因此进程应调用 block 原语进行自我阻塞，主动放弃处理机，并插入该类资源的等待队列 S.L 中。可见，该机制遵循了 &quot;让权等待&quot; 原则，不会出现 “忙等” 现象。 # 二进制信号量 (Binary Semaphore) 只允许信号量取 0 or 1 值 # 用信号量机制实现进程 互斥、同步、前驱关系 一个信号量对应一种资源 信号量的值 = 这种资源的剩余数量 (信号量值 &lt; 0, 说明此时有进程在等待这种资源) P (S)-- 申请一个资源 S，若资源不够就阻塞等待 V (S)-- 释放一个资源 S，若有进程在等待这个资源，则唤醒一个进程 # 进程互斥 basic：信号量 mutex 表示 “进入临界区的名额” 分析并发进程的关键活动，划定临界区 设置互斥信号量 mutex, 初值为 1 在进入区 P (mutex)-- 申请资源 在退出区 V (mutex)-- 释放资源 注意：对不同的临界资源需要设置不同的互斥信号量 缺少 P (mutex) 就不能保证临界资源的互斥访问 缺少 V (mutex) 会导致资源永不被释放，等待进程永不被唤醒 //记录型信号量の定义 typedef struct&#123; int value; //剩余资源数 struct process *L; //等待队列 &#125;semaphore; //信号量机制实现互斥 semaphore mutex = 1; P1()&#123; ... P(mutex); //使用临界资源要加锁 临界区代码段... V(mutex); //解锁 ... &#125; P2()&#123; ... P(mutex); 临界区代码段... V(mutex); ... &#125; # 进程同步 要让各并发进程 按要求有序地推进 分析什么地方需要实现 “同步关系”，即必须保证 “一前一后” 执行的两个操作 (or 代码) 设置同步信号量 S，初值为 0 在 “前操作” 之后执行 V (S) 在 “后操作” 之前执行 P (S) # 进程前驱关系 要为每一对前驱关系各设置一个同步信号量 在 “前操作” 之后对相应的同步信号量执行 V 操作 在 “后操作” 之前对相应的同步信号两执行 P 操作 # 生产者消费者问题 empty：空闲缓冲区の数量 初值 n full：非空闲缓冲区の数量 # 多生产者 - 多消费者 # 吸烟者问题 # 读者写者问题 mutex (1):a semaphore which is used to ensure mutual exclusion when readcount is updated i.e. when any reader enters or exits from the critical section. 一个信号量，用于在 readcount 更新时确保互斥，即当任何阅读器进入或退出临界区时。 readcount (0): an integer variable that keeps track of how many processes are currently reading the object. 跟踪当前有多少进程正在读取对象 wrt (1):a semaphore common to both reder and writer process. # 哲学家进餐问题 Declare condition self[5]; Allows philosopher i to delay when he is hungery but is unable to obtain chopsticks needed. # 管程 # 引入管程原因 解决信号量机制存在的问题：编写程序困难、易出错 一种机制，让程序员写程序时不需再关注复杂的 PV 操作 1973 年，Brinch Hansen 首次再程序设计语言 (Pascal) 中引入 “管程” 成分 -- 一种高级同步机制 # 管程的定义和基本特征 管程是一种特殊的软件模块，有这些部分组成： 局部于管程的 共享数据结构说明 对该数据结构进行操作的一组过程 对局部于管程的共享数据设置初始值的语句 管程有一个名字 # # 死锁的概念 哲学家问题中，if 5 个哲学家都拿起了走手边的筷子。 每个人都占有资源，同时又在等待另一个人手里的资源 在并发环境下，各进程因竞争资源而造成的一种互相等待对方手里的资源，导致各进程都阻塞，都无法向前推进的现象 # 死锁、饥饿、死循环 死锁：一定是 “循环等待对方手里的资源” 导致的，因此如果有死锁现象，那么至少有两个 or 两个以上的进程同时发生死锁. 发生死锁的进程一定处于阻塞态。 饥饿：可能只有一个进程发生饥饿。可能是阻塞态 or 就绪态、(长期得不到需要的 I/O 设备、长期得不到处理机) 死循环：可能只有一个进程发生死循环。死循环的 进程可以上处理机运行 (可以是 运行态)。 由代码的逻辑错误导致的 | 是被管理者的问题 (程序员来解决)； 死锁 &amp; 饥饿 由于 OS 分配资源的策略不合理导致的 | 是管理者 (OS) 的问题 (OS 来解决) # 死锁产生的必要条件 (必须同时满足以下 4 个条件) 互斥条件：只有对必须互斥使用的资源 的争抢才会导致死锁 (哲学家筷子、打印机设备...)。像内存、扬声器这种可以同时让多个进程使用的资源是不会导致死锁的 (因为进程不用阻塞等待这种资源) 不剥夺条件：进程所获得的资源在未使用之前， 不能由其他进程强行夺走，只能主动释放。 请求和保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源又被其他进程占有，此时请求进程被阻塞，但又对自己已有的资源保持不放 循环等待条件：存在一种进程资源的循环等待链，链中的每一进程 已获得的资源 同时被下一个进程所请求 补充：发生死锁时一定有循环等待，但是发生循环等待时未必死锁。 (循环等待是发生死锁的 必要不充分条件) 如果同类资源数大于 1，则循环等待时，未必发生死锁。 如果系统中每类资源都只有一个，那就是 充要条件 了。 # When deadlock happen ? in all, 对不可剥夺资源的不合理分配，可能导致死锁 对系统资源的竞争。 各进程对不可剥夺の资源 (如打印机) 的竞争可能引起死锁， 对可剥夺资源 (CPU) 的竞争是不会引起死锁的。 进程推进顺序非法。 请求和释放资源的顺序不当 如：并发执行的进程 P1、P2，各自申请并占有了资源 R1,R2，之后 P1 又紧接着申请 R2，P2 又申请资源 R1，两者会因为申请的资源被对方占有而阻塞，从而发生死锁 信号量的使用不当。 生产者 - 消费者问题中，如果互斥的 P 在 同步的 P 之前，就可能导致死锁 (互斥信号量、同步信号量 as 一种抽象的系统资源) # deadlock 的处理策略 预防：破坏 4 个必要条件中的一个 避免：某种方法防止系统进入不安全状态，从而避免死锁 (银行家算法) 死锁的检测和解除：允许死锁发生、系统负责检测出死锁并解除 # 预防死锁 破坏互斥条件 互斥条件：只有对必须互斥使用的资源的争抢才会导致互锁 将临界资源改为可共享的资源 (如 SPOOLing 技术) 缺点：可行性不高、很多时候无法破环互斥条件。 (为了系统安全、很多地方还必须保护这种互斥性) 破坏不剥夺 条件 不剥夺条件：进程所获得的资源在未使用之前，不能由其他进程强行夺走 当某个进程请求新的资源得不到满足时，它必须立即释放保持的所有资源，待以后需要时重新申请。 当某个进程需要的资源被其他资源占有时，由 OS 协助将想要的资源强行剥夺。 this 一般要考虑各进程的优先级 (如: 剥夺调度方式，就是将处理机资源强行剥夺给优先级更高的进程使用) 缺点： 实现复杂 释放已获得的资源可能造成前一阶段工作的失效。 this 只适用于易保存 and 恢复状态的资源，如 CPU。 反复地申请 and 释放资源会增加系统的开销，降低系统的吞吐量。 对方案一，意味着只要暂时得不到某个资源，之前获得的那些资源就都由放弃，以后再重新申请。如果一直这样，会导致进程饥饿 破坏请求和保持 条件 请求和保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源又被其它进程占有，此时请求进程被阻塞，但又对自己已有的资源保持不放。 采用静态分配方法，即进程在运行前 一次申请完它需要的全部资源，在它的资源未满足之前，不让它投入运行。 一旦投入运行后，这些资源就一直归它所有，该进程就不会再请求别的资源 缺点：有些资源可能只需要很短的时间，因此如果进程的整个运行时间一直都保持着所有资源，就会造成严重的资源浪费，资源利用率低。可能导致某些进程饥饿。 破坏 循环等待 条件 循环等待条件：存在一种进程资源的循环等待链，链中的每一个进程已获得的资源同时 被下一个进程所请求。 可采用顺序资源分配法：给系统中的资源编号，规定每个进程必须按编号递增的顺序请求资源，同类资源 (相同的资源) 一次申请完 缺点：不方便增加新设备、会导致资源浪费、用户编程麻烦 # 避免死锁 # 安全序列 # 银行家算法 # 检测和解除","categories":[{"name":"OS","slug":"OS","permalink":"http://rhymeet.github.io/categories/OS/"}],"tags":[]},{"title":"SQL(二) 关系数据库","slug":"SQL-二-关系数据库","date":"2022-11-02T10:12:31.000Z","updated":"2022-11-09T11:37:17.386Z","comments":true,"path":"2022/11/02/SQL-二-关系数据库/","link":"","permalink":"http://rhymeet.github.io/2022/11/02/SQL-%E4%BA%8C-%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/","excerpt":"","text":"简介：提出关系模型的是美国 IBM 公司的 E.F.Codd 1970 年提出关系数据模型 after , 提出了关系代数 and 关系演算的概念 1972 提出了关系的 第一、第二、第三范式 1974 提出了关系的 BC 范式 # 关系数据结构及形式化定义 # 关系 关系 ：单一的数据结构 。 现实世界的实体 及 实体间的各种联系均用关系来表示。 二维表 ： 逻辑结构。 从用户角度，关系模型中的数据结构 是一张二维表。 建立在集合代数的基础上。 Syntax Description 域 (Domain) 一组具有相同数据类型的集合 笛卡尔积 (Cartesian Product) 所有域所有取值的一个组合 ；不能重复 关系 (Relation) # 域 (Domain) # 一组具有相同数据类型的集合 # 笛卡尔积 (Cartesian Product) from itertools import product for x,y,z in product(['a','b','c'],['d','e','f'],['m','n']): print(x,y,z) 元组 (Tuple) 笛卡尔积中每一元素 (d1,d2,...,dn) 叫做一个 n 元组 (n-tuple) or 简称元组 (张青梅，计算机专业，李勇) 分量 (Component) 笛卡尔积元素 (d1,d2,...,dn) 中的每一个值 di 叫做一个分量。 张青梅、计算机专业、... 基数 (Cardinal number) 笛卡尔积的表示方法 可 一个二维表 每行对应一个元组，每列对应一个域 # 关系 (Relation) # 关系 # 元组 关系中的每个元素是关系中的元组，通常用 t 表示。 # 单元关系 与 二元关系 n=1, 单元关系 (Unary relation) or 一元关系 n=2, 二元关系 (Binary relation) # 关系的表示 关系也是一个二维表，每行对应一个元组，每列对用一个域 # 属性 关系中不同列可对应相同的域 为区分，必须对每列起一个名字，成为属性 n 目关系必有 n 个属性 # 码 候选码 (Candidate Key) 若关系中的某一属性组的值能唯一地标识一个元组，则称该属性组为候选码 简单的情况：候选码只包含一个属性 全码 (All-key) 最极端的情况：关系模式中的所有属性组是这个关系模式的候选码，成为全码。 主码 若一个关系有多个候选码，则选定其中一个为主码 (Primary key) 主属性 候选码的诸属性成为主属性 (Prime attribute) 不包含任何候选码的属性成为非主属性 (None-Prime attribute) or 非码属性 # 三类关系 基本关系 (基本表 or 基表): 实际存在的表，是实际存储数据的逻辑表示。 查询表：查询结果对应的表。 视图表：是虚表，由基本表 or 其他试图表导出的表，不对应实际存储的数据。 # 基本关系的性质 列是同质的 (Homogeneous) 不同的列可出自同一个域 其中的每一列称为一个属性 不同的属性要给予不同的属性名 列的顺序无所谓，列的次序可任意交换。 行的顺序无所谓，行的次序可以任意交换。 任意两个元组的候选码不能相同 分量必须取原子值（most basic） # 关系模式 # What 关系模式 关系模式 Relation Schema 是型 关系是值 关系模式是对关系的描述 元组集合的结构 属性构成 属性来自的域 属性与域之间的映象关系 # 定义 关系模式 # 关系模式与关系 关系模式： 对关系的描述 静态的、稳定的 关系： 关系模式在某一时刻的状态 or 内容 动态的、随时间不断变化的 关系模式和关系往往统称为关系 # 关系数据库 在一个给定的应用领域中，所有关系的集合构成一个关系数据库 # 关系数据库の型与值 关系数据库的型：关系数据库模式 对关系数据库的描述 关系数据库模式包括： 若干域の定义 在这些域上定义の若干关系模式 关系数据库の值： 关系模式在某一时刻对应の关系の集合 # 关系操作 # 基本关系操作 # 常用关系操作 查询：选择、投影、连接、除、并、交、差 数据更新：插入、删除、修改 查询的表达能力是其中最主要的部分 选择、投影、并、差、笛卡尔积 是 5 种基本操作 # 关系操作の特点： 集合操作方式：操作的对象和结果都是集合，一次一集合の方式 # 关系数据库语言の分类 关系代数语言：用对关系の运算来表达查询要求 代表：ISBL 关系演算语言：用为此来表达查询要求 元组关系演算语言： 谓词变元の基本对象是元组变量 代表：APLAHA,QUEL 域关系演算语言： 谓词变元の基本对象是域变量 代表：QBE 具有关系代数 and 关系演算双重特点の语言 代表：SQL # 关系的完整性 # 关系の三类完整性约束 1). 实体完整性 2). 参照完整性 关系模型必须满足の完整性约束条件 称为关系の两个不变性，应该由关系系统自动支持 3). 用户定义の完整性 应用领域需要遵循の约束条件，体现了具体领域中の语义约束 # 实体完整性 规则 2.1 实体完整性规则 (Entity Integrity) 若属性 A 是基本关系 R 的主属性，则属性 A 不能取空值 例子： SAP(SUPERVISOR, SPECIALITY, POSTGRADUATE) POSTGRADUATE: 主码 (假设研究生不会重名) 不能取空值 规则说明： 实体完整性规则是针对基本关系而言的。一个基本表通常对应现实世界的一个实体集。 现实世界中的实体是可区分的，即它们具有某种唯一性标识 关系模型中以主码作为唯一标识 主码的属性即主属性不能取空值 主属性取空值，就说明存在某个不可标识的实体，即存在不可区分的实体，这与 2) 矛盾，因此这个规则称为实体完整性 # 参照完整性 # 关系间的引用 关系模型中实体与实体间的联系都是用关系来描述的，因此肯存在着关系与关系间的引用 例子： 学生 (学号，姓名，性别，专业号，年龄) #学号是主码 专业 (专业号，专业名) #专业号是主码 学生关系引用了 专业关系的主码 “专业号” 学生关系中的 “专业号” 值 必须是确实存在的 专业的专业号，即专业 关系中有该专业的记录 例 2：学生、课程、学生与课程之间多对多联系 学生 (学号，姓名，性别，专业号，年龄) 课程 (课程号，课程名，学分) 选修 (学号，课程号，成绩) 例 3：学生实体及其内部的一对多联系 “学号” 是主码，“班长” 是外码，它引用了本关系的 “学号” “班长” 必须是确实存在的学生的 学生的学号 # 外码 H2O Ks 设 F 是基本关系 R 的一个 or 一组属性，但不是关系 R 的码 如果 F 与基本关系 S 的主码 Ks 相对应，则称 F 是基本关系 R 的外码 基本关系 R 称为参照关系 (Referencing Relation) 基本关系 S 称为被参照关系 (Referenced Relation) or 目标关系 (Target Relation) 例 1： 学生关系的 专业号 与专业关系的主码 专业号 相对应 ” 专业号 “属性是学生关系的外码 # 参照完整性规则 # 用户定义の完整性 # 关系代数 # 传统的集合运算 # 并 (Union) # 差 (Difference) # 交 (Intersection) # 笛卡尔积 (Cartesian Product) # 专门的关系运算 # 选择 # 投影 # 连接 # 除 # 关系演算 # 小结","categories":[],"tags":[]},{"title":"ML","slug":"ML","date":"2022-10-30T12:14:35.000Z","updated":"2022-11-15T12:19:45.186Z","comments":true,"path":"2022/10/30/ML/","link":"","permalink":"http://rhymeet.github.io/2022/10/30/ML/","excerpt":"","text":"# CH_1 basic 什么是 ML? 机械式的复述 “举一反三” 是机器学习的目标 一旦机器具有了 “举一反三” 能力，就可以高效地替代人完成类似工作。 ML の发展 ML 诞生的标志是 1959 年 IBM 公司的计算机科学家 亚瑟・塞缪尔 编写的一个跳棋程序 近年来异常火热，在学术界得到特别重视，在产业界更是得到广泛应用，涉及到欺诈检测、客户定位、产品推荐、实时工业监控、自动驾驶、人脸识别、情感分析和医疗诊断等领域。 1950，马文・明斯 &amp; 邓恩・埃德蒙 建造了世界上第一台神经网络计算机 1956，约翰・麦卡锡提出了 “人工智能” 一词 # PCA_ # Step # 1. 对所有样本进行中心化： # 2. 计算样本协方差矩阵 # 3. 对协方差矩阵做特征值分解 # 4. 取最大的 m 个特征值所对应的单位特征向量 W1,W2,W3...Wn","categories":[{"name":"machine learning","slug":"machine-learning","permalink":"http://rhymeet.github.io/categories/machine-learning/"}],"tags":[]},{"title":"SQL","slug":"SQL","date":"2022-10-26T14:01:56.000Z","updated":"2022-11-03T05:41:13.680Z","comments":true,"path":"2022/10/26/SQL/","link":"","permalink":"http://rhymeet.github.io/2022/10/26/SQL/","excerpt":"","text":"# 第一章 # 1. 数据库系统概述 # 1. 四个基本概念 # 数据 Data 是数据库中存储的基本对象。 特点：数据与其语义是不可分的。 # 数据库 DB 是长期存储在计算机内、有组织的、可共享的 大量数据的集合。 基本特征：数据按一定的数据模型组织、描述和存储。 可为各种用户共享。 冗余度较小。 数据独立性较高。 易拓展。 # 数据库管理系统 DBMS 位于用户与操作系统之间的一层 数据管理软件。 是基础软件，是一个大型复杂的软件系统 用途：科学地组织和存储数据、高效地获取和维护数据 数据定义功能：提供数据定义语言 (DDL)。 定义数据库中的数据对象 数据组织、存储和管理： 分类组织、存储和管理各种数据 确定 组织数据的文件结构和存取方式 实现数据之间的联系 提供多种存取方法提高存取效率 数据操纵功能： 提供数据操纵语言 (DML) 实现对数据库的基本操作 (查询、插入、删除 and 修改) 数据库的事务管理和运行管理： 数据库在建立、运行和维护时由 DBMS 统一管理和控制 保证数据的安全性、完整性、多用户对数据的并发使用发生故障后的系统恢复。 数据库的建立和维护功能 (实用程序) 数据库初始数据装载转换 数据库转储 介质故障恢复 数据库 的重组织 性能监视分析 etc 其他功能： DBMS 与网络中其它软件系统的通信 两个 DBMS 系统的数据转换 异构数据库之间的互访和互操作 # 数据库系统 DBS 在计算机系统中引入数据库后的系统构成 数据库系统构成： 数据库 数据库管理系统 (及其开发工具) 应用系统 数据库管理员 # 2. 数据库系统的特点 数据结构化 数据的共享性高，冗余度低，易扩充 数据独立性高： 物理独立性 物理存储改变了，应用程序不改变 逻辑独立性 数据由 DBMS 统一管理和控制 数据独立性是由 DBMS 的二级映像功能来保证的 DBMS 提供的数据控制功能 (1). 数据的安全性保护 (2). 数据的完整性 (Integrity) 检查 (3). 并发 (Concurrency) 控制 (4). 数据库恢复 # 2. 数据模型 分两类，分属两个不同的层次 # 概念模型 (信息模型) 按 用户的观点 来对数据和信息建模，用于数据库设计。 现实世界中的客观对象抽象为概念模型 把概念模型转换为某一 DBMS 支持的数据模型 # 逻辑模型 and 物理模型 逻辑模型：主要包括网状模型、层次模型、关系模型、面向对象模型， 按计算机系统的观点对数据建模，用于 DBMS 实现 物理模型：对数据最底层的抽象，描述数据在系统内部的表示方式和存取方法，在磁盘或磁带上的存储方式和存取方法。 # 1. 数据模型的组成要素 # (1) 数据结构 # (2) 数据操作 查询 更新 (包括插入、删除、修改) # (3) 完整性约束条件 一组完整性规则的集合 完整性规则：给定的数据模型中数据及其联系所具有的制约和存储规则 用以限定符合数据模型的数据库状态以及状态的变化，以保证数据的正确、有效、相容。 完整定义： (1). 反应和规定本数据模型必须遵守的基本的通用的完整性约束条件。 eg：在关系模型中，任何关系必须满足 [实体完整性] 和 [参照完整性] 两个条件。 (2). 提供定义完整性约束条件的机制，以反映具体应用所涉及的数据必须遵守的特定的语义约束条件。 # 2. 概念模型 # 1. 信息世界中的基本概念 实体 (Entity)： 客观存在并可互相区别的事物。可以是 具体的人、事、物 or 抽象的概念 属性 (Attribute): 实体具有的某一特征。一个实体可由若干个属性来刻画。 码 (Key): 唯一标识实体的属性集。 域 (Domain): 属性的取值范围 实体型 (Entity Type): 用实体名及其属性名集合 来抽象和刻画同类实体 实体集 (Entity Set): 同一类型实体的集合 联系 (Relationship): 现实世界中事物内部以及事物之间的联系在信息世界中反映为实体内部的联系 and 实体之间的联系。 实体内部的联系通常是指组成实体的各属性之间的联系 实体之间的联系通常是指不同实体集之间的联系 # 2. 两个实体型之间的联系 # 3. 两个以上实体型之间的联系 # 4. 单个实体型内的联系 # 5. 概念模型的一种表示方法 E-R 图 # 6. 一个实例 # 3. 最常用的数据模型 # 1. 非关系模型 层次模型 (Hierarchical Model) 网状模型 (Network Model) # 2. 关系模型 (Relational Model) # 3. 面向对象模型 (Object Oriented Model) # 4. 对象关系模型 (Object Relational Model) # 4. 层次模型 是数据库系统中最早出现的 数据模型，典型代表：IBM 公司的 IMS (info Management System) 数据库管理系统；用树形结构来表示各类实体以及实体间的联系。 # 1. 层次模型的数据结构 满足 de 集合： 根节点 (有且只有一个结点 没有双亲结点) 根以外的其它结点有且只有一个双亲结点 术语：根节点，双亲结点，兄弟结点，叶结点 # 2. 多对多联系在层次模型中的表示 方法：多对多联系分解成一对多联系 分解方法： 冗余结点法 虚拟结点法 # 3. 层次模型的数据操纵与完整性约束 层次模型的数据操纵 查询 插入 删除 更新 层次模型的完整性约束条件 # 4. 层次模型的存储结构 邻接法： 按照树的前序遍历 ----&gt; 依次邻接存放，即通过物理空间的位置相邻来实现层次谁徐 链接法：(用来反映数据之间的层次关系) 子女 - 兄弟链接法： 层次序列链接法： # 5. 优缺点： 优点： 数据结构简单清晰 查询效率高，性能 优于关系模型，不低于 网状模型 提供了良好的完整性支持 缺点： 多对多联系表示不自然 对插入删除擦做限制多，引用程序的编写比较复杂 查询子女结点必须通过双亲结点 由结构严密，层次命令趋于程序化 # 5. 网状模型 # 6. 关系模型","categories":[{"name":"SQL","slug":"SQL","permalink":"http://rhymeet.github.io/categories/SQL/"}],"tags":[]},{"title":"Ch2_数据链路层","slug":"Ch2-数据链路层","date":"2022-10-16T13:51:34.000Z","updated":"2023-02-01T08:39:19.727Z","comments":true,"path":"2022/10/16/Ch2-数据链路层/","link":"","permalink":"http://rhymeet.github.io/2022/10/16/Ch2-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/","excerpt":"","text":"# 数据链路层 # 基本概念 结点：主机、路由器。 链路：网络中两个结点之间的物理通道，链路的传输介质主要有 - 双绞线、光纤 and 微波。分为 有线链路、无线链路。 数据链路：网络中两个结点之间的逻辑通道，把实现控制数据 传输协议的硬件和软件加到链路上 就构成数据链路。 桢：链路层的协议数据单元，封装网络层数据报。 数据链路层：负责通过一条链路 从一个结点向另一个物理链路直接相连的相邻结点 传送数据报。 功能概述：在物理层提供服务的基础上向 网络层提供服务，其最基本的服务是 将源自网络层来的数据可靠地传输到相邻结点的目标机网络层。 主要作用：加强物理层传输原始比特流的功能。将物理层提供的可能出错的物理连接改造成为 逻辑上无差错的数据链路，使之对网络层表现为一条无差错的链路。 **功能一**：为网络层提供服务。 有确认无连接服务，无确认无连接服务，有确认面向连接服务。！有连接一定有确认！ **功能二**：链路管理，即连接的建立、维持、释放。(用于面向连接服务) **功能三**：组帧。 **功能四**：流量控制。 **功能五**：差错控制(帧错/位错)。 # 封装成帧 &amp; 透明传输 # 封装成帧 封装成帧：在一段数据的前后部分添加首部和尾部，构成一个帧。 接收端在收到物理层 上交的比特流后，就能根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束。 首部和尾部包含许多的控制信息，重要作用 -- 帧定界 (确定帧的界限) 帧同步：接收方应当能从接收到的 二进制比特流中区分出 帧的起始和终止。 组帧四种方法：字符计数法、字符 (节) 填充法、零比特填充法、违法编码法。 # 透明传输 是指不管所传的数据是什么样的比特组合，都应当能在链路上传送。so，链路层就 &quot;看不见&quot; 有什么妨碍数据传输的东西。 当所传数据中的比特组合恰巧与某一个控制信息完全一样时，就必须采取适当的措施，使接收方不会将这样的数据误认为是某种控制信息。这样才能保证数据链路层的传输透明的。 # 字符计数法 # 字符 (节) 填充法 (字符填充的首位定界法) 方法是：发送端的数据链路层在数据中出现控制字符 “SOH” 或 “EOT” 的前面插入一个转义字符”ESC”。而在接收端的数据链路层在将数据送往网络层之前删除这个插入的转义字符。我们把这种方法叫做字节填充法。当然如果转义字符”ESC“也出现在数据当中，那么解决的方法仍然是在转义字符的前面插入一个转义字符，所以，当接受到连续的两个转义字符的时候，就去删除其中前面的一个 # 零比特填充法 由于使用 01111110（6 个 1）来标志一帧的开始和结束，故发送方只要在数据中遇到 5 个连续的 “1” 时，自动在其后插入一个 “0”；接收方每收到 5 个连续的 “1” 时，自动删除后面紧跟的 “0”，以恢复原信息。 保证了透明传输：在传送的比特流中可以传送任意比特组合，而不会引起对帧边界的判断错误。 # 违法编码发 曼彻斯特编码： 计算机传输数据时，用「电流」的高低来标识数据，「一高一低」的电流表示 1 ，「一低一高」的电流表示 0 。 违规编码法利用违规的电流来表示帧界定符，比如，用两个连续的高电流表示帧的开始，两个连续的底电流表示帧的结束 局域网中 IEEE 802 就采用了这种方法。 差分曼彻斯特编码： # 差错控制 (检错编码) 传输中的差错都是由于噪声引起的。 全局性：由于线路本身的电气特性所产生的随机噪声 (热噪声)，是信道固有的，随即存在的。 解决方法：提高信噪比来减少 or 避免干扰。(对传感器下手) 局部性：外界特性的短暂原因所造成的冲击噪声，是产生差错的主要原因。 解决方法：通常利用编码技术来解决。 链路层为网络层提供服务：无确认无连接服务、有确认无连接服务、有确认面向连接服务。 # 检错编码 # 奇偶校验 奇校验：这串序列 1 的个数如果为偶数则在前面加个 1，使 1 的个数变成奇数，否则加 0。 偶校验：这串序列 1 的个数如果为奇数则在前面加个 1，使 1 的个数变成偶数，否则加 0。 # 循环冗余码 CRC # 纠错编码 海明码！ 海明码学习前提 要点： 不要用异或套用公式！！！题目随便变几个变死你！ 看完这篇博客不要看别的博客！！！！别的人瞎写的坑死你 学习海明码之前，我们要约定 3 个原则： 海明码只能检测出 2 位错，纠 1 位错。 默认进行偶校验 (除说明用奇校验) 海明码是一串由 0 和 1 组成的序列 (除 01 外没有其他的值，记住了！这是重点) 如果下面有任何无法理解的问题，反复看上面三个原则，下面再也不赘述。 # 前提：奇偶校验 奇校验：这串序列 1 的个数如果为偶数则在前面加个 1，使 1 的个数变成奇数，否则加 0。 偶校验：这串序列 1 的个数如果为奇数则在前面加个 1，使 1 的个数变成偶数，否则加 0。 例子：1111 奇校验就是 11111 偶校验就是 01111 1110 奇校验就是 01110 偶校验就是 11110 特性是检测一位错，无法纠错。 # 概述：海明码的构成 例如如下序列： D = 1100 我们想要让其变成海明码只需如下操作 算出校验位数 k# 正常情况下我们需要如下此操作： 2^k &gt;= k + 数据位数 + 1 这里等于 3 确定校验位在海明码中的位置# 这里按 2^k 次幂留出来，就像 1，2，4，8，16，32。（如果问有 5 位等其他烦人的数据位怎么办后面我会说，先按 4 位数做） H7 H6 H5 H4 H3 H2 H1 1 1 0 0 分组（重点，很多人蒙圈就在此）# 我们需要确认 H1,H2,H4 这三个校验位都来校验哪些位置。 我们按这个规则进行分配。 将 1,2,4（海明码下标为 1,2,4）# 的二进制码写出来，并且最高位补到 3 位 (前面算的 K 数) 如下所示： 1 2 4 001 010 100 然后我们将 0 替换为 /*，作为通配表 1 2 4 **1 ·1· 1·· 我们将 1 到 7 的二进制序列，列出来如下表 7 6 5 4 3 2 1 111 110 101 100 011 010 001 ！！！重点！！！！# 我们将 7-&gt;1 依次与上面的通配表进行匹配 1 2 4 **1 ·1· 1·· 001(1) 010(2) 100(4) 011(3) 011(3) 101(5) 101(5) 110(6) 110(6) 111(7) 111(7) 111(7) 因此我们可以确定 H1 负责 1 3 5 7 位数的校验 H2 负责 2 3 6 7 位数的校验 H4 负责 4 5 6 7 位数的校验 求出校验位是 0 还是 1# 因为上面我们得出以下结论： H1 负责 1 3 5 7 位数的校验 H2 负责 2 3 6 7 位数的校验 H4 负责 4 5 6 7 位数的校验 偶校验 H3,H5,H7 1 的个数为奇数 因此 H1=1 H3,H6,H7 1 的个数为偶数 因此 H2=0 H5,H6,H7 1 的个数为偶数 因此 H4=0 H7 H6 H5 H4 H3 H2 H1 1 1 0 0 0 0 1 查错# 查错比较简单，如果以下三组 既 H1,H3,H5,H7 或者 H2,H3,H6,H7 或者 H4,H5,H6,H7 偶校验出错，则出错。 比方说 如果 H1,H3,H5,H7 由 1100 变成了 1110 （1 的个数为偶数）就是出错了 这里该不赘述 6. 纠错# 首先我们先理解以下为什么海明码能纠错。 首先我们先画个圆。然后按如下形式做交叉 如果这个位置出错了，那么一定是 1 3 7 5 这四个位置中的一个位置出错 (如果俩位出错则无法纠错，这个点一定要记住) 如果此时其他的俩个组 即：2，3，6，7 和 4，5，6，7 偶校验都通过了的话。 也就证明只可能是 1 出错 所以我们可以将 1 的位数 做修改。如果是 0 变为 1，如果是 1 变为。来达到纠错的目的。 但是如果 2，3，5，7 这个位置也出错了，4，5，6，7 这个位置没有出错。 我们很容易就推导出，是 3 这个位置出错了。 我们就可以修改 3 的值，如果是 0 变为 1 或者如果是 1 变为 0. 在此时我们会发现一个巧妙的规则！ 当我们把 1，3，5，7 设为 P1, 2,3,6,7 设为 P2 4,5,6,7 设为 P3 时 当如果哪组校验失败就为 1 转载：https://www.cnblogs.com/godoforange/p/12003676.html # 流量控制 数据链路层的流量控制是点对点的、传输层的流量控制是端到端。 数据链路层流量控制手段：接收方收不下就不回复确认。 传输层流量控制手段：接收端给发送端一个窗口公告。 可靠传输的基本概念： 比特差错 只是传输差错的一种 从整个计算机网络体系结构来看，传输差错还包括 分组丢失、分组失序 及 分组重复 分组丢失、分组失序 及 分组重复 这些传输差错，一般不会出现在 数据链路层，而会出现在其上层 可靠传输服务并不仅局限于数据链路层，其它各层均可选择实现可靠传输 可靠传输的实现比较复杂，开销也比较大，是否使用可靠传输取决于应用需求 数据链路层向上层提供的服务类型 不可靠传输服务：仅仅丢弃有误码的帧，其它啥也不干 可靠传输服务：想办法实现发送端发什么，接收端就收到什么 一般情况下，有线链路的误码率比较低，为了减小开销，并不要求数据链路层层向上提供可靠传输服务。即使出现了误码，可靠传输的问题由上层处理 # 停止等待协议 (SW) 信道利用率太低！ 为了让发送方能够判断所收到的 ACK 分组是否是重复的，需要给 ACK 分组编号，所用的比特数量与数据分组编号所用比特数一样。 数据链路层一般不会出现 ACK 分组迟到的情况，因此在数据链路层实现停止 - 等待协议可以不用给 ACK 分组编号。 为了让接受方能够判断所收到的数据分组是否是重复的，需要给数据分组编号，由 停止 - 等待协议的停等特性，只需一个比特编号。 ACK0 ACK1 超时计时器的重传时间：略大于 &quot;从发送方到接收方的平均往返时间&quot; 在数据链路层 点对点的往返时间比较确定，重传时间好确定 but 在运输层 由端到端往返时间非常不确定，设置合适的重传时间并不容易 # 后退 N 帧协议 (GBN) 是一种连续的 ARQ 协议 # 选择重传协议 (SR) if WR = 5 接收方无法分辨新旧数组 # 信道划分介质访问控制 6 7 媒体介入控制的基本概念： 共享信道要着重考虑的一个问题 - 如何协调多个发送站点和接受站点对一个 共享传输媒体的占用 MAC (Medium Access Control) # 传输数据适用的两种链路 # 点对点链路 两个相邻节点通过一个链路相连，没有第三者。 Application: PPP 协议、常用于广域网。 # 广播式链路 所有主机共享通信介质 Application: 早期的总线以太网、无线局域网，常用于局域网。 典型拓扑结构：总线型、星型 (逻辑总线型) # 介质访问控制 采取一定的措施，使得两对节点之间的通信不会发生干扰的情况 # 静态信道划分 - 信道划分介质访问控制 信道划分介质访问控制：将使用介质的每个设备与来自同一信道上的其他设备的通信隔离开，把时域和频域资源合理地分配给网络上的设备 # 频分多路复用 FDM 频分复用的所有用户在同样的时间占用不同的带宽 (频率带宽) 资源。 # 时分多路复用 TDM 时分复用帧 (TDM) 是在物理层传送的比特流所划分的帧、标志一个周期。 每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙、所有用户轮流占用信道。 g 改进的时分复用 -- 统计时分复用 STDM**（Statistical Time Division Multiplexing） STDM 帧不是固定分配时隙、而是按需动态分配时隙 https://www.bilibili.com/video/BV1EE41137HS/?spm_id_from=333.337.search-card.all.click&amp;vd_source=8b271cba7561f58edf4106db0df1cc5d # 波分多路复用 WDM (Wavelength Division Multiplexer) 光的频分多路复用 # 码分多路复用 CDM 2G 网络就是 CDMA 技术 可以让不同的用户在同样时间使用同样频率进行通信。 由于各用户使用经过特殊挑选的不同码型，因此各用户之间不会干扰。 CDM 的每一个用户可以在同样的时间使用同样的频带进行通信 CDMA 中、每一个比特时间在划分为 m 个短的间隔、称为码片 (chip).m 通常为 64 or 128 若叠加为（A+B+C）,A 收到并做内积得（A+B+C）*A, 由于 A 与 B 和 C 正交，所以（A+B+C）A=AA # 动态分配信道 轮询访问介质访问控制 令牌传递协议 随机访问介质访问控制 -&gt;4 # ALOHA 协议 pure ALOHA vulnerable Time = 2 * T slotted ALOHA G : 想要同时 transmit 的发送站数量 # CSMA 协议 1 - 坚持 CSMA 非坚持 CSMA p - 坚持 CSMA # CSMA/CD 协议 Carrier Sense Multiple Access/Collision Detection 载波监听多址接入 / 碰撞检测 MA 多址接入：多个站点连接在一条总线上，竞争使用总线。 CS 载波侦听： 每一个站点在发送帧之前先要检测一下总线上是否有有其它站点在发送帧 (&quot; 先听后说 &quot;)： 若检测到总线空闲 96 比特时间，则发送这个帧 若检测到总线忙，则继续检测并等待总线转为空闲 96 比特时间，然后发送这个帧。 CD 碰撞检测： 每一个正在发送帧的站 边发送边检测碰撞 (&quot; 边说边听 &quot;): 一旦发现总线上出现碰撞，立即停止发送，退避一段 随机时间后再次发送 (&quot;一旦冲突 立即停说 等待时机 重新再说&quot;) 关键标识符：て て：以太网单程端到端传播时延 2 て：以太网的端到端往返传播时延 or 争用期 or 碰撞窗口 争用期 Obeviously, 在以太网中发送帧的主机越多，端到端的传播时延越大，发生碰撞的几率越大。 因此，共享式以太网不能连接太多的主机，使用的总线也不能太长 10Mbps 以太网把争用期定为 512 比特发送时间，即 51.2 微秒，其总线长度不超过 5120m，but 考虑其它因素，信号衰减等，以太网规定总线长度不能超过 2500m 最小帧长 64 字节 512bit 最小帧长确保了主机可在帧发送完成之前就检测到该帧的发送过程中是否遭遇了碰撞 最大帧长 1588、1522 字节 截断二进制指数退避算法 16 次！ 信道利用率 帧发送流程 帧接受流程 Q 现在的以太网 不太有碰撞 不用 CSMA/CD # CSMA/CA 协议 Carrier Sense Multiple Access/Collision Avoidance 载波监听多址接入 / 碰撞避免 在无线局域网，仍然可以 使用载波侦听多址接入 CSMA, 即在发送帧之前先对传输媒体进行载波侦听 - 若发现有其他站在发送帧 就推迟发送以免发生碰撞 在无线局域网中，不能使用碰撞检测 CD： 由无线信道的传输条件特殊，其信号强度的动态范围非常大，无线网卡上接收到的信号往往比发送信号小得多。 如果要在无线网卡上实现碰撞检测 CD, 对硬件要求非常高 即使能够在硬件上实现无线局域网的碰撞检测功能，但由于无线电波的特殊性 (存在隐蔽站的问题) , 进行检测的意义也不大 # basic 802.11 无线局域网 使用 CSMA/CA 协议，在 CSMA 的基础上增加了一个碰撞避免 CA 功能，而不再实现碰撞检测功能。 由于不可能避免所有碰撞，并且无线信道误码率较高，802.11 标准还使用了数据链路层确认机制 (SW 停止 - 等待协议) 来保证数据被正确接收。 802.11 的 MAC 层标准定义了两种不同的媒体接入控制方式： 分布式协调功能 DCF (Distributed Coordination Function) 802.11 定义的默认方式 没有中心控制站点，每个站点使用 CSMA/CA 协议通过争用信道来获取发送权。 点协调功能 PCF (Point) 802.11 定义的可选方式，用の少 使用集中控制の接入算法 (一般在接入点 AP 实现集中控制) # 帧间间隔 IFS (InterFrame Space) 802.11 规定全部の站点必须在持续检测到信道空闲一段指定时间后才能发送帧 这段时间称为 帧间间隔 IFS IFS の长短取决于该站点要发送の帧的类型： 高优先级的帧需要等待の時間较短，因此可优先获得发送权； 低优先级的帧需要等待の時間较长， （若某个低优先级的帧没来得及发送，高优先级的帧已经发送到信道上，则信道变为忙状态，因而低优先级的帧只能推迟发送了。这样就减少了碰撞的机会） 常用的 2 种 IFS： 短帧间间隔 SIFS (28 微秒)： 最短的 IFS, 用来分隔开属于一次对话の各帧。 一个站点应当能够在这段时间内从发送方式切换到接收方式。 使用 SIFS 的帧类型有 ACK 帧、CTS 帧、由过长的 MAC 帧分片后的数据帧 所有回答 AP 探询的帧 and 在 PCF 方式中接入点 AP 发送出的任何帧。 DCF 帧间间隔 DIFS (128 微秒): 比 SIFS 长得多，在 DCF 方式中用来发送数据帧和管理帧。 # 工作原理 源站发送前检测到信道空闲后等待一段 DIFS ？ 考虑到可能有其它站 有高优先级的帧要发送。 若有，让 。 目的站正确接收数据帧后 还等待一段 SIFS ？ SISF 使最短的帧间间隔 用来分隔开属于一次对话的各帧。 这段时间，一个站点应当能够从发送方式切换到接收方式 当站点检测到信道空闲的，并且所发送的数据帧不是上一次发送完后 立即连续发送的数据帧，则不使用退避算法。 以下情况必须使用退避算法： 发送数据帧之前检测到信道处于忙状态 在每一次重传一个数据帧时 在每一次成功发送后 要连续发送下一帧时 (避免一个站点长时间占用信道) # 退避算法 # 信道预约 &amp; 虚拟载波侦听 源站发送数据帧之前发送一个短的控制帧 -&gt; 请求发送 RTS RTS (源地址、目的地址、这次通信 (包括 all ACK) 所需的持续时间) 允许发送 CTS(Clear to send) 包括这次通信所需时间 (copy 来的) RTS 帧 CTS 帧 很短 802.11 规定 3 种情况供用户选择： 使用 RTS 、CTS 帧 只有数据帧超过一定长度才 使用 RTS 、CTS 帧 不 使用 RTS 、CTS 帧 # SUM # MAC 地址、IP 地址、ARP 协议 [数据链路层] MAC 地址是以太网的 MAC 子层所使用的地址 [网际层] IP 地址是 TCP/IP 体系结构网际层所使用的地址； ARP 协议属于 TCP/IP 体系结构的网际层 作用是已知设备所分配到的 IP 地址，使用 ARP 协议可通过该 IP 地址获得到设备的 MAC 地址 # MAC 地址 使用点对点信道的数据链路层不需要使用地址 使用广播信道的数据链路层必须来区分各主机 # BASIC 一般情况下 用户主机会包含两个网络适配器：有线局域网适配器 (有线网卡) and 无线局域网适配器 (无线网卡)。 每个网络适配器都有一个全球唯一的 MAC 地址。 而交换机 &amp; 路由器往往拥有更多の网络接口，所以会拥有更多的 MAC 地址。 综上，严格说，MAC 地址是对网络上个接口的唯一标识，而不是对网络设备上的唯一标识。 # IEEE 802 局域网的 MAC 地址格式 s # EG # IP 地址 #IP 地址是因特网 (Internet) 上的主机和路由器所使用的标识，标识两部分信息： 网络编号：标识因特网上数以百万计的网络 主机编号：标识同一网络上的不同主机 (or 路由器各接口) # ARP 协议 主机 B の ARP 高速缓存表 动态：自动获取，生命周期默认为两分钟 静态：手工设置，不同操作系统下的生命周期不同 例如系统重启后不存在 or 系统重启后依然有效 # 集线器 &amp; 交换机 # 集线器 集线器 HUB 只工作在物理层，它的每个接口仅简单的转发比特，不进行碰撞检测 (由各站的网卡检测) 集线器一般都有少量的容错能力和网络管理功能。 (集线器能检测出网卡故障 并断开与故障网卡的连线 -&gt; 使整个以太网仍能正常工作) 使用集线器的以太网在逻辑上仍是一个总线网，各占共享总线资源，使用 CSMA/CD 协议 # 交换机 # 对比集线器和交换机 # 以太网交换机 # の自学习和转发帧的流程 收到帧后进行登记。等级内容为帧的源 MAC 地址及进入交换机的接口号 根据帧的目的 MAC 地址和交换机的帧交换表对帧进行转发，有 3 种情况： (1). 明确转发：交换机知道应当从哪个接口转发该帧 (单播、多播、广播) (2). 盲目转发：(泛洪) 不知道、除进入交换机的接口外的其它所有接口转发 (3). 明确丢弃：交换机知道不应该转发该帧，将其丢弃 以太网交换机工作在数据链路层 (也包括物理层) 以太网交换机收到帧后，在帧交换表中查找帧的目的 MAC 地址所对应的接口号，然后通过该接口转发帧。 以太网交换机是一种即插即用设备，刚上电启动时其内部的帧交换表是空的。 随着网络中各主机间的通信，以太网交换机通过自学习算法自动逐渐建立起帧交换表。 帧交换表的每条记录都有自己的有效时间，到期删除： (1). 交换机的接口改接了另一台主机 (2). 主机更换了网卡 # の生成树协议 STP Spanning Tree Protocol 可以在在增加冗余链路来提高网络可靠性的同时又避免网络环路带来的问题 # 虚拟局域网 VLAN Virtual Local Area Network 是一种将局域网内的设备划分成与物理位置无关的逻辑组的技术，这些逻辑组具有某些共同的需求。 # 概述 # 实现机制 # IEEE 802.1Q 帧 (Dot One Q 帧) 对以太网的 MAC 帧格式进行了拓展，插入 4 字节的 VLAN 标记 802.1Q 帧是由交换机来处理的，而不是用户主机来处理的 # 交换机的端口类型 有以下 3 种： Access Trunk Hybird 交换机各端口的缺省 VLAN ID: 在思科交换机上称 Native VLAN, 即本征 VLAN。 在华为交换机上称为 Port VLAN ID, 即端口 VLAN ID, 简记 PVID Access 端口 一般用于连接用户计算机 只能属于一个 VLAN Access 端口的 PVID 值与端口所属 VLAN 的 ID 相同 (默认 1) Access 端口接收处理方法： 一般只接受 “未打标签” 的普通以太网的 MAC 帧，根据接收端口的 PVID 值给帧 “打标签”, 即插入 4 字节 VLAN 标记字段，字段中的 VID 取值与端口的 PVID 取值相等。 Access 端口发送处理方法： 若帧中的 VID 与端口的 PVID 相等，则 &quot;去标签&quot; 并转发该帧； 否则不转发 Trunk 端口 一般用于交换机之间 or 交换机与路由器之间的互联 可以属于多个 VLAN 用户可以设置 Trunk 端口的 PVID 值。默认 1 Trunk 端口发送处理方法： 对 VID 等于 PVID 的帧，“去标签” 再转发； 对 VID 不等于 PVID 的帧，直接转发 Trunk 端口接收处理方法： 接收 “未打标签” 的帧，根据接收帧的端口的 PVID 给帧 “打标签”, 即插入 4 字节 VLAN 标记字段，字段中的 VID 取值与端口的 PVID 相同 接收 &quot;已打标签的帧&quot; Hybird 端口 既可用于交换机之间 or 交换机与路由器之间 (同 Trunk 端口) 又可用于交换机与用户计算机之间的互连 (同 Access 端口) Hybird 端口可以属于多个 VLAN (同 Trunk) 用户可以设置 Hybird 端口的 PVID 值。默认 1 (Trunk) Hybird 端口发送处理方法：(不同 Trunk) 查看帧的 VID 是否在端口的 &quot;去标签&quot; 列表中: 若存在，“去标签” 再转发； 若不存在，直接转发 Hybird 端口接收处理方法：(Trunk) 接收 “未打标签” 的帧，根据接收帧的端口的 PVID 给帧 “打标签”, 即插入 4 字节 VLAN 标记字段，字段中的 VID 取值与端口的 PVID 相同 接收 &quot;已打标签的帧&quot;","categories":[{"name":"计网","slug":"计网","permalink":"http://rhymeet.github.io/categories/%E8%AE%A1%E7%BD%91/"}],"tags":[]},{"title":"Ch1_物理层","slug":"Ch1-物理层","date":"2022-10-16T08:18:56.000Z","updated":"2023-02-01T08:39:30.753Z","comments":true,"path":"2022/10/16/Ch1-物理层/","link":"","permalink":"http://rhymeet.github.io/2022/10/16/Ch1-%E7%89%A9%E7%90%86%E5%B1%82/","excerpt":"","text":"# 基本概念 物理层考虑的是怎样才能在 连接各种计算机の传输媒体上 传输数据比特流。 物理层为数据链路层屏蔽了各种传输媒体の差异、使数据链路层只需考虑 如何完成本层の协议 &amp; 服务，而不必考虑网络具体的传输媒体是什么。 物理层协议の主要任务： 机械特性： 指明接口所用接线器的形状和尺寸，引脚数目和排列、固定和锁定装置。 电器特性： 指明在接口电缆の各条线上出现の电压的范围。 功能特性： 指明某条线上 出现的 某一电平 的电压 表示何种意义。 过程特性： 指明对于不同功能的 各种可能事件 的出现顺序。 # の传输媒体 # 导引型传输媒体 # 同轴电缆 贵、布线不灵活 不方便 基带同轴电缆 宽带同轴电缆 # 双绞线 绞合の作用： 抵御部分来自外界的电磁波干扰 减少相邻导线的电磁波干扰 # 光纤 优点： 通信容量大 (25000~30000GHz 的宽带) 传输损耗小、远距离传输时更加经济 抗雷电和电磁干扰 性能好。在大电流脉冲干扰的环境尤为重要 无串音干扰、保密性好、不易被窃听 体积小、重量轻 缺点： 割接需要专用设备 光电接口价格较贵 多模光纤：50 微米、62.5 微米 只适合近距离传输 (建筑物内) 单模光纤：9 微米 适合长距离传输且衰减小、制造成本高、对光源要求高 光在纤芯中传输の方式是不断地全反射 当光从高折射率的媒体射向低折射率的媒体时，其 折射角 &gt; 入射角； 因此、如果入射角足够大，就会出现全反射，即光碰到包层时 就会反射回纤芯 # 电力线 # 非导引型传输媒体 # 无线电波 # 微波 地面微波接力通信 卫星通信 # 红外线 点对点传输 直线传输 # 可见光 LiFi # 传输方式 # 串行传输 # 并行传输 # 同步传输 # 异步传输 # 单向通信 (单工) # 双向交替通信 (半双工) 对讲机 # 双向同时通信 (全双工) # 编码与调制 码元：在使用时间域的波形 表示数字信号时、代表不同离散数值的基本波形。 # 常用编码 # 不归零编码 # 归零编码 # 曼彻斯特编码 码元中间时刻跳变 表示：时钟、数据 # 差分曼彻斯特编码 码元中间时刻跳变 表示：时钟 码元开始处电平是否发生变化：数据 # 基本调制方法 # 混合调制 --- 正交振幅调制 QAM # 信道的极限容量 # 奈氏准则 在假定理想条件下、为了避免码间串扰、码元传输速率是有上限的。 理想低通信道の最高码元传输速率 = 2W Baud = 2W 理想带通信道の最高码元传输速率 = W Baud = W W 信道带宽 # 香农公式 # 例题：","categories":[{"name":"计网","slug":"计网","permalink":"http://rhymeet.github.io/categories/%E8%AE%A1%E7%BD%91/"}],"tags":[]},{"title":"Ch0_计网体系结构","slug":"Ch0-计网体系结构","date":"2022-10-16T01:48:28.000Z","updated":"2023-02-01T08:39:45.271Z","comments":true,"path":"2022/10/16/Ch0-计网体系结构/","link":"","permalink":"http://rhymeet.github.io/2022/10/16/Ch0-%E8%AE%A1%E7%BD%91%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/","excerpt":"","text":"# 计网体系结构 # 概念 计算机网络：是一个将分散的、具有独立功能的计算机系统，通过通信设备与线路连接起来，由功能完善的软件实现资源共享和信息传递的系统。 计算机网络是互连的、自治的计算机集合。 互连：通过通信链路互联互通。 自治：无主从关系。 # 功能 数据通信 资源共享 （可共享硬件、软件、数据 ） 分布式处理 （多台计算机各自承担同一工作任务的不同部分 Hadoop...） 可靠性 负载均衡 # 因特网发展阶段 ARPAnet 阿帕网 (无线分组交换网 &amp; 卫星通信网) -&gt; internet (1983 阿帕网接受 TCP/IP)(互联网) -&gt; Internet (因特网) 三级结构： 1985 年起 USA 国家科学基金会 NSF 围绕 6 个大型计算机中心建设计算机网络，即国家科学基金网 NSFNET 主干网： - 地区网： - 校园网 - 校园网 - 地区网： - 企业网 3. 多层次 ISP 结构： ISP：Internet service provider 若中国电信、 分为 主干 ISP、地区 ISP、本地 ISP・・ # 组成 &amp; 分类 # 性能指标 速率：即数据率 or 数据传输率 or 比特率。 连接在计算机网络上的主机在数字信道上传送数据位数的速率。 带宽：表示网络的通信线路传送数据的能力，通常指单位时间内从网络中的某一点到另外一点所能通过的 “最高数据率”。单位 “比特每秒” 原指某个信号具有的频带宽度，最高频率与最低频率只差，单位是赫兹（Hz） 吞吐量单位时间内通过某个网络 (or 信道、接口) 的数据量。 时延：指数据 (报文 / 分组 / 比特流) 从网络 (or 链路) 的一端传送到另一端所需的时间。也叫延迟 or 迟延。单位 S。 时延带宽积：传播时延 x 带宽 (某段链路现在有多少比特) 往返时间 RTT：包括往返传播时延 (传播时延 * 2) + 末端处理时间 利用率：信道利用率 网络利用率 # 专业术语 # 实体 任何可发送 or 接受信息的硬件 or 软件进程。 # 对等实体 收发双方相同层次中的实体 # 协议 控制两个对等实体进行逻辑通信的规则的集合 三要素 ： 语法、语义、同步 语法 ：定义所交换信息的格式 语义 ：定义收发双方所要完成的操作 同步 ：定义收发双方的时序关系 # 服务 在协议控制下，两个对等实体间的逻辑通信使得本层能够向上一层提供服务 要实现本层协议，还需要下面一层所提供的服务 协议是 &quot;水平的 horizontal&quot;, 服务是 &quot;垂直的 vertical&quot; 实体看得见相邻下层所提供的服务、但并不知道实现该服务的具体协议。也就是说，下面的协议对上面的是 “透明” 的。 # 服务访问点 在同一系统中相邻两层的实体交换信息的逻辑接口，用于区分不同的服务类型 数据链路层の服务访问点为帧の &quot;类型&quot; 字段。 网络层の服务访问点为 IP 数据报首部中の “协议字段” 运输层の服务访问点为 “端口号” # 服务原语 上层使用下层所提供の服务必须通过与下一层交换一些命令，这些命令称为服务原语 # 协议数据单元 PDU 对等层次之间传送の数据包 为该层的协议数据单元 PDU # 服务数据单元 SDU 同一系统内，层与层之间交换的数据包称为服务数据单元 # 多个 SDU 可以合为一个 PDU 一个 SDU 也可划分为几个 PDU","categories":[{"name":"计网","slug":"计网","permalink":"http://rhymeet.github.io/categories/%E8%AE%A1%E7%BD%91/"}],"tags":[]},{"title":"OS(一)","slug":"OS-1","date":"2022-10-09T10:30:19.745Z","updated":"2022-11-03T09:14:37.264Z","comments":true,"path":"2022/10/09/OS-1/","link":"","permalink":"http://rhymeet.github.io/2022/10/09/OS-1/","excerpt":"","text":"","categories":[{"name":"OS","slug":"OS","permalink":"http://rhymeet.github.io/categories/OS/"}],"tags":[]},{"title":"markdown","slug":"java-basic","date":"2022-09-21T14:14:48.000Z","updated":"2022-11-27T13:48:15.144Z","comments":true,"path":"2022/09/21/java-basic/","link":"","permalink":"http://rhymeet.github.io/2022/09/21/java-basic/","excerpt":"","text":"#标题一 の ## 标题二 ### 标题三 #### 标题四 这是加粗 这是斜体 这是横线 无序列表 无序列表 1. 有序序列 1 2. 有序序列 2 内嵌代码 代码块 引用 吾生也有涯，而知也无涯 &lt;!-- 有序列表 --&gt; 凯瑟琳 海瑟薇 亚瑟。皮特 &lt;!-- 无序列表 --&gt; APPLE PEACH lemon &lt;!-- 加粗 --&gt; 微信：帕克 &lt;!-- 斜体 --&gt; 微信：帕克 &lt;!-- 删除线 --&gt; 微信：帕克 # &lt;u&gt; 微信：帕克 &lt;/u&gt; 微信：帕克 # 个人博客： b 站 上标 H2O 下标 H2O &lt;!-- 高亮 --&gt; == 微信：帕克 == 未完成任务 公众号： 个人博客： 已完成任务 知乎： CSDN： 左对齐 平台 链接 公众号 jjjl 居中对齐 平台 链接 公众号 hh 就 行间公式 x1+x2=0x_1+x_2=0x1​+x2​=0 独立公式块 x2+y2=0x^2+y^2=0 x2+y2=0 链接 汲汲雨 图片 Syntax Description Header Title Paragraph Text title: 第 1 周 计算 date: 2020/04/12 20:46:25 categories: [计算机科学，Java, 零基础学 Java 语言 - 浙江大学 - 翁恺] tags: :::note info 以下为个人学习笔记和习题整理 课程：零基础学 Java 语言 - 浙江大学 - 翁恺 @ 中国大学 MOOC https://www.icourse163.org/course/ZJU-1001541001 ::: # 课堂笔记 # 读输入、字符串输出 scannerimport java.util.Scanner;...Scanner in = new Scanner(System.in);// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。System.out.println(in.nextLine());// 让 in 这个对象做读入下一行的动作，结果交给 System.out 这个对象去打印一行。// 字符串的 + 用来连接两个字符串形成更长的字符串。System.out.println(\"Hello\" + \" world.\");System.out.println(\"Hello\" + 2);System.out.println(\"Hello\" + 2 + 3);System.out.println(2 + 3 + \"Hello\");tips： System.out.println 会换行， System.out.print 则不会换行 出现警告： Resource leak: 'in' is never closed ，可以在函数的最后加入 in.close();// 释放# 变量 形式：&lt;类型名称&gt; &lt; 变量名称 &gt; = &lt; 初始值 &gt; int price, amount; // 同时定义两个变量 int price = 0; // 定义变量并赋值 int price, amount = 100, age; 类型名称：Java 是一种强类型语言，所有变量在使用前必须定义或声明，所有变量必须具有确定的数据类型。数据类型表示在变量中可以存放什么样的数据，程序运行过程中也不能改变变量的类型。 变量名称：又称标识符，只能由字母、数字、下划线构成，数字不能出现在第一个位置。此外，Java 的保留字也不能用作标识符。 Java 的保留字列表 abstract do implements protected throws boolean double import public transient break else instanceof return true byte extends int short try case false interface static while catch final long strictfp void char finally native super volatile class float new switch const* for null synchronized continue goto* package this default if private throw 以下哪些标识符是符合规则的？ currency lastName fireplace _last_name xingmin class goto 4ever time-machine Int $12 我是变量 # 常量 final final int AMOUNT = 100;//final 是一个修饰符，表示这个变量的值一旦初始化，就不能再修改了。# 变量类型 # 整数 int int price = in.nextInt(); 如果用户输入的不是整数，则会报错 java.util.InputMismatchException 。 程序要求读入多个数字时，可以在一行输入，中间用空格分开，也可以多行输入。 每次召唤 in.nextInt() ，它就等待用户输入一个整数。 两个整数的运算结果只能是整数。 在 Java 中， 10 和 10.0 是完全不同的数。 # 浮点数 double 浮点数运算有误差：由于二进制的自身限制，浮点计算需要将十进制先转换为二进制，然后对二进制数进行计算，因此导致误差。 System.out.println(1.2-1.1);// 结果为 0.09999999999999987 整数类型不能表达有小数部分的数；整数运算速度快，占内存小；日常中整数运算多。 # 赋值运算 # 强制类型转换 浮点数和整数放在一起运算时，Java 会将整数转换成浮点数，然后进行浮点数运算。 强制性转换的优先级高于四则运算。 double a = 1.0;double b = 2.0;int i = (int)a/b; // 会报错int i = (int)(a/b); // 不会报错# 运算符优先级 单目运算符 + - 优先级最高 结合关系一般自左向右，单目 + - 和赋值 = 自右向左。 result = a = b = 3 + c;result = 2;result = (result = result * 2) * 6 * (result = 3 + result);# 复合赋值 5 个算术运算符， + - * / % ，可以和赋值运算符 = 结合起来，形成复合赋值运算。注意，两个运算符中间不要有空格。 total += (sum+100)/2;total = total + (sum+100)/2;total * = sum+12;total = total*(sum+12);total /= 12+6;total = total / (12+6); 递增递减运算符 ++ -- ，给变量 + 1 或 - 1 前缀后缀： a = 14;t1 = a++; //t1 先被赋值为 a 即 14， a 自加到 15t2 = ++a; //a 先自加到 15，t2 被赋值为 a 即 15# 编程题 # 题目 1. 温度转换（5 分） 题目内容 写一个将华氏温度转换成摄氏温度的程序，转换的公式是： °F = (9/5)*°C + 32 其中 C 表示摄氏温度，F 表示华氏温度。 程序的输入是一个整数，表示华氏温度。输出对应的摄氏温度，也是一个整数。 提示，为了把计算结果的浮点数转换成整数，需要使用下面的表达式： (int)x; 其中 x 是要转换的那个浮点数。 注意：除了题目要求的输出，不能输出任何其他内容，比如输入时的提示，输出时的说明等等都不能。这道题目要求转换后的数字，程序就只能输出这个数字，除此之外任何内容都不能输出。 输入格式 一个整数。 输出格式 一个整数。 输入样例 100 输出样例 37 # 解题代码 import java.util.Scanner;public class Main &#123; public static void main(String[] args) &#123; Scanner in = new Scanner(System.in); // 获得输入的整数 int fahrenheit = in.nextInt(); // 计算摄氏度 double centigrade = (fahrenheit - 32) / (9 / 5.0); // 将浮点数转换为整数输出 System.out.println((int)centigrade); &#125;&#125;","categories":[{"name":"JAVA","slug":"JAVA","permalink":"http://rhymeet.github.io/categories/JAVA/"}],"tags":[{"name":"basic","slug":"basic","permalink":"http://rhymeet.github.io/tags/basic/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-09-14T11:16:45.558Z","updated":"2022-11-09T10:43:46.987Z","comments":true,"path":"2022/09/14/hello-world/","link":"","permalink":"http://rhymeet.github.io/2022/09/14/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. # Quick Start # Create a new post h$ hexo new \"My New Post\"More info: Writing # Run server h$ hexo serverMore info: Server # Generate static files h$ hexo generateMore info: Generating # Deploy to remote sites h$ hexo deployMore info: Deployment H2O 210","categories":[],"tags":[]}],"categories":[{"name":"计网","slug":"计网","permalink":"http://rhymeet.github.io/categories/%E8%AE%A1%E7%BD%91/"},{"name":"Math","slug":"Math","permalink":"http://rhymeet.github.io/categories/Math/"},{"name":"LEET","slug":"LEET","permalink":"http://rhymeet.github.io/categories/LEET/"},{"name":"English","slug":"English","permalink":"http://rhymeet.github.io/categories/English/"},{"name":"OS","slug":"OS","permalink":"http://rhymeet.github.io/categories/OS/"},{"name":"machine learning","slug":"machine-learning","permalink":"http://rhymeet.github.io/categories/machine-learning/"},{"name":"SQL","slug":"SQL","permalink":"http://rhymeet.github.io/categories/SQL/"},{"name":"JAVA","slug":"JAVA","permalink":"http://rhymeet.github.io/categories/JAVA/"}],"tags":[{"name":"Music","slug":"Music","permalink":"http://rhymeet.github.io/tags/Music/"},{"name":"Life","slug":"Life","permalink":"http://rhymeet.github.io/tags/Life/"},{"name":"basic","slug":"basic","permalink":"http://rhymeet.github.io/tags/basic/"}]}