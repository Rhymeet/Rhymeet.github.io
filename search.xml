<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CET6</title>
      <link href="/2022/11/09/CET6/"/>
      <url>/2022/11/09/CET6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>relate_words</title>
      <link href="/2022/11/09/relate-words/"/>
      <url>/2022/11/09/relate-words/</url>
      
        <content type="html"><![CDATA[<h1 id="semaphore-ˈseməˌfôr"><a class="anchor" href="#semaphore-ˈseməˌfôr">#</a> semaphore /ˈseməˌfôr/</h1><p>名词：信号，旗语，臂板信号，信号机<br /> binary semaphore 二进制信号量</p><h1 id="simultaneously-同时地"><a class="anchor" href="#simultaneously-同时地">#</a> simultaneously 同时地</h1><h1 id="exclusive-独有的-专用的-排外的-排斥的"><a class="anchor" href="#exclusive-独有的-专用的-排外的-排斥的">#</a> exclusive   独有的、专用的、排外的、排斥的</h1><h1 id="synchronization-同步"><a class="anchor" href="#synchronization-同步">#</a> synchronization 同步</h1><h1 id="mutel-exclusion-within-the-monitor"><a class="anchor" href="#mutel-exclusion-within-the-monitor">#</a> mutel exclusion within the monitor</h1><p>监视器内的互斥排除</p><h1 id="monitor-管程"><a class="anchor" href="#monitor-管程">#</a> monitor 管程</h1>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OS(三)内存管理</title>
      <link href="/2022/11/09/OS-%E4%B8%89-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/2022/11/09/OS-%E4%B8%89-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Kmeans</title>
      <link href="/2022/11/07/Kmeans/"/>
      <url>/2022/11/07/Kmeans/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VIF</title>
      <link href="/2022/11/07/VIF/"/>
      <url>/2022/11/07/VIF/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>4_mul_linerRegression</title>
      <link href="/2022/11/07/4-mul-linerRegression/"/>
      <url>/2022/11/07/4-mul-linerRegression/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>OS(二)进程与线程</title>
      <link href="/2022/11/03/OS-%E4%BA%8C-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
      <url>/2022/11/03/OS-%E4%BA%8C-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="进程の状态与转换"><a class="anchor" href="#进程の状态与转换">#</a> 进程の状态与转换</h1><p><a href="https://imgse.com/i/xqnoIe"><img data-src="https://s1.ax1x.com/2022/11/03/xqnoIe.png" alt="xqnoIe.png" /></a></p><h2 id="状态"><a class="anchor" href="#状态">#</a> 状态</h2><h3 id="创建态-就绪态"><a class="anchor" href="#创建态-就绪态">#</a> 创建态、就绪态</h3><blockquote><p>进程正在被创建时，它的状态是 “<strong>创建态</strong>”，在这个阶段操作系统会为进程 分配资源，初始化 PCB</p></blockquote><blockquote><p>当进程创建完成后，便进入 “<strong>就绪态</strong>”，处于就绪态の进程已经具备运行条件，但由于没有空闲の CPU，就暂时不能运行</p></blockquote><h3 id="运行态"><a class="anchor" href="#运行态">#</a> 运行态</h3><blockquote><p>如果一个进程此时在 CPU 上运行，那么这个进程称处于 “<strong>运行态</strong>”<br />CPU 会执行该进程对应の程序 (执行指令序列)<br /><a href="https://imgse.com/i/xqQHTf"><img data-src="https://s1.ax1x.com/2022/11/03/xqQHTf.png" alt="xqQHTf.png" /></a></p></blockquote><h3 id="阻塞态"><a class="anchor" href="#阻塞态">#</a> 阻塞态</h3><blockquote><p>在进程运行过程中，可能会请求等待某个事件的发生 (如等待某种系统资源の分配 or 等待其他进程的响应)<br /> 让这个进程下 CPU ，并让它进入 &quot;<strong> 阻塞态</strong> &quot;<br /> 当 CPU 空闲时，又会选择另一个 “<em>就绪态</em>” 进程上 CPU 运行</p></blockquote><h3 id="终止态"><a class="anchor" href="#终止态">#</a> 终止态</h3><blockquote><p>该进程可执行 exit 系统调用，请求操作系统终止该进程<br />此时该进程会进入 “<strong>终止态</strong>”，操作系统会让该进程下 CPU 并回收内存空间等资源，最后还要回收该进程的 PCB。<br />当终止进程的工作完成后，这个进程彻底消失了</p></blockquote><h2 id="状态间の转换"><a class="anchor" href="#状态间の转换">#</a> 状态间の转换</h2><p><a href="https://imgse.com/i/xq1cGD"><img data-src="https://s1.ax1x.com/2022/11/03/xq1cGD.png" alt="xq1cGD.png" /></a></p><p>进程 PCB 中，会有一个变量 state 来表示进程的当前状态</p><h2 id="进程的组织方式"><a class="anchor" href="#进程的组织方式">#</a> 进程的组织方式</h2><p><a href="https://imgse.com/i/xq3KJO"><img data-src="https://s1.ax1x.com/2022/11/03/xq3KJO.png" alt="xq3KJO.png" /></a></p><h1 id="进程控制"><a class="anchor" href="#进程控制">#</a> 进程控制</h1><p><a href="https://imgse.com/i/xqzXmn"><img data-src="https://s1.ax1x.com/2022/11/04/xqzXmn.md.png" alt="xqzXmn.md.png" /></a></p><h2 id="基本概念"><a class="anchor" href="#基本概念">#</a> 基本概念</h2><ul><li><p>WHAT：<br />进程控制的主要功能是对系统中所有进程 实施有效的管理，具有创建新进程、策划小已有新进程、实现进程状态转换等功能</p><p>实现进程状态的转换</p></li><li><p>如何实现：用<strong>原语</strong>实现<br />原语 是一种特殊的程序，它的执行具有原子性。<br /><a href="https://imgse.com/i/xqaPKO"><img data-src="https://s1.ax1x.com/2022/11/03/xqaPKO.png" alt="xqaPKO.png" /></a><br /><a href="https://imgse.com/i/xqa8aj"><img data-src="https://s1.ax1x.com/2022/11/03/xqa8aj.png" alt="xqa8aj.png" /></a><br /><a href="https://imgse.com/i/xqaNR0"><img data-src="https://s1.ax1x.com/2022/11/03/xqaNR0.png" alt="xqaNR0.png" /></a></p></li></ul><h2 id="进程控制相关的原语"><a class="anchor" href="#进程控制相关的原语">#</a> 进程控制相关的原语</h2><p>Tip：无论哪个进程控制原语，要做的就三件事</p><ol><li><p>更新 PCB 中信息 (修改进程状态 state)  保存 / 恢复运行环境</p><ul><li>所有的进程控制原语一定都会会修改进程状态标志</li><li>录夺当前运行进程的 CPU 使用权 必然需保存其运行环境</li><li>某些进程开始运行前必然要恢复其运行环境</li></ul></li><li><p>将 PCB 插入合适的队列</p></li><li><p>分配 / 回收资源</p></li></ol><h3 id="进程的创建"><a class="anchor" href="#进程的创建">#</a> 进程的创建</h3><p><a href="https://imgse.com/i/xLSek6"><img data-src="https://s1.ax1x.com/2022/11/04/xLSek6.md.png" alt="xLSek6.md.png" /></a></p><h3 id="进程的终止"><a class="anchor" href="#进程的终止">#</a> 进程的终止</h3><p><a href="https://imgse.com/i/xLSVTx"><img data-src="https://s1.ax1x.com/2022/11/04/xLSVTx.md.png" alt="xLSVTx.md.png" /></a></p><h3 id="进程的阻塞"><a class="anchor" href="#进程的阻塞">#</a> 进程的阻塞</h3><h3 id="进程的唤醒"><a class="anchor" href="#进程的唤醒">#</a> 进程的唤醒</h3><p><a href="https://imgse.com/i/xLSmtK"><img data-src="https://s1.ax1x.com/2022/11/04/xLSmtK.md.png" alt="xLSmtK.md.png" /></a></p><h3 id="进程的切换"><a class="anchor" href="#进程的切换">#</a> 进程的切换</h3><p><a href="https://imgse.com/i/xLSE01"><img data-src="https://s1.ax1x.com/2022/11/04/xLSE01.md.png" alt="xLSE01.md.png" /></a></p><h1 id="进程通信ipc"><a class="anchor" href="#进程通信ipc">#</a> 进程通信 (IPC)</h1><p>Inter-process Communication 两个进程之间产生 数据交互<br />进程 是分配系统资源的单位 (include 内存地址空间)，因此各进程拥有的<strong>内存地址空间相互独立</strong><br />为保证安全，一个进程不能直接访问另一个进程的地址空间</p><h2 id="共享存储"><a class="anchor" href="#共享存储">#</a> 共享存储</h2><p>为避免出错，各个进程对共享空间的<strong>访问</strong>应该是<strong>互斥</strong>的<br />各个进程可使用 OS 内核提供的同步互斥工具 (PV 操作)</p><ol><li>基于数据结构的共享<br />比如共享空间里只能放一个长度为 10 的数组。这种通信方式速度慢、限制多、是一种<strong>低级通信</strong>方式</li><li>基于存储区的共享<br /> OS 在内存中划出一块共享存储区，数据的形式、存放位置都由通讯进程控制，而不是 OS。这种共享方式速度很快，是一种<strong>高级通讯</strong>方式</li></ol><h2 id="消息传递"><a class="anchor" href="#消息传递">#</a> 消息传递</h2><p>进程间的数据交换以格式化的消息 (Message) 为单位<br />进程通过 OS 提供的 “发送消息 / 接收消息” 两个<strong>原语</strong>进行数据交换</p><ol><li>直接通信方式<br />消息发送进程要指明 接收进程的 ID<br /><a href="https://imgse.com/i/xL7pIH"><img data-src="https://s1.ax1x.com/2022/11/04/xL7pIH.png" alt="xL7pIH.png" /></a></li><li>间接通信方式<br />通过 “信箱” 作为中间实体进行消息传递<br /><a href="https://imgse.com/i/xLTfMV"><img data-src="https://s1.ax1x.com/2022/11/04/xLTfMV.png" alt="xLTfMV.png" /></a></li></ol><h2 id="管道通信"><a class="anchor" href="#管道通信">#</a> 管道通信</h2><blockquote><p><strong>管道</strong>是一个特殊的共享文件，又名 pipe 文件。其实就是在内存中开辟一个大小固定的内存缓冲区<br />写进程往管道写数据，即使管道没被写满，只要管道没空，读进程就可以从管道中读数据<br />都进程从管道中读数据，即使管道没被读空，只要管道没满，写进程就可以往管道中写数据</p></blockquote><ol><li>管道只能采用<strong>半双工通信</strong>，某一时间段内只能实现单向的传输。如果要实现<strong>双向同时通信</strong>，则需要设置两个管道</li><li>各进程要<strong>互斥</strong>地访问管道 (由操作系统实现)</li><li>当管道<strong>写满</strong>时，<strong>写进程将阻塞</strong>，直到都进程将 管道中的数据取走，即可唤醒写进程</li><li>当管道<strong>读空</strong>时，<strong>读进程将阻塞</strong>，直到写进程往 管道中写入数据，即可唤醒读进程</li><li>管道中的数据一旦被读出，就彻底消失。<br />SO，当多个进程读同一个管道时，可能会错乱。对此，通常有两种解决方案：</li></ol><ul><li><strong>一个管道允许多个写进程，一个读进程</strong> (14 年官方答案)</li><li>允许<strong>有多个写进程，多个读进程</strong>，但系统会让各个读进程轮流从管道中读数据 (Linux の方案)</li></ul><h1 id="线程概念-多线程模型"><a class="anchor" href="#线程概念-多线程模型">#</a> 线程概念、多线程模型</h1><p><a href="https://imgse.com/i/xXRPxO"><img data-src="https://s1.ax1x.com/2022/11/06/xXRPxO.png" alt="xXRPxO.png" /></a><br /><a href="https://imgse.com/i/xL7LkQ"><img data-src="https://s1.ax1x.com/2022/11/04/xL7LkQ.png" alt="xL7LkQ.png" /></a><br /><a href="https://imgse.com/i/xLLhE8"><img data-src="https://s1.ax1x.com/2022/11/04/xLLhE8.png" alt="xLLhE8.png" /></a><br /> 可以把线程理解为 “轻量级进程”<br /><strong> 线程是一个基本的 CPU 执行单元</strong>，也是程序执行流的最小单位。<br />引入线程之后，不仅是进程之间可以并发，进程内的各线程之间也可以并发，从而进一步提升了系统的并发度，使得一个进程内使得一个进程内也可以并发处理各种任务 (如 tim 视频、文字聊天、传文件)</p><p>引入线程后，进程只作为除 COU 之外的系统资源的分配单元 (如 打印机、内存地址空间等 都是分配给进程的)</p><p>线程则作为<strong>处理机的分配单元</strong></p><h2 id="变化"><a class="anchor" href="#变化">#</a> 变化</h2><ol><li>资源分配、调度<ul><li>传统进程机制中，进程是 资源分配、调度的基本单位</li><li>引入线程后，进程是资源分配的基本单位，线程是调度的基本单位</li></ul></li><li>并发性<ul><li>传统进程机制中，只能进程之间并发</li><li>引入线程后，各线程间也能并发，进程间也并发，提高了并发度</li></ul></li><li>系统开销<ul><li>传统进程间并发，需要切换进程的运行环境，系统开销很大</li><li>线程间并发，如果是同一进程内的线程切换，则不需要切换进程环境，系统开销小</li><li>引入线程后，并发所带来的系统开销小</li></ul></li></ol><h2 id="属性"><a class="anchor" href="#属性">#</a> 属性</h2><ol><li>线程是处理机调度的单位</li><li>多 CPU 计算机中，各个线程可占用不同的 CPU</li><li>每个线程都有一个线程 ID 、线程控制块 (TCB)</li><li>线程也有 就绪、阻塞、运行 三种基本状态</li><li>线程几乎不拥有系统资源</li><li>同一进程の 不同线程间共享 进程の资源</li><li>由于共享内存地址空间，同一进程中の线程间通信甚至无需系统干预</li><li>同一进程间の线程切换 不会引起进程切换</li><li><strong>不同进程中の线程切换 会引起进程切换</strong></li><li>切换同进程内の线程，系统开销很小</li><li>切换进程，系统开销很大</li></ol><h1 id="线程的实现方式-多线程模型"><a class="anchor" href="#线程的实现方式-多线程模型">#</a> 线程的实现方式 &amp; 多线程模型</h1><h2 id="线程的实现方式"><a class="anchor" href="#线程的实现方式">#</a> 线程的实现方式</h2><h3 id="用户级线程"><a class="anchor" href="#用户级线程">#</a> 用户级线程</h3><p><a href="https://imgse.com/i/xOSRzD"><img data-src="https://s1.ax1x.com/2022/11/04/xOSRzD.png" alt="xOSRzD.png" /></a></p><ol><li>用户级线程由应用程序通过<strong>线程库</strong>实现，所有的<strong>线程管理工作</strong>都由应用程序负责 (包括 线程切换)</li><li>用户级线程中，<strong>线程切换</strong>可以在<strong>用户态下</strong>即可完成，无需操作系统干预</li><li>在用户看来，是由多个线程。但是在操作系统内核看来，并 意识不到线程の存在。<br />“用户级线程” 就是 “从用户视角能看到の线程”</li><li>优缺点：<ul><li>优点：用户级线程の切换 在用户空间即可完成，不需要切换到核心态，线程管理の系统开销小，效率高。</li><li>缺点：当一个用户级线程被阻塞后，整个进程都会被阻塞，并发度不高。 多个线程不可在多核处理机上并行运行。</li></ul></li></ol><h3 id="内核级线程"><a class="anchor" href="#内核级线程">#</a> 内核级线程</h3><p><a href="https://imgse.com/i/xOS4Ld"><img data-src="https://s1.ax1x.com/2022/11/04/xOS4Ld.png" alt="xOS4Ld.png" /></a></p><ol><li>内核级线程の管理工作由<strong>操作系统内核</strong>完成</li><li>线程调度、切换等工作都由内核负责，so 内核级线程の切换必然需要在<strong>核心态</strong>下才能完成</li><li>操作系统 会为每个 内核级线程建立相应的 TCB (Thread control Block 线程控制块)，通过 TCB 对线程进行管理。“内核级线程” 就是 “从操作系统内核视角看 能看得到的线程”</li><li>优缺点：<ul><li>优点：当一个线程被阻塞后，别的线程还可以继续执行，并发能力强。 多线程可在多核处理机上并发执行。</li><li>缺点：一个用户会占用多个内核级线程，线程切换由 OS 内核完成，需要切换到核心态，so 线程管理の成本高，开销大。</li></ul></li></ol><h2 id="多线程模型"><a class="anchor" href="#多线程模型">#</a> 多线程模型</h2><p>在支持内核级线程的系统中，根据用户级线程 and 内核级线程 の映射关系，可以划分为几种多线程模型</p><h3 id="一对一模型"><a class="anchor" href="#一对一模型">#</a> 一对一模型</h3><p><a href="https://imgse.com/i/xO9cvD"><img data-src="https://s1.ax1x.com/2022/11/04/xO9cvD.png" alt="xO9cvD.png" /></a><br /> 一个用户级线程 映射到 一个内核级线程。每个用户进程有与 用户级线程同数量の内核级线程</p><ul><li>优点：</li></ul><h3 id="多对一模型"><a class="anchor" href="#多对一模型">#</a> 多对一模型</h3><p><a href="https://imgse.com/i/xO9oPP"><img data-src="https://s1.ax1x.com/2022/11/04/xO9oPP.png" alt="xO9oPP.png" /></a></p><h3 id="多对多模型"><a class="anchor" href="#多对多模型">#</a> 多对多模型</h3><p><a href="https://imgse.com/i/xO9LrQ"><img data-src="https://s1.ax1x.com/2022/11/04/xO9LrQ.png" alt="xO9LrQ.png" /></a></p><p><a href="https://imgse.com/i/xOCSP0"><img data-src="https://s1.ax1x.com/2022/11/04/xOCSP0.png" alt="xOCSP0.png" /></a></p><h1 id="线程的状态与转换"><a class="anchor" href="#线程的状态与转换">#</a> 线程的状态与转换</h1><h2 id="状态与转换"><a class="anchor" href="#状态与转换">#</a> 状态与转换</h2><p><a href="https://imgse.com/i/xO2PLd"><img data-src="https://s1.ax1x.com/2022/11/05/xO2PLd.png" alt="xO2PLd.png" /></a></p><h2 id="组织与控制"><a class="anchor" href="#组织与控制">#</a> 组织与控制</h2><p><a href="https://imgse.com/i/xORd9f"><img data-src="https://s1.ax1x.com/2022/11/05/xORd9f.png" alt="xORd9f.png" /></a></p><h1 id="调度算法"><a class="anchor" href="#调度算法">#</a> 调度算法</h1><blockquote><p>Tips 作业调度 or 进程调度？ 抢占式 or 非抢占式？ 优缺点？<strong>是否导致饥饿？</strong></p></blockquote><h2 id="先来先服务fcfs"><a class="anchor" href="#先来先服务fcfs">#</a> 先来先服务 (FCFS)</h2><p><a href="https://imgse.com/i/xXMEfU"><img data-src="https://s1.ax1x.com/2022/11/05/xXMEfU.png" alt="xXMEfU.png" /></a></p><h2 id="短作业优先sjf"><a class="anchor" href="#短作业优先sjf">#</a> 短作业优先 (SJF)</h2><p><a href="https://imgse.com/i/xXMkkV"><img data-src="https://s1.ax1x.com/2022/11/05/xXMkkV.png" alt="xXMkkV.png" /></a><br /><a href="https://imgse.com/i/xXMZpF"><img data-src="https://s1.ax1x.com/2022/11/05/xXMZpF.png" alt="xXMZpF.png" /></a></p><h2 id="高响应比优先hrrn"><a class="anchor" href="#高响应比优先hrrn">#</a> 高响应比优先 (HRRN)</h2><p><a href="https://imgse.com/i/xXMAYT"><img data-src="https://s1.ax1x.com/2022/11/05/xXMAYT.png" alt="xXMAYT.png" /></a></p><p>！ 😂</p><table><thead><tr><th>算法</th><th>可抢占？</th><th>优点</th><th>缺点</th><th>考虑等待时间、运行时间</th><th>饥饿？   (某进程长期得不到服务)</th></tr></thead><tbody><tr><td>FCFS</td><td>非抢占式</td><td>公平；实现简单</td><td>对短作业不利、长作业有利</td><td>等待时间</td><td>不会</td></tr><tr><td>SJF/SPF</td><td>默认非抢占式 SJF/SPF  、抢占式 SRTN</td><td>拥有最短の平均等待时间、平均周转时间</td><td>对长作业不利、可能导致饥饿；难以做到真正の短作业优先</td><td>运行时间</td><td>会</td></tr><tr><td>HRRN</td><td>非抢占式</td><td>FCFS &amp; SJF の折中</td><td>😵</td><td>综合考虑等待时间、运行时间</td><td>不会</td></tr></tbody></table><blockquote><p>SJF/SPF 可用于 <strong>作业</strong>调度 job、<strong>进程</strong>调度 process   作业 / 进程の运行是由用户提供的，并不一定真实，不一定能做到真正的短作业优先<br /> S Remaining Time Next<br /><a href="https://imgse.com/i/xXQyUx"><img data-src="https://s1.ax1x.com/2022/11/05/xXQyUx.png" alt="xXQyUx.png" /></a></p></blockquote><h1 id="调度の层次-概念"><a class="anchor" href="#调度の层次-概念">#</a> 调度の层次、概念</h1><blockquote><p>作业：一个具体の任务<br />用户向系统提交一个作业～用户让 OS 启动一个程序 (来处理一个具体の任务)<br /> 挂起： 内存不够时，可将某些进程の数据调出外存。等 内存空闲 or 进程需要 运行时再重新调入内存。<br />暂时调到外存等待の进程状态 为 <strong>挂起状态</strong>。被挂起的进程 PCB 会被组织成<strong>挂起队列</strong>。<br />挂起态可分为：就绪挂起、阻塞挂起。<br />有的 OS 会把 就绪挂起、阻塞挂起 分为两个挂起队列，甚至会根据阻塞原因不同再把 阻塞挂起进一步细分为多个队列<br /><a href="https://imgse.com/i/xXfwb4"><img data-src="https://s1.ax1x.com/2022/11/06/xXfwb4.png" alt="xXfwb4.png" /></a></p></blockquote><h2 id="三个层次"><a class="anchor" href="#三个层次">#</a> 三个层次</h2><p><a href="https://imgse.com/i/xXhniR"><img data-src="https://s1.ax1x.com/2022/11/06/xXhniR.png" alt="xXhniR.png" /></a></p><ol><li><p>高级调度 (作业调度):<br /><strong> 外存 ---&gt; 内存</strong><br /><strong>按照某种规则，从后备队列中选择合适の作业将其调入内存，并为其创建进程。</strong><br />按一定的原则从 外存の作业后备队列中挑选一个作业 调入内存，并创建进程。 每个作业值调入一次，调出一次。 作业调入时 会创建 PCB，调出时 才撤销 PCB。</p></li><li><p>低级调度 (进程调度 / 处理机调度)：<br /><strong>内存 ---&gt;CPU</strong><br /><strong> 按照某种规则，从就绪队列中选择一个进程为其分配处理机。</strong><br />按照某种策略 从就绪队列中选取 一个进程，将处理机分配给它。<br />是 OS 中<strong>最基本の一种调度</strong>，在一般の OS 中都必须配置 进程调度。<br />进程调度の 频率很高，一般几十毫秒一次</p></li><li><p>中级调度 (内存调度)：<br /><strong>外存 ---&gt; 内存</strong><br /><strong>按照某种规则，从挂起队列中选择合适的进程 将其数据调回内存</strong><br />按照某种策略决定将哪个处于挂起状态の进程重新调入内存。<br />一个进程可能会被 多次调出、调入内存，因此<strong>中极调度</strong> 发生の频率要比高级调度更高。</p></li></ol><h1 id="进程互斥の软件实现方法"><a class="anchor" href="#进程互斥の软件实现方法">#</a> 进程互斥の软件实现方法</h1><h2 id="单标志法"><a class="anchor" href="#单标志法">#</a> 单标志法</h2><p>算法思想：两个进程在<em>访问完临界区后</em>会把使用临界区の权限 转交给另一个进程。<br />=<strong> 每个进程进入临界区の权限只能由另一个进程赋予</strong><br /> “同一时刻最多只允许一个进程访问临界区”</p><blockquote><p>未遵循 “空闲让进”<br /><a href="https://imgse.com/i/xXvRQe"><img data-src="https://s1.ax1x.com/2022/11/06/xXvRQe.png" alt="xXvRQe.png" /></a></p></blockquote><h2 id="双标志先检查"><a class="anchor" href="#双标志先检查">#</a> 双标志先检查</h2><blockquote><p>未遵循 “忙则等待”  (p0,p1 搞不好同时访问临界区)<br /><a href="https://imgse.com/i/xXvfLd"><img data-src="https://s1.ax1x.com/2022/11/06/xXvfLd.png" alt="xXvfLd.png" /></a></p></blockquote><h2 id="双标志后检查"><a class="anchor" href="#双标志后检查">#</a> 双标志后检查</h2><blockquote><p>未遵循 “空闲让进 、 有限等待” ，可能导致饥饿<br /><a href="https://imgse.com/i/xXvWsH"><img data-src="https://s1.ax1x.com/2022/11/06/xXvWsH.png" alt="xXvWsH.png" /></a></p></blockquote><h2 id="peterson算法"><a class="anchor" href="#peterson算法">#</a> Peterson 算法</h2><blockquote><p>遵循了 空闲让近、忙则等待、有限等待 三个原则，but 依未遵循 让权等待 原则<br /><a href="https://imgse.com/i/xXxj1O"><img data-src="https://s1.ax1x.com/2022/11/06/xXxj1O.png" alt="xXxj1O.png" /></a></p></blockquote><h1 id="进程互斥の硬件实现方法"><a class="anchor" href="#进程互斥の硬件实现方法">#</a> 进程互斥の硬件实现方法</h1><h2 id="中断屏蔽方法"><a class="anchor" href="#中断屏蔽方法">#</a> 中断屏蔽方法</h2><p>利用 “开 / 关中断指令” 实现 (与原语的实现思想相同，即 在某进程开始访问临近区到结束访问为止都不允许被中断，也就不能发生进程切换， 因此也不能发生两个同时 访问临界区的情况)</p><hr /><p>关中断；<br />临界区；<br />开中断；</p><hr /><p>优点：简单、高效<br />缺点：不适用于 多处理机；只适用于<strong>操作系统</strong>内核进程，不适用于 用户进程 (因为 开 / 关 中断指令只能运行在内核态， 这组指令如果能让用户随意使用会很危险)</p><h2 id="testandset指令"><a class="anchor" href="#testandset指令">#</a> TestAndSet 指令</h2><p>简称 TS、TSL 指令<br /> TSL 是用硬件实现的，执行过程中不允许被中断，只能一气呵成。<br />优点：适用于多处理机环境 实现简单、无需像软件方法严格检查是否有漏洞<br />缺点：不满足”<strong> 让权等待</strong> “原则，暂时无法进入临界区の进程会占用 CPU 并循环执行 TSL 指令，从而导致 “忙等”<br /><a href="https://imgse.com/i/xjQBmd"><img data-src="https://s1.ax1x.com/2022/11/06/xjQBmd.png" alt="xjQBmd.png" /></a></p><h2 id="swap指令"><a class="anchor" href="#swap指令">#</a> Swap 指令</h2><p>简称 Exchange XCHG 指令<br /> Swap 指令<strong>是用硬件实现の</strong>，执行过程中不允许被中断，只能一气呵成。<br />优点：适用于多处理机环境 实现简单、无需像软件方法严格检查是否有漏洞<br />缺点：不满足”<strong> 让权等待</strong> “原则，暂时无法进入临界区の进程会占用 CPU 并循环执行 TSL 指令，从而导致 “忙等”<br /><a href="https://imgse.com/i/xjlK4P"><img data-src="https://s1.ax1x.com/2022/11/06/xjlK4P.png" alt="xjlK4P.png" /></a></p><h1 id="互斥锁"><a class="anchor" href="#互斥锁">#</a> 互斥锁</h1><p>解决临界区最简单工具の就是<strong>互斥锁 (mutex lock)</strong> . 一个进程在进入临界区时应获得锁；在退出临界区时释放锁。 函数 acquire () 获得🔒，release () 释放🔒。<br />每个互斥锁有一个布尔变量 availabel, 表示🔒是否可用。</p><p>如果🔒是可用の，调用 acquire () 会成功，且🔒不再可用。当一个进程试图获取不可用的🔒时，会被阻塞，直到🔒被释放。</p><pre><code>  acquire()     while(!available)&#123;        ；                         //忙等待     available = false;            //获得锁     &#125;     release()&#123;     available = true;             //释放锁  &#125;</code></pre><p>acquire () 和 release () 的执行必须是原子操作，因此互斥锁通常采用硬件机制来实现。</p><p>互斥锁の主要缺点是<strong>忙等待</strong>，当有一个进程在临界区，任何其他进程在进入临界区时必须连续循环调用 acquire ()<br /> 当多个进程共享同一 CPU 时，就浪费了 CPU の生命周期。<br />因此，互斥锁 通常用于多处理系统，一个线程可以在一个处理器上等待，不影响其他线程の执行。</p><p>需要连续循环忙等的互斥锁，都可称为<strong>自旋锁 (spin lock)</strong>, 如 TSL、swap、单标志法</p><p>特性：</p><ul><li>需忙等，进程时间片用完才下 处理机，违反 “让权等待”</li><li>优点：等待期间不用切换上下文，多处理系统中，若上锁の时间短，则等待代价很低</li><li>常用于多处理系统，一个核忙等，其他核正常工作，并快速释放临界区</li><li>不太适用于单处理机系统，忙等の过程中不可能照常工作<br /><a href="https://imgse.com/i/xj8qa9"><img data-src="https://s1.ax1x.com/2022/11/06/xj8qa9.png" alt="xj8qa9.png" /></a></li></ul><h1 id="信号量机制"><a class="anchor" href="#信号量机制">#</a> 信号量机制</h1><p>1965，荷兰科学家 Dijkstra 提出の实现 “进程互斥、同步の方法”-- 信号量机制<br />用户进程可以通过使用 OS 提供の<strong>一对原语</strong>来对信号量进行操作，实现了进程互斥、进程同步。</p><p><strong>每个信号量至少记录 2 个信息：信号量的值 and 等待该信号量的进程队列 (queue PCB)</strong></p><p>(类 PASCAL 语言来描述)<br />semaphore = record<br />value: integer;<br />queue: ^PCB;<br />end;<br /> 其中 PCB 是进程控制块，是操作系统为每个进程建立的数据结构。</p><p><strong>信号量</strong>其实就是一个变量，一个信号量可 <strong>表示系统中某种资源の数量</strong>，如：系统中只有一台打印机，就可以设置一个处置为 1 的信号量。</p><p><strong>原语</strong>是一种特殊的程序段，其执行只能一气呵成，不可被中断。原语是由<strong>关中断 / 开中断指令</strong>实现的。</p><p><strong>一对原语</strong>：wait (S) 原语 &amp; signal (S) 原语，原语可理解为自己写的函数，<strong>信号量 S</strong> 为函数调用时传入の参数。</p><p>wait、signal 原语常<strong>简称为 P、V 操作</strong>。平时常写为 P (S)、V (S)</p><h2 id="整型信号量"><a class="anchor" href="#整型信号量">#</a> 整型信号量</h2><p>用一个<strong>整数型变量</strong>作为信号量，用来表示系统中某种资源的数量。<br />与普通整数信号量の区别：对信号量的操作只有三种：初始化、P 操作、V 操作</p><pre><code>  Eg：某计算机系统有一台打印机  int S = 1;         //初始化整形信号量，表示打印机资源个数  void wait(int S)&#123;          //wait原语，相当于“ 进入区”     while( S &lt;=0 );     S = S - 1;  &#125;  void signal(int S)&#123;           //signal原语，相当于“ 退出区”     S = S + 1;  &#125;</code></pre><p>进程 pi<br />...<br />wait (s);          // 进入区，申请资源<br />使用资源...        // 临界区，访问资源<br /> signal (s);        // 退出区，释放资源<br />...</p><h2 id="记录型信号量"><a class="anchor" href="#记录型信号量">#</a> 记录型信号量</h2><p>整型信号量缺陷 存在 “忙等” 问题，-&gt;, 记录型 数据结构表示の<strong>信号量</strong>。</p><blockquote><p>信号量 value&gt;0，value 表示可用资源的数量；value&lt;0，value 表示因该类资源阻塞的进程数量。<br />// 记录型信号量の定义<br /> typedef struct {<br />int value;              // 剩余资源数<br /> struct process *L;      // 等待队列<br />} semaphore;</p></blockquote><pre><code>  void wait( semaphore S)&#123;     S.value--;     if(S.value &lt; 0)&#123;        block(S.L);  //如果剩余资源数不够，使用block原语使进程 运行态-&gt;阻塞态，并把挂到信号量S的等待(阻塞)队列中     &#125;  &#125;  void singal( semaphore S)&#123;     S.value++;     if(S.value &lt;= 0)&#123;        wakeup(S.L);  //释放资源后，若还有别的进程在等待这个资源，则使用wakeuo原语唤醒等待队列中的一个进程，该进程从 阻塞态-&gt;就绪态     &#125;  &#125;</code></pre><p>P 操作 S.value &lt;0 该类资源已分配完毕，因此进程应调用 block 原语进行自我阻塞，主动放弃处理机，并插入该类资源的等待队列 S.L 中。可见，该机制遵循了 &quot;让权等待&quot; 原则，不会出现 “忙等” 现象。</p><h2 id="二进制信号量binary-semaphore"><a class="anchor" href="#二进制信号量binary-semaphore">#</a> 二进制信号量 (Binary Semaphore)</h2><p>只允许信号量取 0 or 1 值</p><h1 id="用信号量机制实现进程-互斥-同步-前驱关系"><a class="anchor" href="#用信号量机制实现进程-互斥-同步-前驱关系">#</a> 用信号量机制实现进程 互斥、同步、前驱关系</h1><p><strong>一个信号量对应一种资源</strong><br />信号量的值 = 这种资源的剩余数量 (信号量值 &lt; 0, 说明此时有进程在等待这种资源)<br /> P (S)-- 申请一个资源 S，若资源不够就阻塞等待<br /> V (S)-- 释放一个资源 S，若有进程在等待这个资源，则唤醒一个进程</p><h2 id="进程互斥"><a class="anchor" href="#进程互斥">#</a> 进程互斥</h2><p>basic：信号量 mutex 表示 “进入临界区的名额”</p><ol><li>分析并发进程的关键活动，划定临界区</li><li>设置<strong>互斥信号量</strong> mutex,<strong> 初值为 1</strong></li><li>在进入区 P (mutex)-- 申请资源</li><li>在退出区 V (mutex)-- 释放资源</li></ol><p>注意：对<strong>不同的临界资源</strong>需要<strong>设置不同的互斥信号量</strong><br />缺少 P (mutex) 就不能保证临界资源的互斥访问<br />缺少 V (mutex) 会导致资源永不被释放，等待进程永不被唤醒</p><pre><code>  //记录型信号量の定义  typedef struct&#123;     int value;              //剩余资源数     struct process *L;      //等待队列  &#125;semaphore;  //信号量机制实现互斥  semaphore mutex = 1;  P1()&#123;     ...     P(mutex);               //使用临界资源要加锁     临界区代码段...     V(mutex);               //解锁     ...  &#125;  P2()&#123;     ...     P(mutex);     临界区代码段...     V(mutex);     ...  &#125;</code></pre><h2 id="进程同步"><a class="anchor" href="#进程同步">#</a> 进程同步</h2><blockquote><p>要让各并发进程 按要求有序地推进</p></blockquote><ol><li>分析什么地方需要实现 “同步关系”，即必须保证 “一前一后” 执行的两个操作 (or 代码)</li><li>设置同步信号量 S，初值为 0</li><li>在 “前操作” 之后执行 V (S)</li><li>在 “后操作” 之前执行 P (S)<br /><a href="https://imgse.com/i/xzKBOe"><img data-src="https://s1.ax1x.com/2022/11/08/xzKBOe.png" alt="xzKBOe.png" /></a></li></ol><h2 id="进程前驱关系"><a class="anchor" href="#进程前驱关系">#</a> 进程前驱关系</h2><ol><li>要为每一对前驱关系各设置一个同步信号量</li><li>在 “前操作” 之后对相应的同步信号量执行 V 操作</li><li>在 “后操作” 之前对相应的同步信号两执行 P 操作</li></ol><p><a href="https://imgse.com/i/xzKgYt"><img data-src="https://s1.ax1x.com/2022/11/08/xzKgYt.png" alt="xzKgYt.png" /></a></p><h1 id="生产者消费者问题"><a class="anchor" href="#生产者消费者问题">#</a> 生产者消费者问题</h1><p><a href="https://imgse.com/i/zS5lhF"><img data-src="https://s1.ax1x.com/2022/11/09/zS5lhF.png" alt="zS5lhF.png" /></a></p><h1 id="多生产者-多消费者"><a class="anchor" href="#多生产者-多消费者">#</a> 多生产者 - 多消费者</h1><h1 id="吸烟者问题"><a class="anchor" href="#吸烟者问题">#</a> 吸烟者问题</h1><h1 id="读者写者问题"><a class="anchor" href="#读者写者问题">#</a> 读者写者问题</h1><p>mutex (1):a semaphore which is used to ensure mutual exclusion when <em>readcount</em> is updated i.e. when any reader enters or exits from the critical section.<br /> 一个信号量，用于在 <em>readcount</em> 更新时确保互斥，即当任何阅读器进入或退出临界区时。</p><p>readcount (0): an integer variable that keeps track of <strong>how many processes are currently reading the object</strong>.<br /> 跟踪<strong>当前有多少进程正在读取对象</strong></p><p>wrt (1):a semaphore common to both reder and writer process.<br /><a href="https://imgse.com/i/zSoLfU"><img data-src="https://s1.ax1x.com/2022/11/09/zSoLfU.png" alt="zSoLfU.png" /></a></p><p><a href="https://imgse.com/i/zSTbDA"><img data-src="https://s1.ax1x.com/2022/11/09/zSTbDA.png" alt="zSTbDA.png" /></a><br /><a href="https://imgse.com/i/zSTHud"><img data-src="https://s1.ax1x.com/2022/11/09/zSTHud.png" alt="zSTHud.png" /></a></p><h1 id="哲学家进餐问题"><a class="anchor" href="#哲学家进餐问题">#</a> 哲学家进餐问题</h1><p><a href="https://imgse.com/i/zFzAk6"><img data-src="https://s1.ax1x.com/2022/11/13/zFzAk6.jpg" alt="zFzAk6.jpg" /></a><br />Declare condition self[5];<br />Allows philosopher i to delay when he is hungery but is unable to obtain chopsticks needed.</p><h1 id="管程"><a class="anchor" href="#管程">#</a> 管程</h1><h2 id="引入管程原因"><a class="anchor" href="#引入管程原因">#</a> 引入管程原因</h2><p>解决信号量机制存在的问题：编写程序困难、易出错<br />一种机制，让程序员写程序时不需再关注复杂的 PV 操作<br /> 1973 年，Brinch Hansen 首次再程序设计语言 (Pascal) 中引入 “管程” 成分 -- 一种高级同步机制</p><h2 id="管程的定义和基本特征"><a class="anchor" href="#管程的定义和基本特征">#</a> 管程的定义和基本特征</h2><p>管程是一种特殊的软件模块，有这些部分组成：</p><ol><li>局部于管程的 共享数据结构说明</li><li>对该数据结构进行操作的一组过程</li><li>对局部于管程的共享数据设置初始值的语句</li><li>管程有一个名字</li></ol><h2 id=""><a class="anchor" href="#">#</a> </h2><h1 id="死锁的概念"><a class="anchor" href="#死锁的概念">#</a> 死锁的概念</h1><p>哲学家问题中，if 5 个哲学家都拿起了走手边的筷子。</p><ul><li>每个人都占有资源，同时又在等待另一个人手里的资源</li><li>在并发环境下，各进程因竞争资源而造成的一种<em>互相等待对方手里的资源，导致各进程都阻塞，都无法向前推进</em>的现象</li></ul><h2 id="死锁-饥饿-死循环"><a class="anchor" href="#死锁-饥饿-死循环">#</a> 死锁、饥饿、死循环</h2><ol><li>死锁：一定是 “循环等待对方手里的资源” 导致的，因此如果有死锁现象，那么<strong>至少有两个 or 两个以上的进程同时发生死锁</strong>.<br /> 发生死锁的进程一定处于<strong>阻塞态</strong>。</li><li>饥饿：<strong>可能只有一个进程发生饥饿</strong>。可能是<strong>阻塞态</strong> or<strong> 就绪态</strong>、(长期得不到需要的 I/O 设备、长期得不到处理机)</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL(二) 关系数据库</title>
      <link href="/2022/11/02/SQL-%E4%BA%8C-%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2022/11/02/SQL-%E4%BA%8C-%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>简介：提出关系模型的是美国 IBM 公司的 E.F.Codd</p><ul><li>1970 年提出关系数据模型</li><li>after , 提出了<strong>关系代数</strong> and<strong> 关系演算</strong>的概念</li><li>1972 提出了关系的 第一、第二、第三范式</li><li>1974 提出了关系的 BC 范式</li></ul><h1 id="关系数据结构及形式化定义"><a class="anchor" href="#关系数据结构及形式化定义">#</a> 关系数据结构及形式化定义</h1><h2 id="关系"><a class="anchor" href="#关系">#</a> 关系</h2><pre><code>关系 ：单一的数据结构 。 现实世界的实体 及 实体间的各种联系均用关系来表示。二维表 ： 逻辑结构。     从用户角度，关系模型中的数据结构 是一张二维表。建立在集合代数的基础上。</code></pre><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>域 (Domain)</td><td>一组具有相同数据类型的集合</td></tr><tr><td>笛卡尔积 (Cartesian Product)</td><td>所有域所有取值的一个组合 ；不能重复</td></tr><tr><td>关系 (Relation)</td><td></td></tr></tbody></table><h3 id="域domain"><a class="anchor" href="#域domain">#</a> 域 (Domain)</h3><h4 id="一组具有相同数据类型的集合"><a class="anchor" href="#一组具有相同数据类型的集合">#</a> 一组具有相同数据类型的集合</h4><h3 id="笛卡尔积cartesian-product"><a class="anchor" href="#笛卡尔积cartesian-product">#</a> 笛卡尔积 (Cartesian Product)</h3><pre><code>from itertools import productfor x,y,z in product(['a','b','c'],['d','e','f'],['m','n']):    print(x,y,z)  </code></pre><p><a href="https://imgse.com/i/xHqMAH"><img data-src="https://s1.ax1x.com/2022/11/02/xHqMAH.png" alt="xHqMAH.png" /></a></p><ul><li>元组 (Tuple)<br /><a href="https://imgse.com/i/xHLS2t"><img data-src="https://s1.ax1x.com/2022/11/02/xHLS2t.png" alt="xHLS2t.png" /></a><ul><li>笛卡尔积中每一元素 (d1,d2,...,dn) 叫做一个 n 元组 (n-tuple) or 简称元组</li><li>(张青梅，计算机专业，李勇)</li></ul></li><li>分量 (Component)<ul><li>笛卡尔积元素 (d1,d2,...,dn) 中的每一个值 di 叫做一个分量。</li><li>张青梅、计算机专业、...</li></ul></li><li>基数 (Cardinal number)<ul><li><a href="https://imgse.com/i/xHLXLT"><img data-src="https://s1.ax1x.com/2022/11/02/xHLXLT.png" alt="xHLXLT.png" /></a></li></ul></li><li>笛卡尔积的表示方法<ul><li>可 一个二维表</li><li>每行对应一个元组，每列对应一个域</li><li><a href="https://imgse.com/i/xHOGm8"><img data-src="https://s1.ax1x.com/2022/11/02/xHOGm8.png" alt="xHOGm8.png" /></a></li></ul></li></ul><h3 id="关系relation"><a class="anchor" href="#关系relation">#</a> 关系 (Relation)</h3><h4 id="关系-2"><a class="anchor" href="#关系-2">#</a> 关系</h4><p><a href="https://imgse.com/i/xHO0lq"><img data-src="https://s1.ax1x.com/2022/11/02/xHO0lq.png" alt="xHO0lq.png" /></a></p><h4 id="元组"><a class="anchor" href="#元组">#</a> 元组</h4><p>关系中的每个元素是关系中的元组，通常用<strong> t</strong> 表示。</p><h4 id="单元关系-与-二元关系"><a class="anchor" href="#单元关系-与-二元关系">#</a> 单元关系 与 二元关系</h4><ul><li>n=1, 单元关系 (Unary relation) or 一元关系</li><li>n=2, 二元关系 (Binary relation)</li></ul><h4 id="关系的表示"><a class="anchor" href="#关系的表示">#</a> 关系的表示</h4><p>关系也是一个二维表，每行对应一个元组，每列对用一个域<br /><a href="https://imgse.com/i/xHOonK"><img data-src="https://s1.ax1x.com/2022/11/02/xHOonK.png" alt="xHOonK.png" /></a></p><h4 id="属性"><a class="anchor" href="#属性">#</a> 属性</h4><ul><li>关系中不同列可对应相同的域</li><li>为区分，必须对每列起一个名字，成为属性</li><li>n 目关系必有 n 个属性</li></ul><h4 id="码"><a class="anchor" href="#码">#</a> 码</h4><ul><li><p>候选码 (Candidate Key)</p><ul><li>若关系中的某一属性组的值能唯一地标识一个元组，则称<strong>该属性组</strong>为候选码</li><li>简单的情况：候选码只包含一个属性</li></ul></li><li><p>全码 (All-key)</p><ul><li>最极端的情况：关系模式中的所有属性组是这个关系模式的候选码，成为全码。</li></ul></li><li><p>主码</p><ul><li>若一个关系有多个候选码，则选定其中一个为主码 (Primary key)</li></ul></li><li><p>主属性</p><ul><li>候选码的诸属性成为<strong>主属性</strong> (Prime attribute)</li><li>不包含任何候选码的属性成为非主属性 (None-Prime attribute) or 非码属性</li><li><a href="https://imgse.com/i/xHXMEF"><img data-src="https://s1.ax1x.com/2022/11/02/xHXMEF.md.png" alt="xHXMEF.md.png" /></a></li></ul></li></ul><h4 id="三类关系"><a class="anchor" href="#三类关系">#</a> 三类关系</h4><ul><li><strong>基本关系</strong> (基本表 or 基表): 实际存在的表，是实际存储数据的逻辑表示。</li><li><strong>查询表</strong>：查询结果对应的表。</li><li><strong>视图表</strong>：是虚表，由基本表 or 其他试图表导出的表，不对应实际存储的数据。</li></ul><h4 id="基本关系的性质"><a class="anchor" href="#基本关系的性质">#</a> 基本关系的性质</h4><ul><li>列是同质的 (Homogeneous)</li><li>不同的列可出自同一个域</li><li>其中的每一列称为一个属性</li><li>不同的属性要给予不同的属性名</li><li>列的顺序无所谓，列的次序可任意交换。</li><li>行的顺序无所谓，行的次序可以任意交换。</li><li><strong>任意两个元组的候选码不能相同</strong></li><li>分量必须取原子值（most basic）<ul><li><a href="https://imgse.com/i/xHXqbT"><img data-src="https://s1.ax1x.com/2022/11/02/xHXqbT.png" alt="xHXqbT.png" /></a></li></ul></li></ul><h2 id="关系模式"><a class="anchor" href="#关系模式">#</a> 关系模式</h2><h3 id="what-关系模式"><a class="anchor" href="#what-关系模式">#</a> What 关系模式</h3><ul><li>关系模式 Relation Schema 是型</li><li>关系是值</li><li>关系模式是对关系的描述<ul><li>元组集合的结构</li><li>属性构成</li><li>属性来自的域</li><li>属性与域之间的映象关系</li></ul></li></ul><h3 id="定义-关系模式"><a class="anchor" href="#定义-关系模式">#</a> 定义 关系模式</h3><ul><li><a href="https://imgse.com/i/xHjroF"><img data-src="https://s1.ax1x.com/2022/11/02/xHjroF.png" alt="xHjroF.png" /></a></li><li><a href="https://imgse.com/i/xHjyi4"><img data-src="https://s1.ax1x.com/2022/11/02/xHjyi4.png" alt="xHjyi4.png" /></a></li><li><a href="https://imgse.com/i/xHjgzR"><img data-src="https://s1.ax1x.com/2022/11/02/xHjgzR.png" alt="xHjgzR.png" /></a></li></ul><h3 id="关系模式与关系"><a class="anchor" href="#关系模式与关系">#</a> 关系模式与关系</h3><ul><li><p>关系模式：</p><ul><li>对关系的描述</li><li>静态的、稳定的</li></ul></li><li><p>关系：</p><ul><li>关系模式在某一时刻的状态 or 内容</li><li>动态的、随时间不断变化的</li></ul></li><li><p>关系模式和关系往往统称为关系</p></li></ul><h2 id="关系数据库"><a class="anchor" href="#关系数据库">#</a> 关系数据库</h2><p>在一个给定的应用领域中，所有关系的集合构成一个关系数据库</p><h3 id="关系数据库の型与值"><a class="anchor" href="#关系数据库の型与值">#</a> 关系数据库の<strong>型</strong>与<strong>值</strong></h3><ol><li>关系数据库的型：关系数据库模式  对关系数据库的描述</li><li>关系数据库模式包括：<ul><li>若干域の定义</li><li>在这些域上定义の若干关系模式</li></ul></li><li>关系数据库の值：<ul><li>关系模式在某一时刻对应の关系の集合</li></ul></li></ol><h1 id="关系操作"><a class="anchor" href="#关系操作">#</a> 关系操作</h1><h2 id="基本关系操作"><a class="anchor" href="#基本关系操作">#</a> 基本关系操作</h2><h3 id="常用关系操作"><a class="anchor" href="#常用关系操作">#</a> 常用关系操作</h3><ul><li><strong>查询</strong>：选择、投影、连接、除、并、交、差</li><li><strong>数据更新</strong>：插入、删除、修改</li><li>查询的表达能力是其中最主要的部分</li><li><strong>选择、投影、并、差、笛卡尔积 是 5 种基本操作</strong></li></ul><h3 id="关系操作の特点"><a class="anchor" href="#关系操作の特点">#</a> 关系操作の特点：</h3><ul><li>集合操作方式：操作的对象和结果都是集合，一次一集合の方式</li></ul><h2 id="关系数据库语言の分类"><a class="anchor" href="#关系数据库语言の分类">#</a> 关系数据库语言の分类</h2><ul><li><p>关系代数语言：用对关系の运算来表达查询要求</p><ul><li>代表：ISBL</li></ul></li><li><p>关系演算语言：用为此来表达查询要求</p><ul><li>元组关系演算语言：<ul><li>谓词变元の基本对象是元组变量</li><li>代表：APLAHA,QUEL</li></ul></li><li>域关系演算语言：<ul><li>谓词变元の基本对象是域变量</li><li>代表：QBE</li></ul></li></ul></li><li><p>具有关系代数 and 关系演算双重特点の语言</p><ul><li>代表：SQL</li></ul></li></ul><h1 id="关系的完整性"><a class="anchor" href="#关系的完整性">#</a> 关系的完整性</h1><h2 id="关系の三类完整性约束"><a class="anchor" href="#关系の三类完整性约束">#</a> 关系の三类完整性约束</h2><p>1). 实体完整性<br /> 2). 参照完整性</p><p>关系模型必须满足の完整性约束条件 称为关系の两个<strong>不变性</strong>，应该由关系系统自动支持</p><p>3). 用户定义の完整性<br />应用领域需要遵循の约束条件，体现了具体领域中の语义约束</p><h2 id="实体完整性"><a class="anchor" href="#实体完整性">#</a> 实体完整性</h2><p><strong>规则 2.1 实体完整性规则 (Entity Integrity)</strong><br /> 若属性 A 是基本关系 R 的主属性，则属性 A 不能取空值<br />例子：<br />SAP(SUPERVISOR, SPECIALITY, POSTGRADUATE)<br />POSTGRADUATE:<br /> 主码 (假设研究生不会重名)<br /> 不能取空值</p><p>规则说明：</p><ol><li>实体完整性规则是针对基本关系而言的。一个基本表通常对应现实世界的一个实体集。</li><li>现实世界中的实体是可区分的，即它们具有某种唯一性标识</li><li>关系模型中以主码作为唯一标识</li><li>主码的属性即主属性不能取空值<br />主属性取空值，就说明存在某个不可标识的实体，即存在不可区分的实体，这与 2) 矛盾，因此这个规则称为实体完整性</li></ol><h2 id="参照完整性"><a class="anchor" href="#参照完整性">#</a> 参照完整性</h2><h3 id="关系间的引用"><a class="anchor" href="#关系间的引用">#</a> 关系间的引用</h3><p>关系模型中实体与实体间的联系都是用关系来描述的，因此肯存在着关系与关系间的引用<br />例子：<br />学生 (<strong>学号</strong>，姓名，性别，<strong>专业号</strong>，年龄)  #学号是主码<br />专业 (<strong>专业号</strong>，专业名)                     #专业号是主码</p><p>学生关系引用了 专业关系的主码 “专业号”<br /> 学生关系中的 “专业号” 值 必须是确实存在的 专业的专业号，即专业<br />关系中有该专业的记录</p><p>例 2：学生、课程、学生与课程之间多对多联系<br />学生 (<strong>学号</strong>，姓名，性别，专业号，年龄)<br /> 课程 (<strong>课程号</strong>，课程名，学分)<br /> 选修 (<strong>学号</strong>，<strong>课程号</strong>，成绩)</p><p>例 3：学生实体及其内部的一对多联系<br /><a href="https://imgse.com/i/zSaqTx"><img data-src="https://s1.ax1x.com/2022/11/09/zSaqTx.png" alt="zSaqTx.png" /></a><br /> “学号” 是主码，“班长” 是外码，它引用了本关系的 “学号”<br />“班长” 必须是确实存在的学生的 学生的学号</p><h3 id="外码"><a class="anchor" href="#外码">#</a> 外码</h3><p>H<sub>2</sub>O<br />K<sub>s</sub></p><ul><li>设<em> F</em> 是基本关系<em> R</em> 的一个 or 一组属性，但不是关系<em> R</em> 的码<br />如果<em> F</em> 与基本关系<em> S</em> 的主码 K<sub>s</sub> 相对应，则称 F 是基本关系 R 的外码</li><li>基本关系<em> R</em> 称为<strong>参照关系</strong> (Referencing Relation)</li><li>基本关系<em> S</em> 称为<strong>被参照关系</strong> (Referenced Relation) or <strong>目标关系</strong> (Target Relation)</li></ul><p>例 1：<br />学生关系的 专业号 与专业关系的主码 专业号 相对应</p><ul><li>” 专业号 “属性是学生关系的外码</li></ul><h3 id="参照完整性规则"><a class="anchor" href="#参照完整性规则">#</a> 参照完整性规则</h3><h2 id="用户定义の完整性"><a class="anchor" href="#用户定义の完整性">#</a> 用户定义の完整性</h2><h1 id="关系代数"><a class="anchor" href="#关系代数">#</a> 关系代数</h1><h2 id="传统的集合运算"><a class="anchor" href="#传统的集合运算">#</a> 传统的集合运算</h2><h3 id="并union"><a class="anchor" href="#并union">#</a> 并 (Union)</h3><h3 id="差difference"><a class="anchor" href="#差difference">#</a> 差 (Difference)</h3><h3 id="交intersection"><a class="anchor" href="#交intersection">#</a> 交 (Intersection)</h3><h3 id="笛卡尔积cartesian-product-2"><a class="anchor" href="#笛卡尔积cartesian-product-2">#</a> 笛卡尔积 (Cartesian Product)</h3><h2 id="专门的关系运算"><a class="anchor" href="#专门的关系运算">#</a> 专门的关系运算</h2><h3 id="选择"><a class="anchor" href="#选择">#</a> 选择</h3><h3 id="投影"><a class="anchor" href="#投影">#</a> 投影</h3><h3 id="连接"><a class="anchor" href="#连接">#</a> 连接</h3><h3 id="除"><a class="anchor" href="#除">#</a> 除</h3><h1 id="关系演算"><a class="anchor" href="#关系演算">#</a> 关系演算</h1><h1 id="小结"><a class="anchor" href="#小结">#</a> 小结</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PCA</title>
      <link href="/2022/10/30/PCA/"/>
      <url>/2022/10/30/PCA/</url>
      
        <content type="html"><![CDATA[<h1 id="pca_"><a class="anchor" href="#pca_">#</a> PCA_</h1><p><a href="https://imgse.com/i/xIXxEj"><img data-src="https://s1.ax1x.com/2022/10/30/xIXxEj.png" alt="PCA" /></a></p><h2 id="step"><a class="anchor" href="#step">#</a> Step</h2><h3 id="1对所有样本进行中心化"><a class="anchor" href="#1对所有样本进行中心化">#</a> 1. 对所有样本进行中心化：</h3><h3 id="2计算样本协方差矩阵"><a class="anchor" href="#2计算样本协方差矩阵">#</a> 2. 计算样本协方差矩阵</h3><h3 id="3对协方差矩阵做特征值分解"><a class="anchor" href="#3对协方差矩阵做特征值分解">#</a> 3. 对协方差矩阵做特征值分解</h3><h3 id="4取最大的m个特征值所对应的单位特征向量w1w2w3wn"><a class="anchor" href="#4取最大的m个特征值所对应的单位特征向量w1w2w3wn">#</a> 4. 取最大的 m 个特征值所对应的单位特征向量 W1,W2,W3...Wn</h3>]]></content>
      
      
      <categories>
          
          <category> machine learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL</title>
      <link href="/2022/10/26/SQL/"/>
      <url>/2022/10/26/SQL/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章"><a class="anchor" href="#第一章">#</a> 第一章</h1><h2 id="1数据库系统概述"><a class="anchor" href="#1数据库系统概述">#</a> 1. 数据库系统概述</h2><h3 id="1四个基本概念"><a class="anchor" href="#1四个基本概念">#</a> 1. 四个基本概念</h3><h4 id="数据-data"><a class="anchor" href="#数据-data">#</a> 数据 Data</h4><ul><li>是数据库中存储的基本对象。</li><li>特点：数据与其语义是不可分的。</li></ul><h4 id="数据库-db"><a class="anchor" href="#数据库-db">#</a> 数据库 DB</h4><ul><li>是长期存储在计算机内、有组织的、可共享的 大量数据的集合。</li><li>基本特征：数据按一定的数据模型组织、描述和存储。<ul><li>可为各种用户共享。</li><li>冗余度较小。</li><li>数据独立性较高。</li><li>易拓展。</li></ul></li></ul><h4 id="数据库管理系统-dbms"><a class="anchor" href="#数据库管理系统-dbms">#</a> 数据库管理系统 DBMS</h4><ul><li><p>位于用户与操作系统之间的一层 数据管理软件。</p></li><li><p>是基础软件，是一个大型复杂的软件系统</p></li><li><p>用途：科学地组织和存储数据、高效地获取和维护数据</p></li><li><p>数据定义功能：提供数据定义语言 (DDL)。 定义数据库中的数据对象</p></li><li><p>数据组织、存储和管理：</p><ul><li>分类组织、存储和管理各种数据</li><li>确定 组织数据的文件结构和存取方式</li><li>实现数据之间的联系</li><li>提供多种存取方法提高存取效率</li></ul></li><li><p>数据操纵功能：</p><ul><li>提供数据操纵语言 (DML)</li><li>实现对数据库的基本操作 (查询、插入、删除 and 修改)</li></ul></li><li><p>数据库的事务管理和运行管理：</p><ul><li>数据库在建立、运行和维护时由 DBMS 统一管理和控制<br />保证数据的安全性、完整性、多用户对数据的并发使用发生故障后的系统恢复。</li></ul></li><li><p>数据库的建立和维护功能 (实用程序)</p><ul><li>数据库初始数据装载转换</li><li>数据库转储</li><li>介质故障恢复</li><li>数据库 的重组织</li><li>性能监视分析 etc</li></ul></li><li><p>其他功能：</p><ul><li>DBMS 与网络中其它软件系统的通信</li><li>两个 DBMS 系统的数据转换</li><li>异构数据库之间的互访和互操作</li></ul></li></ul><h4 id="数据库系统-dbs"><a class="anchor" href="#数据库系统-dbs">#</a> 数据库系统 DBS</h4><ul><li>在计算机系统中引入数据库后的系统构成</li><li>数据库系统构成：<ul><li>数据库</li><li>数据库管理系统 (及其开发工具)</li><li>应用系统</li><li>数据库管理员</li></ul></li></ul><h3 id="2数据库系统的特点"><a class="anchor" href="#2数据库系统的特点">#</a> 2. 数据库系统的特点</h3><ul><li><p>数据结构化</p></li><li><p>数据的共享性高，冗余度低，易扩充</p></li><li><p>数据独立性高：</p></li></ul><ol><li>物理独立性<br />物理存储改变了，应用程序不改变</li><li>逻辑独立性</li></ol><ul><li>数据由 DBMS 统一管理和控制</li></ul><ol><li><p>数据独立性是由 DBMS 的二级映像功能来保证的</p></li><li><p>DBMS 提供的数据控制功能</p><p>(1). 数据的安全性保护<br /> (2). 数据的完整性 (Integrity) 检查<br /> (3). 并发 (Concurrency) 控制<br /> (4). 数据库恢复</p></li></ol><h2 id="2数据模型"><a class="anchor" href="#2数据模型">#</a> 2. 数据模型</h2><p>分两类，分属两个不同的层次</p><h3 id="概念模型信息模型"><a class="anchor" href="#概念模型信息模型">#</a> 概念模型 (信息模型)</h3><p>按 用户的观点 来对数据和信息建模，用于数据库设计。</p><p>现实世界中的客观对象抽象为<strong>概念模型</strong><br />把概念模型转换为某一 DBMS 支持的数据模型</p><h3 id="逻辑模型-and-物理模型"><a class="anchor" href="#逻辑模型-and-物理模型">#</a> 逻辑模型 and 物理模型</h3><ul><li>逻辑模型：主要包括网状模型、层次模型、关系模型、面向对象模型，<br /> 按<strong>计算机系统的观点对数据建模，用于 DBMS 实现</strong></li><li>物理模型：对数据最底层的抽象，描述数据在系统内部的表示方式和存取方法，在磁盘或磁带上的存储方式和存取方法。<br /><a href="https://imgse.com/i/x4s7ff"><img data-src="https://s1.ax1x.com/2022/10/28/x4s7ff.png" alt="两步抽象.png" /></a></li></ul><h3 id="1数据模型的组成要素"><a class="anchor" href="#1数据模型的组成要素">#</a> 1. 数据模型的组成要素</h3><h4 id="1数据结构"><a class="anchor" href="#1数据结构">#</a> (1) 数据结构</h4><h4 id="2数据操作"><a class="anchor" href="#2数据操作">#</a> (2) 数据操作</h4><ul><li>查询</li><li>更新 (包括插入、删除、修改)</li></ul><h4 id="3完整性约束条件"><a class="anchor" href="#3完整性约束条件">#</a> (3) 完整性约束条件</h4><ul><li>一组完整性规则的集合</li><li>完整性规则：给定的数据模型中数据及其联系所具有的制约和存储规则</li><li>用以限定符合数据模型的数据库状态以及状态的变化，以保证数据的正确、有效、相容。</li><li><strong>完整定义</strong>：<br />(1). 反应和规定本数据模型必须遵守的基本的通用的完整性约束条件。<br />eg：在关系模型中，任何关系必须满足 [实体完整性] 和 [参照完整性] 两个条件。<br />(2). 提供定义完整性约束条件的机制，以反映具体应用所涉及的数据必须遵守的特定的语义约束条件。</li></ul><h3 id="2概念模型"><a class="anchor" href="#2概念模型">#</a> 2. 概念模型</h3><h4 id="1信息世界中的基本概念"><a class="anchor" href="#1信息世界中的基本概念">#</a> 1. 信息世界中的基本概念</h4><blockquote><p>实体 (Entity)：    客观存在并可互相区别的事物。可以是 具体的人、事、物 or 抽象的概念<br />属性 (Attribute): 实体具有的某一特征。一个实体可由若干个属性来刻画。<br />码 (Key): 唯一标识实体的属性集。<br />域 (Domain): 属性的取值范围<br />实体型 (Entity Type): 用实体名及其属性名集合 来抽象和刻画同类实体<br />实体集 (Entity Set): 同一类型实体的集合<br />联系 (Relationship):</p><blockquote><p>现实世界中事物内部以及事物之间的联系在信息世界中反映为实体内部的联系 and 实体之间的联系。<br /><strong>实体内部</strong>的联系通常是指组成实体的各属性之间的联系<br /><strong>实体之间</strong>的联系通常是指不同实体集之间的联系</p></blockquote></blockquote><h4 id="2两个实体型之间的联系"><a class="anchor" href="#2两个实体型之间的联系">#</a> 2. 两个实体型之间的联系</h4><p><a href="https://imgse.com/i/x52D91"><img data-src="https://s1.ax1x.com/2022/10/29/x52D91.png" alt="两个实体型之间的联系" /></a></p><h4 id="3两个以上实体型之间的联系"><a class="anchor" href="#3两个以上实体型之间的联系">#</a> 3. 两个以上实体型之间的联系</h4><p><a href="https://imgse.com/i/x5Rc2q"><img data-src="https://s1.ax1x.com/2022/10/29/x5Rc2q.png" alt="两个以上实体型之间的联系" /></a></p><h4 id="4单个实体型内的联系"><a class="anchor" href="#4单个实体型内的联系">#</a> 4. 单个实体型内的联系</h4><p><a href="https://imgse.com/i/x5RHR1"><img data-src="https://s1.ax1x.com/2022/10/29/x5RHR1.png" alt="单个实体型内的联系" /></a></p><h4 id="5概念模型的一种表示方法"><a class="anchor" href="#5概念模型的一种表示方法">#</a> 5. 概念模型的一种表示方法</h4><p>E-R 图</p><h4 id="6一个实例"><a class="anchor" href="#6一个实例">#</a> 6. 一个实例</h4><p><a href="https://imgse.com/i/x5RzIH"><img data-src="https://s1.ax1x.com/2022/10/29/x5RzIH.png" alt="" /></a></p><h3 id="3最常用的数据模型"><a class="anchor" href="#3最常用的数据模型">#</a> 3. 最常用的数据模型</h3><h4 id="1非关系模型"><a class="anchor" href="#1非关系模型">#</a> 1. 非关系模型</h4><ul><li>层次模型 (Hierarchical Model)</li><li>网状模型 (Network Model)</li></ul><h4 id="2关系模型relational-model"><a class="anchor" href="#2关系模型relational-model">#</a> 2. 关系模型 (Relational Model)</h4><h4 id="3面向对象模型object-oriented-model"><a class="anchor" href="#3面向对象模型object-oriented-model">#</a> 3. 面向对象模型 (Object Oriented Model)</h4><h4 id="4对象关系模型object-relational-model"><a class="anchor" href="#4对象关系模型object-relational-model">#</a> 4. 对象关系模型 (Object Relational Model)</h4><h3 id="4层次模型"><a class="anchor" href="#4层次模型">#</a> 4. 层次模型</h3><p>是数据库系统中最早出现的 数据模型，典型代表：IBM 公司的 IMS (info Management System) 数据库管理系统；用<strong>树形结构</strong>来表示各类实体以及实体间的联系。</p><h4 id="1层次模型的数据结构"><a class="anchor" href="#1层次模型的数据结构">#</a> 1. 层次模型的数据结构</h4><ul><li>满足 de 集合：<ul><li>根节点 (有且只有一个结点 没有双亲结点)</li><li>根以外的其它结点有且只有一个双亲结点</li></ul></li><li>术语：根节点，双亲结点，兄弟结点，叶结点</li></ul><h4 id="2多对多联系在层次模型中的表示"><a class="anchor" href="#2多对多联系在层次模型中的表示">#</a> 2. 多对多联系在层次模型中的表示</h4><ul><li>方法：多对多联系分解成一对多联系</li><li>分解方法：<ul><li>冗余结点法</li><li>虚拟结点法</li></ul></li></ul><h4 id="3层次模型的数据操纵与完整性约束"><a class="anchor" href="#3层次模型的数据操纵与完整性约束">#</a> 3. 层次模型的数据操纵与完整性约束</h4><ul><li><p>层次模型的数据操纵</p><ul><li>查询</li><li>插入</li><li>删除</li><li>更新</li></ul></li><li><p>层次模型的完整性约束条件</p></li></ul><h4 id="4层次模型的存储结构"><a class="anchor" href="#4层次模型的存储结构">#</a> 4. 层次模型的存储结构</h4><blockquote><p><strong>邻接法</strong>： 按照树的前序遍历 ----&gt; 依次邻接存放，即通过物理空间的位置相邻来实现层次谁徐<br /><strong>链接法</strong>：(用来反映数据之间的层次关系)</p><blockquote><p>子女 - 兄弟链接法：<br />层次序列链接法：<br /><a href="https://imgse.com/i/x5IaMn"><img data-src="https://s1.ax1x.com/2022/10/29/x5IaMn.png" alt="" /></a></p></blockquote></blockquote><h4 id="5优缺点"><a class="anchor" href="#5优缺点">#</a> 5. 优缺点：</h4><p>优点：<br />数据结构简单清晰<br />查询效率高，性能 优于关系模型，不低于 网状模型<br />提供了良好的完整性支持</p><p>缺点：<br />多对多联系表示不自然<br />对插入删除擦做限制多，引用程序的编写比较复杂<br />查询子女结点必须通过双亲结点<br />由结构严密，层次命令趋于程序化</p><h3 id="5网状模型"><a class="anchor" href="#5网状模型">#</a> 5. 网状模型</h3><h3 id="6关系模型"><a class="anchor" href="#6关系模型">#</a> 6. 关系模型</h3>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ch3_数据链路层</title>
      <link href="/2022/10/16/Ch3-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
      <url>/2022/10/16/Ch3-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="数据链路层"><a class="anchor" href="#数据链路层">#</a> 数据链路层</h1><h2 id="一-基本概念"><a class="anchor" href="#一-基本概念">#</a> 一、基本概念</h2><ul><li><p><strong>结点</strong>：主机、路由器。</p></li><li><p><strong>链路</strong>：网络中两个结点之间的<strong>物理通道</strong>，链路的传输介质主要有 - 双绞线、光纤 and 微波。分为 有线链路、无线链路。</p></li><li><p><strong>数据链路</strong>：网络中两个结点之间的<strong>逻辑通道</strong>，把实现控制数据 传输协议的硬件和软件加到链路上 就构成数据链路。</p></li><li><p><strong>桢</strong>：链路层的协议数据单元，封装网络层数据报。</p></li><li><p><strong>数据链路层</strong>：负责通过一条链路 从一个结点向另一个物理链路直接相连的相邻结点 传送数据报。<br />功能概述：在物理层提供服务的基础上向 网络层提供服务，其最基本的服务是 将源自网络层来的数据可靠地传输到相邻结点的目标机网络层。<br />主要作用：<strong>加强物理层传输原始比特流</strong>的功能。将物理层提供的可能出错的物理连接改造成为 逻辑上无差错的数据链路，使之对网络层表现为一条无差错的链路。</p><p><strong>功能一</strong>：为网络层提供服务。<br />有确认无连接服务，无确认无连接服务，有确认面向连接服务。！有连接一定有确认！<br /><strong>功能二</strong>：链路管理，即连接的建立、维持、释放。(用于面向连接服务)<br /><strong> 功能三</strong>：组帧。<br /><strong>功能四</strong>：流量控制。<br /><strong>功能五</strong>：差错控制 (帧错 / 位错)。</p></li></ul><h2 id="二-封装成帧透明传输"><a class="anchor" href="#二-封装成帧透明传输">#</a> 二、封装成帧 &amp; 透明传输</h2><h3 id="1封装成帧"><a class="anchor" href="#1封装成帧">#</a> 1. 封装成帧</h3><ul><li><strong>封装成帧</strong>：在一段数据的前后部分添加首部和尾部，构成一个帧。<br />接收端在收到物理层 上交的比特流后，就能根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束。<br />首部和尾部包含许多的控制信息，重要作用 -- 帧定界 (确定帧的界限)</li><li><strong>帧同步</strong>：接收方应当能从接收到的 二进制比特流中区分出 帧的起始和终止。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ch2_物理层</title>
      <link href="/2022/10/16/Ch2-%E7%89%A9%E7%90%86%E5%B1%82/"/>
      <url>/2022/10/16/Ch2-%E7%89%A9%E7%90%86%E5%B1%82/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ch1_计网体系结构</title>
      <link href="/2022/10/16/Ch1-%E8%AE%A1%E7%BD%91%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
      <url>/2022/10/16/Ch1-%E8%AE%A1%E7%BD%91%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="计网体系结构"><a class="anchor" href="#计网体系结构">#</a> 计网体系结构</h1><h2 id="一-概念"><a class="anchor" href="#一-概念">#</a> 一、概念</h2><ol><li>计算机网络：是一个将分散的、具有独立功能的计算机系统，通过<strong>通信设备</strong>与<strong>线路</strong>连接起来，由功能完善的软件实现<strong>资源共享</strong>和<strong>信息传递</strong>的系统。</li><li>计算机网络是互连的、自治的计算机集合。<br />- 互连：通过通信链路互联互通。<br />- 自治：无主从关系。</li></ol><h2 id="二-功能"><a class="anchor" href="#二-功能">#</a> 二、功能</h2><ol><li>数据通信</li><li>资源共享  （可共享硬件、软件、数据 ）</li><li>分布式处理  （多台计算机各自承担同一工作任务的不同部分 Hadoop...）<br />- 可靠性<br /> - 负载均衡</li></ol><h2 id="三-组成"><a class="anchor" href="#三-组成">#</a> 三、组成</h2><p><a href="https://imgse.com/i/xBKch6"><img data-src="https://s1.ax1x.com/2022/10/16/xBKch6.png" alt="" /></a><a href="https://imgse.com/i/xBK29K"><img data-src="https://s1.ax1x.com/2022/10/16/xBK29K.png" alt="" /></a></p><h2 id="四-分类"><a class="anchor" href="#四-分类">#</a> 四、分类</h2><p><a href="https://imgse.com/i/xBJ5kQ"><img data-src="https://s1.ax1x.com/2022/10/16/xBJ5kQ.md.png" alt="xBJ5kQ.md.png" /></a><br />&lt;iframe src=&quot;<span class="exturl" data-url="aHR0cHM6Ly9naXBoeS5jb20vZW1iZWQvSG0ybUNVWGVBQnFSQUFPQnRH">https://giphy.com/embed/Hm2mCUXeABqRAAOBtG</span>&quot; width=&quot;480&quot; height=&quot;349&quot; frameBorder=&quot;0&quot; class=&quot;giphy-embed&quot; allowFullScreen&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&quot;<span class="exturl" data-url="aHR0cHM6Ly9naXBoeS5jb20vZ2lmcy9IbTJtQ1VYZUFCcVJBQU9CdEc=">https://giphy.com/gifs/Hm2mCUXeABqRAAOBtG</span>&quot;&gt; 环形网络 &lt;/a&gt;&lt;/p&gt;</p><h2 id="五-性能指标"><a class="anchor" href="#五-性能指标">#</a> 五、性能指标</h2><ul><li><strong>速率</strong>：即数据率 or 数据传输率 or 比特率。<br />连接在计算机网络上的<em>主机</em>在数字信道上传送数据<em>位数的速率</em>。</li><li><strong>带宽</strong>：表示网络的通信线路传送数据的能力，通常指单位时间内从网络中的某一点到另外一点所能通过的 “最高数据率”。单位 “比特每秒”<br /> 原指某个信号具有的频带宽度，最高频率与最低频率只差，单位是赫兹（Hz）</li><li><strong>吞吐量</strong>单位时间内通过某个网络 (or 信道、接口) 的数据量。</li><li><strong>时延</strong>：指数据 (报文 / 分组 / 比特流) 从网络 (or 链路) 的一端传送到另一端所需的时间。也叫延迟 or 迟延。单位 S。</li><li><strong>时延带宽积</strong>：传播时延 x 带宽 (某段链路现在有多少比特)</li><li><strong>往返时间 RTT</strong>：包括往返传播时延 (传播时延 * 2) + 末端处理时间</li><li><strong>利用率</strong>：信道利用率 网络利用率<br /><a href="https://imgse.com/i/xBaF8H"><img data-src="https://s1.ax1x.com/2022/10/16/xBaF8H.png" alt="速率.png" /></a><br /><a href="https://imgse.com/i/xBaVKI"><img data-src="https://s1.ax1x.com/2022/10/16/xBaVKI.png" alt="带宽.png" /></a><br /><a href="https://imgse.com/i/xBaAxA"><img data-src="https://s1.ax1x.com/2022/10/16/xBaAxA.png" alt="吞吐量.png" /></a><br /><a href="https://imgse.com/i/xBak2d"><img data-src="https://s1.ax1x.com/2022/10/16/xBak2d.png" alt="时延.png" /></a><br /><a href="https://imgse.com/i/xBaJrq"><img data-src="https://s1.ax1x.com/2022/10/16/xBaJrq.png" alt="利用率.png" /></a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OS(一)</title>
      <link href="/2022/10/09/os(%E4%B8%80)/"/>
      <url>/2022/10/09/os(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>markdown</title>
      <link href="/2022/09/21/java-basic/"/>
      <url>/2022/09/21/java-basic/</url>
      
        <content type="html"><![CDATA[<p>#标题一<br />の<br /> ## 标题二</p><p>### 标题三</p><p>#### 标题四</p><p><strong>这是加粗</strong></p><p><em>这是斜体</em></p><p><s>这是横线</s></p><ul><li><p>无序列表</p></li><li><p>无序列表</p></li></ul><p>1. 有序序列 1<br />2. 有序序列 2</p><p><code>内嵌代码</code></p><pre><code>代码块</code></pre><blockquote><p>引用<br />吾生也有涯，而知也无涯</p></blockquote><p>&lt;!-- 有序列表 --&gt;</p><ol><li>凯瑟琳</li><li>海瑟薇</li><li>亚瑟。皮特<br /> &lt;!-- 无序列表 --&gt;</li></ol><ul><li>APPLE</li><li>PEACH</li><li>lemon<br />&lt;!-- 加粗 --&gt;<br /><strong> 微信：帕克</strong><br /> &lt;!-- 斜体 --&gt;<br /><em> 微信：帕克</em><br /> &lt;!-- 删除线 --&gt;<br /><s> 微信：帕克</s></li></ul><h2 id="u微信帕克u微信帕克"><a class="anchor" href="#u微信帕克u微信帕克">#</a> &lt;u&gt; 微信：帕克 &lt;/u&gt;<br /> 微信：帕克</h2><h2 id="个人博客"><a class="anchor" href="#个人博客">#</a> 个人博客：</h2><p>b 站</p><ol><li><p>上标</p><p>H<sup>2</sup>O</p></li><li><p>下标</p><p>H<sub>2</sub>O</p></li></ol><p>&lt;!-- 高亮 --&gt;<br />== 微信：帕克 ==</p><ol><li><p>未完成任务</p><ul class="task-list"><li class="task-list-item"><input type="checkbox" id="cbx_0" disabled="true" /><label for="cbx_0"> 公众号：</label></li><li class="task-list-item"><input type="checkbox" id="cbx_1" disabled="true" /><label for="cbx_1"> 个人博客：</label></li></ul></li><li><p>已完成任务</p><ul class="task-list"><li class="task-list-item"><input type="checkbox" id="cbx_2" checked="true" disabled="true" /><label for="cbx_2"> 知乎：</label></li><li class="task-list-item"><input type="checkbox" id="cbx_3" checked="true" disabled="true" /><label for="cbx_3"> CSDN：</label></li></ul></li><li><p>左对齐</p></li></ol><table><thead><tr><th style="text-align:left">平台</th><th style="text-align:left">链接</th></tr></thead><tbody><tr><td style="text-align:left">公众号</td><td style="text-align:left">jjjl</td></tr></tbody></table><ol start="2"><li>居中对齐</li></ol><table><thead><tr><th style="text-align:center">平台</th><th style="text-align:center">链接</th></tr></thead><tbody><tr><td style="text-align:center">公众号</td><td style="text-align:center">hh 就</td></tr></tbody></table><ol><li><p>行间公式</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x_1+x_2=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></p></li><li><p>独立公式块</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x^2+y^2=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p></li><li><p>链接</p></li></ol><p><span class="exturl" data-url="aHR0cHM6Ly9jdW55dTE5NDMuc2l0ZQ==">汲汲雨</span></p><ol start="2"><li>图片</li></ol><p><img data-src="https://cdn.jsdelivr.net/gh/cunyu1943/image-hosting-for-blog/blog/image-blogzhuye.png" alt="汲汲雨" /></p>]]></content>
      
      
      <categories>
          
          <category> Books </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/14/hello-world/"/>
      <url>/2022/09/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo</span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=">troubleshooting</span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==">GitHub</span>.</p><h2 id="quick-start"><a class="anchor" href="#quick-start">#</a> Quick Start</h2><h3 id="create-a-new-post"><a class="anchor" href="#create-a-new-post">#</a> Create a new post</h3><figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo new <span class="token string">"My New Post"</span></pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s">Writing</span></p><h3 id="run-server"><a class="anchor" href="#run-server">#</a> Run server</h3><figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=">Server</span></p><h3 id="generate-static-files"><a class="anchor" href="#generate-static-files">#</a> Generate static files</h3><figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s">Generating</span></p><h3 id="deploy-to-remote-sites"><a class="anchor" href="#deploy-to-remote-sites">#</a> Deploy to remote sites</h3><figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s">Deployment</span><br />H<sub>2</sub>O<br />2<sup>10</sup></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
