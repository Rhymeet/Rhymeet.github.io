<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Replenish</title>
      <link href="/2023/02/02/Replenish/"/>
      <url>/2023/02/02/Replenish/</url>
      
        <content type="html"><![CDATA[<h1 id="replenish"><a class="anchor" href="#replenish">#</a> replenish</h1><p>replenish<br />verb [ T ]   formal<br />UK  /rɪˈplen.ɪʃ/ US  /rɪˈplen.ɪʃ/</p><p>to fill something up again<br /> 補充；把… 再備足；重新裝滿</p><h1 id="捎带确认"><a class="anchor" href="#捎带确认">#</a> 捎带确认</h1><p>当主机收到远程主机的 TCP 数据包之后，通常不马上发送 ACK 数据包，而是等上一个短暂的时间，如果这段时间里面主机还有发送到远程主机的 TCP 数据包，那么就把这个 ACK 数据包 “捎带” 着发送出去，把本来两个 TCP 数据包整合成一个发送。一般的，这个时间是 200ms。可以明显地看到这个策略可以把 TCP 数据包的利用率提高很多。</p><p>一个 TCP 连接允许数据在任何一个方向流动，并允许任何一个应用程序在任何时刻发送数据。即当两个进程 A 和 B 建立连接后，任何一方均能发送数据给另一方。当分组从 A 发往 B 时，可携带对 B 发来数据的确认。同理，当分组从 B 发往 A 时，可携带对 A 发来数据的确认。即采用捎带确认的机制。</p>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ch5_应用层</title>
      <link href="/2023/02/02/Ch5-%E5%BA%94%E7%94%A8%E5%B1%82/"/>
      <url>/2023/02/02/Ch5-%E5%BA%94%E7%94%A8%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="应用层概述"><a class="anchor" href="#应用层概述">#</a> 应用层概述</h1><p><img data-src="https://img1.imgtp.com/2023/02/07/44AUvZW0.jpg" alt="20.jpg" /></p><h1 id="cs方式-p2p方式"><a class="anchor" href="#cs方式-p2p方式">#</a> C/S 方式 &amp; P2P 方式</h1><p><img data-src="https://img1.imgtp.com/2023/02/07/a8UtSHcD.jpg" alt="22.jpg" /></p><h2 id="各户服务器方式"><a class="anchor" href="#各户服务器方式">#</a> 各户 / 服务器方式</h2><p>C/S<br />client server</p><h2 id="对等方式"><a class="anchor" href="#对等方式">#</a> 对等方式</h2><p>(P2P 方式)<br />peer to peer<br /><img data-src="https://img1.imgtp.com/2023/02/07/llFMki2a.jpg" alt="21.jpg" /></p><h1 id="动态主机配置dhcp"><a class="anchor" href="#动态主机配置dhcp">#</a> 动态主机配置 DHCP</h1><p>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议），<br />前身是 BOOTP 协议，是一个局域网的网络协议，使用 UDP 协议工作，<br />统一使用两个 IANA 分配的端口：67（服务器端），68（客户端）。</p><p>DHCP 通常被用于局域网环境，主要作用是集中的管理、分配 IP 地址，使 client 动态的获得 IP 地址、Gateway 地址、DNS 服务器地址等信息，并能够提升地址的使用率。<br />简单来说，DHCP 就是一个不需要账号密码登录的、自动给内网机器分配 IP 地址等信息的协议。</p><p><img data-src="https://img1.imgtp.com/2023/02/07/UmJk9h4w.jpg" alt="23.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/07/eyCP5YOw.jpg" alt="24.jpg" /></p><p><img data-src="https://img1.imgtp.com/2023/02/07/4G0QDncz.jpg" alt="25.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/07/NnTZKw0D.jpg" alt="26.jpg" /></p><h1 id="域名系统dns"><a class="anchor" href="#域名系统dns">#</a> 域名系统 DNS</h1><p>Domain Name System<br /><img data-src="https://img1.imgtp.com/2023/02/07/VE6Czink.jpg" alt="27.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/07/R21Kp9v8.jpg" alt="28.jpg" /></p><h1 id="文件传送协议ftp"><a class="anchor" href="#文件传送协议ftp">#</a> 文件传送协议 FTP</h1><h1 id="电子邮件"><a class="anchor" href="#电子邮件">#</a> 电子邮件</h1><h1 id="www万维网"><a class="anchor" href="#www万维网">#</a> WWW 万维网</h1>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ch4_运输层</title>
      <link href="/2023/01/26/Ch4-%E8%BF%90%E8%BE%93%E5%B1%82/"/>
      <url>/2023/01/26/Ch4-%E8%BF%90%E8%BE%93%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a class="anchor" href="#概述">#</a> 概述</h1><p>运输层协议又称端到端协议</p><p>在计算机网络中进行通信的真正实体是位于通信两端主机中的进程</p><p>运输层的任务是 如何为在不同主机上运行的进程提供直接的通信服务</p><p>因特网的运输层为应用提供了两种不同的运输协议：</p><ol><li>面向连接的 TCP</li><li>无连接的 UDP</li></ol><blockquote><p><img data-src="https://img1.imgtp.com/2023/02/01/nVmwZoEg.jpg" alt="4.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/01/iQgV7Vwv.jpg" alt="5.jpg" /></p></blockquote><h1 id="端口号-复用-分用"><a class="anchor" href="#端口号-复用-分用">#</a> 端口号、复用、分用</h1><p><strong>PID</strong> : 运行在计算机上的进程使用 <strong>进程标识符 PID</strong> 来标志</p><p>不同的 OS (Mac os、Linux、windows) 使用 不同格式的进程标识符</p><p>-&gt; 统一 --&gt; 端口号</p><h2 id="端口号"><a class="anchor" href="#端口号">#</a> 端口号</h2><p>TCP/IP 体系的运输层使用端口号来区分应用层的不同应用进程；</p><p>端口号使用 16bit 表示，取值范围 0~65535;</p><ul><li>熟知端口号: 0~1023 、FTP 21/20、HTTP 80、DNS 53</li><li>登记端口号: 1024 ~ 49151、为没有熟知端口号的应用程序使用。需在 IANA 手续登记、</li><li>短暂端口号：49152~65535、留给客户进程选择暂时使用.</li></ul><blockquote><p><img data-src="https://img1.imgtp.com/2023/02/01/v0WoYr8P.jpg" alt="6.jpg" /></p></blockquote><p>端口号只具有本地意义，只是为了标识本计算机应用层中的各进程</p><p>在因特网中、不同计算机中的相同端口号是没有联系的。</p><h2 id="发送方の复用-接收方の分用"><a class="anchor" href="#发送方の复用-接收方の分用">#</a> 发送方の复用 ＆ 接收方の分用</h2><blockquote><p>发送方<br /> UDP 复用：在运输层使用 UDP 协议进行封装<br /> TCP 复用：在运输层使用 TCP 协议进行封装</p></blockquote><pre><code>IP数据报首部中协议字段的值 用来表明IP数据报的数据载荷部分 封装的是何种协议数据单元：= 6  -&gt; 封装的是TCP报文段= 17 -&gt; 封装的是UDP用户数据报</code></pre><blockquote><p>接收方<br />的网络层收到 IP 数据报后进行 IP 分用</p></blockquote><pre><code>= 17 -&gt; 则把IP数据报的数据载荷部分 封装的UDP用户数据报 上交运输层的UDP= 6  -&gt; 则把IP数据报的数据载荷部分 封装的TCP报文段 上交运输层的TCP运输层对UDP用户数据报进行UDP分用运输层对TCP报文段进行TCP分用也就是根据端口号将它们交付给上层相应的应用进程</code></pre><p><img data-src="https://img1.imgtp.com/2023/02/01/knkwdCsP.jpg" alt="7.jpg" /></p><h2 id="应用层熟知端口号"><a class="anchor" href="#应用层熟知端口号">#</a> 应用层熟知端口号</h2><p><img data-src="https://img1.imgtp.com/2023/02/01/nFpzEAZ7.jpg" alt="-8.jpg" /></p><h1 id="udp-和-tcp的对比"><a class="anchor" href="#udp-和-tcp的对比">#</a> UDP 和 TCP 的对比</h1><p><img data-src="https://img1.imgtp.com/2023/02/01/Y6O0jN40.jpg" alt="9.jpg" /></p><p>##UDP 用户数据报协议<br /> User Datagram Protocol<br /><img data-src="https://img1.imgtp.com/2023/02/01/P4NQUzFm.jpg" alt="11.jpg" /></p><p>##TCP 传输控制协议<br /> Transmission Control Protocol</p><p>## 对比</p><blockquote><p><img data-src="https://img1.imgtp.com/2023/02/01/RdalR0eu.jpg" alt="10.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/01/swBIvqJ0.jpg" alt="12.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/01/CSodOwo2.jpg" alt="13.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/01/J24gneG3.jpg" alt="14.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/01/ZAvfui3r.jpg" alt="15.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/01/ygXbmV02.jpg" alt="16.jpg" /></p></blockquote><h1 id="tcp流量控制"><a class="anchor" href="#tcp流量控制">#</a> TCP 流量控制</h1><p>流量控制 (flow control): 让发送方的发送速率不要太快、要让接收方来得及接收</p><p>利用<strong>滑动窗口机制</strong>可以很方便地在 TCP 连接上实现对发送方的流量控制：</p><ul><li>TCP 接收方利用自己的接收窗口大小来限制发送窗口的大小</li><li>TCP 发送方接收到 接收方的零窗口通告后、应<strong>启动持续计时器</strong>。<br />持续计时器超时后、像接收方发送 <strong>零窗口探测报文</strong></li></ul><blockquote><p><strong>TCP 的发送窗口 = min [自身拥塞窗口，TCP 接收方接收窗口]</strong></p></blockquote><blockquote><p><img data-src="https://img1.imgtp.com/2023/02/01/5AgPh8br.jpg" alt="17.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/01/uhXyeSMt.jpg" alt="18.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/01/5q3tK6w7.jpg" alt="19.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/01/PxFgElfI.jpg" alt="20.jpg" /></p></blockquote><p>例题：</p><blockquote><p><img data-src="https://img1.imgtp.com/2023/02/01/3Yt40r3f.jpg" alt="21.jpg" /></p></blockquote><h1 id="tcp的拥塞控制"><a class="anchor" href="#tcp的拥塞控制">#</a> TCP 的拥塞控制</h1><p>拥塞：(congestion)<br /> 在某段时间内，若 对网络中某一资源的需求超过了该资源所能提供的可用部分，网络性能就要变坏。</p><p>网络资源 -- 链路容量 (带宽)、交换结点中的缓存和处理机、、</p><p>若出现拥塞而不进行控制，整个网络的吞吐量将随输入负荷的增大而下降</p><blockquote><p><img data-src="https://img1.imgtp.com/2023/02/01/HNY5BGKg.jpg" alt="22.jpg" /></p></blockquote><h2 id="4种拥塞控制算法"><a class="anchor" href="#4种拥塞控制算法">#</a> 4 种拥塞控制算法</h2><p>假定：<br />1. 数据是单方向传送，而另一个方向只传送确认<br /> 2. 接收方总是有足够大的缓存空间，因而发送方发送窗口的大小由网络的拥塞程度来决定。<br />3. 以最大报文段 MSS 的个数为讨论问题的单位，而不是以字节为单位。</p><p>初始发送方：</p><p>cwnd (拥塞窗口 congestion w、动态变化、)</p><p>swnd = cwnd (发送窗口)</p><p>ssthresh (Slow start threshold、慢开始门限、状态变量)</p><p><img data-src="https://img1.imgtp.com/2023/02/01/7eaDs68n.jpg" alt="23.jpg" /></p><h3 id="慢开始"><a class="anchor" href="#慢开始">#</a> 慢开始 &amp;</h3><blockquote><p><img data-src="https://img1.imgtp.com/2023/02/01/fo5ZUFCv.jpg" alt="24.jpg" /></p></blockquote><h3 id="拥塞避免"><a class="anchor" href="#拥塞避免">#</a> 拥塞避免</h3><blockquote><p><img data-src="https://img1.imgtp.com/2023/02/01/5Q2Neuq6.jpg" alt="25.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/01/Cr5ZURO8.jpg" alt="26.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/01/pBsMMiGX.jpg" alt="27.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/01/SDWa5R45.jpg" alt="28.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/01/cmtabmFo.jpg" alt="29.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/01/wSg7MkLM.jpg" alt="30.jpg" /></p></blockquote><blockquote><p>慢开始 ---☞一开始向网络注入的报文段少，并不是指拥塞窗口 cwnd 增长速度慢；</p></blockquote><blockquote><p>拥塞避免 --- 并非完全能够避免拥塞，☞在拥塞避免阶段 将拥塞窗口 cwnd 控制为按线性规律增长，使网络比较不容易出现拥塞；</p></blockquote><blockquote><p><img data-src="https://img1.imgtp.com/2023/02/01/J4qQeGv6.jpg" alt="31.jpg" /></p></blockquote><h3 id="快重传"><a class="anchor" href="#快重传">#</a> 快重传</h3><p>(fast retransmit)<br /> 可以让发送方尽早知道 发生了个别报文段的丢失</p><p>尽快进行重传、不是等超时器超时再重传</p><p><img data-src="https://img1.imgtp.com/2023/02/01/ZlMSzoPe.jpg" alt="32.jpg" /></p><h3 id="快恢复"><a class="anchor" href="#快恢复">#</a> 快恢复</h3><p>(fast recovery)</p><p>发送方一旦收到连续 3 个重复确认 ----&gt; 执行快恢复算法</p><p>将 ssthresh &amp; cwnd 值 ---&gt; 当前窗口的一半，然后开始拥塞避免算法 CA<br /><img data-src="https://img1.imgtp.com/2023/02/01/jakgNtJc.jpg" alt="33.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/01/ynDg3hUe.jpg" alt="34.jpg" /></p><h3 id="例"><a class="anchor" href="#例">#</a> 例</h3><p><img data-src="https://img1.imgtp.com/2023/02/01/8RRSrwhi.jpg" alt="35.jpg" /></p><h1 id="tcp超时重传时间的选择"><a class="anchor" href="#tcp超时重传时间的选择">#</a> TCP 超时重传时间的选择</h1><p>RTO, (Retransmission TimeOut)</p><p>短了：不必要的重传，使网络负荷增大 ！  RTT0 &gt; RTO<br /> 长了：会使网络的空闲时间增大，降低了传输效率 ！RTT0 &lt; RTO</p><h1 id="tcp可靠传输的实现"><a class="anchor" href="#tcp可靠传输的实现">#</a> TCP 可靠传输的实现</h1><p>TCP 基于 <strong>以字节为单位的滑动窗口</strong>来实现可靠传输</p><p><img data-src="https://img1.imgtp.com/2023/02/03/eMW2Nbfq.jpg" alt="1.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/03/Y7X291M9.jpg" alt="2.jpg" /></p><ol><li><p>虽然发送方的发送窗口是根据接收方的接收窗口设置的，但在同一时刻，发送方的发送窗口并不总是和接收方的接收窗口一样大。</p><ul><li><ol><li>网络传送窗口值需要经历一定的时间滞后，并且这个时间还是不确定的</li></ol></li><li><ol start="2"><li>发送方还可能根据网络当时的拥塞情况适当减小自己的发送窗口尺寸。</li></ol></li></ul></li><li><p>对于<strong>不按序到达的数据应如何处理</strong>，TCP 并无明确规定</p><ul><li><ol><li>如果接收方把不按序到达的数据一律去弃，那么接收窗口的管理将会比较简单，但这样做对网络资源的利用不利因为发送方会重复传送较多的数据</li></ol></li><li><ol start="2"><li>TCP 通常对不按序到达的数据是先临时存放在接收窗口中，等到字节流中所缺少的字节收到后，再按序交付上层的应用进程</li></ol></li></ul></li><li><p>TCP 要求接收方必须有<strong>累积确认</strong>和<strong>捎带确认</strong>机制，这样可以减小传输开销。接收方可以在合适的时候发送确认，也可以在自己有数据要发送时把确认信息顺便带上。</p><ul><li><ol><li><strong>接收方不应过分推迟发送确认</strong>，否则会导致发送方不必要的超时重传，这反而浪费了网络的资源。<br />TCP 标准规定，确认推的时间不应超过 0.5 秒。若收到一连串具有最大长度的报文段，则必须每隔一个报文段就发送一个确认 IRFC1122]</li></ol></li><li><ol start="2"><li>捎带确认实际上并不经常发生，因为大多数应用程序很少同时在两个方向上发送数据。</li></ol></li></ul></li><li><p><strong>TCP 的通信是全双工通信</strong>。<br />通信中的每一方都在发送和接收报文段。因此，每一方都有自己的发送窗口和接收窗口。在谈到这些窗口时，一定要弄清楚是哪一方的窗口</p></li></ol><p><img data-src="https://img1.imgtp.com/2023/02/03/eMW2Nbfq.jpg" alt="1.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/03/Y7X291M9.jpg" alt="2.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/04/QElpNFJw.jpg" alt="3.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/04/QElpNFJw.jpg" alt="3.jpg" /></p><h1 id="tcpの运输连接管理"><a class="anchor" href="#tcpの运输连接管理">#</a> TCP の运输连接管理</h1><p>TCP 是面向连接的协议，它基于运输连接来传送 TCP 报文段。</p><p>TCP 运输连接的建立和释放是每一次面向连接的通信中必不可少的过程。</p><p>TCP 运输连接由 3 个阶段:</p><ul><li><ol><li>建立 TCP 连接  -&quot;三报文握手&quot;</li></ol></li><li><ol start="2"><li>数据传送</li></ol></li><li><ol start="3"><li>释放 TCP 连接  -&quot;四报文挥手&quot;</li></ol></li></ul><p>TCP 的<em>运输连接管理</em>就是使<em>运输连接的建立和释放</em>都能正常地进行。</p><h2 id="tcp的连接建立"><a class="anchor" href="#tcp的连接建立">#</a> TCP 的连接建立</h2><p>TCP 的连接建立要解决以下 3 个问题:</p><ul><li><ol><li>使 TCP 双方能够 确知对方的存在；</li></ol></li><li><ol start="2"><li>使 TCP 双方能够 协商一些参数 (如窗口 MAX、是否使用窗口扩大选项 &amp; 时间戳选项以及服务质量等)；</li></ol></li><li><ol start="3"><li>使 TCP 双方能够 对运输实体资源 (如缓存大小、连接表中的项目、) 进行分配。</li></ol></li></ul><p><strong>TCP 使用 &quot;三报文握手&quot; 建立连接 &quot;</strong></p><blockquote><p>传输控制块:<br />TCP 连接表：<br />指向发送和接收缓存的指针<br />指向重传队列的指针<br />当前的发送和接受序号<br />...</p></blockquote><p>TCP 报文格式：</p><p>(1) 序号：Seq 序号，占 32 位，用来标识从 TCP 源端向目的端发送的字节流，发起方发送数据时对此进行标记。</p><p>(2) 确认序号：Ack 序号，占 32 位，只有 ACK 标志位为 1 时，确认序号字段才有效，Ack=Seq+1。</p><p>(3) 标志位：共 6 个，即 URG、ACK、PSH、RST、SYN、FIN 等，具体含义如下：</p><p>(A) URG：紧急指针 (urgent pointer) 有效。</p><p>(B) ACK：确认序号有效。</p><p>(C) PSH：接收方应该尽快将这个报文交给应用层。</p><p>(D) RST：重置连接。</p><p>(E) SYN：发起一个新连接。</p><p>(F) FIN：释放一个连接。</p><p><img data-src="https://img1.imgtp.com/2023/02/06/dkeI2dZh.jpg" alt="4.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/06/Hgsp6hKG.jpg" alt="5.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/06/7zFFMpMN.jpg" alt="6.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/07/JFpWsCVC.jpg" alt="7.jpg" /></p><h2 id="tcp的连接释放"><a class="anchor" href="#tcp的连接释放">#</a> TCP 的连接释放</h2><p><img data-src="https://img1.imgtp.com/2023/02/07/9Tw2mvi9.jpg" alt="8.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/07/WEHVd3IY.jpg" alt="9.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/07/li0zQVF8.jpg" alt="10.jpg" /></p><p>TCP 服务器进程每收到一次 TCP 客户进程的数据，就重新设置并启动保活计时器 (2h 定时)</p><p>若保活计时器 定时周期内未收到 TCP 客户进程发来的数据，则 <strong>当保活计时器到时后，TCP 服务器进程就向 TCP 客户进程发送一个探测报文段</strong>，<br /> 以后每隔 75s 钟发送一次。<br />若一连发送 10 个探测报文段后仍无 TCP 客户进程的响应，TCP 服务器进程就认为 TCP 客户进程所在主机出了故障，接着就关闭这个连接。</p><p>Client 端收到 Server 端发送的 FIN 报文段，向 Server 端发送标志位是 ACK 的报文段，然后 Client 端进入 TIME_WAIT 状态。Server 端收到 Client 端的 ACK 报文段以后，就关闭连接。此时，Client 端等待 2MSL 的时间后依然没有收到回复，则证明 Server 端已正常关闭，那好，Client 端也可以关闭连接了。</p><p>MSL (Maximum Segment Lifetime) 最长报文段寿命，RFC793 建议 2 分钟。</p><blockquote><p>为什么要等待 2MSL？<br />MSL：报文段最大生存时间，它是任何报文段被丢弃前在网络内的最长时间。有以下两个原因：</p></blockquote><ul><li><ol><li>第一点：保证 TCP 协议的全双工连接能够可靠关闭：<br />由于 IP 协议的不可靠性或者是其它网络原因，导致了 Server 端没有收到 Client 端的 ACK 报文，那么 Server 端就会在超时之后重新发送 FIN，如果此时 Client 端的连接已经关闭处于 CLOESD 状态，那么重发的 FIN 就找不到对应的连接了，从而导致连接错乱，所以，Client 端发送完最后的 ACK 不能直接进入 CLOSED 状态，而要保持 TIME_WAIT，当再次收到 FIN 的收，能够保证对方收到 ACK，最后正确关闭连接。</li></ol></li><li><ol start="2"><li>第二点：保证这次连接的重复数据段从网络中消失<br />如果 Client 端发送最后的 ACK 直接进入 CLOSED 状态，然后又再向 Server 端发起一个新连接，这时不能保证新连接的与刚关闭的连接的端口号是不同的，也就是新连接和老连接的端口号可能一样了，那么就可能出现问题：如果前一次的连接某些数据滞留在网络中，这些延迟数据在建立新连接后到达 Client 端，由于新老连接的端口号和 IP 都一样，TCP 协议就认为延迟数据是属于新连接的，新连接就会接收到脏数据，这样就会导致数据包混乱。所以 TCP 连接需要在 TIME_WAIT 状态等待 2 倍 MSL，才能保证本次连接的所有数据在网络中消失。</li></ol></li></ul><h1 id="tcp报文段の首部格式"><a class="anchor" href="#tcp报文段の首部格式">#</a> TCP 报文段の首部格式</h1><p><img data-src="https://img1.imgtp.com/2023/02/07/doJUctnL.jpg" alt="tcp_head.jpg" /></p><p><img data-src="https://img1.imgtp.com/2023/02/07/CL7M0ceA.jpg" alt="11.jpg" /></p><blockquote><p>源端口：占 16 比特，写入源端口号，用来<strong>标识发送该 TCP 报文段的应用进程</strong></p></blockquote><blockquote><p>目的端口：占 16 比特，写入目的端口号，用来<strong>标识接收该 TCP 报文段的应用进程</strong></p></blockquote><blockquote><p>序号 seq: 占 32bit, 范围 [0,2<sup>32</sup>-1], 序号增加到最后一个后，下一个序 号又回到 0。</p></blockquote><pre><code>指出本TCP报文段数据载荷的第一个字节的序号。</code></pre><p><img data-src="https://img1.imgtp.com/2023/02/07/zzkCDzyJ.jpg" alt="12.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/07/uiAYGxfE.jpg" alt="13.jpg" /></p><blockquote><p>确认号 ack: 32bit, 范围 [0,2<sup>32</sup>-1], 确认号增加到最后一个后，下一个序 号又回到 0。</p></blockquote><pre><code>指出期望收到对方下一个TCP报文段的数据载荷的第一字节的序号,同时也是对之前收到的所有数据的确认- ack = n, 表明到序号n-1为止的所有数据都已正确接收,期望收到序号为n的数据。</code></pre><p><img data-src="https://img1.imgtp.com/2023/02/07/dfRDkEL9.jpg" alt="14.jpg" /></p><blockquote><p>确认标志位 ACK：=1 时确认号字段才有效；取值为 0 时 确认号字段无效</p></blockquote><pre><code>TCP规定：在连接建立后所有TCP报文段都必须把ACK置为1</code></pre><blockquote><p><strong>数据偏移</strong>：4bit,<strong> 并以 4 字节为单位  x4</strong><br /><img data-src="https://img1.imgtp.com/2023/02/07/5iD8OQtJ.jpg" alt="15.jpg" /><br /> 用来指出 TCP 报文段的数据载荷部分的起始处距离 TCP 报文段的起始处有多远</p><pre><code>  实际上是指出了TCP报文段的首部长度   1. 首部固定长度20字节,数据偏移min (0101)~2~   4*5   2. 首部最大长度60字节,数据偏移max (1111)      4*15</code></pre></blockquote><blockquote><p>保留：6bit, 保留为今后所用，但目前应置为 0。</p></blockquote><blockquote><p>窗口: 16bit, 以字节为单位。指出发送本报文段的一方的接收窗口。</p><pre><code>  窗口值作为接收方让发送方设置其发送窗口的依据。  这是以接收方的接受能力来控制发送方的发送能力,称为流量控制.</code></pre></blockquote><blockquote><p>校验和：16bit, 检测范围包括 TCP 报文段的首部和数据载荷 2 部分<br />在计算校验和时，要在 TCP 报文段的前面加上<strong> 12 字节</strong>的伪首部。</p></blockquote><blockquote><p>同步标志位 SYN：在 TCP 连接建立时用来同步序号。<br /><img data-src="https://img1.imgtp.com/2023/02/07/Qc7eSYVE.jpg" alt="16.jpg" /></p></blockquote><blockquote><p>终止标志位 FIN：用来释放 TCP 连接。<br /><img data-src="https://img1.imgtp.com/2023/02/07/AjuqdWE7.jpg" alt="17.jpg" /></p></blockquote><blockquote><p>复位标志位 RST：用来复位 TCP 连接。<br />RST = 1,TCP 连接出现了异常，必须释放连接，然后重新建立连接。<br />RST 置为 1 还用来拒绝一个非法报文段 or 拒绝打开一个 TCP 连接。</p></blockquote><blockquote><p>推送标志位 PSH：接收方的 TCP 收到该标志位为 1 的报文段会尽快上交应用进程，而不必等到接收缓存都填满后再向上交付。</p></blockquote><blockquote><p>紧急标志位 URG：=1 时 有效；=0 时无效</p></blockquote><blockquote><p>紧急指针 ：16bit, 以字节为单位，用来指明紧急数据的长度<br />当发送方有紧急数据时，可将紧急数据插队到发送缓存的最前面，并立刻封装到一个 TCP 报文段中进行发送。<br />紧急指针会指出 本报文段数据载荷部分包含了多长的紧急数据，紧急数据之后是普通数据。</p></blockquote><blockquote><p><img data-src="https://img1.imgtp.com/2023/02/07/oycZAc29.jpg" alt="18.jpg" /></p></blockquote><blockquote><p><img data-src="https://img1.imgtp.com/2023/02/07/02jHKEys.jpg" alt="19.jpg" /></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Piano</title>
      <link href="/2023/01/15/Piano/"/>
      <url>/2023/01/15/Piano/</url>
      
        <content type="html"><![CDATA[<h1 id="1"><a class="anchor" href="#1">#</a> 1</h1><p><a href="https://imgse.com/i/pSQNq58"><img data-src="https://s1.ax1x.com/2023/01/15/pSQNq58.jpg" alt="pSQNq58.jpg" /></a><br /><a href="https://imgse.com/i/pSQNbUf"><img data-src="https://s1.ax1x.com/2023/01/15/pSQNbUf.jpg" alt="pSQNbUf.jpg" /></a><br /><a href="https://imgse.com/i/pSQNHVP"><img data-src="https://s1.ax1x.com/2023/01/15/pSQNHVP.jpg" alt="pSQNHVP.jpg" /></a></p><h1 id="6-best-chord-progressions-for-piano-beginners-easy"><a class="anchor" href="#6-best-chord-progressions-for-piano-beginners-easy">#</a> 6 BEST Chord Progressions for Piano Beginners EASY</h1><p><a href="https://imgse.com/i/pS17vQO"><img data-src="https://s1.ax1x.com/2023/01/17/pS17vQO.jpg" alt="pS17vQO.jpg" /></a><br /><a href="https://imgse.com/i/pS17jSK"><img data-src="https://s1.ax1x.com/2023/01/17/pS17jSK.jpg" alt="pS17jSK.jpg" /></a><br /><a href="https://imgse.com/i/pS17OW6"><img data-src="https://s1.ax1x.com/2023/01/17/pS17OW6.jpg" alt="pS17OW6.jpg" /></a></p><h1 id="simple-but-mesmerizing-piano-pattern-perfect-for-beginners"><a class="anchor" href="#simple-but-mesmerizing-piano-pattern-perfect-for-beginners">#</a> Simple-But-Mesmerizing Piano Pattern (PERFECT For Beginners)</h1><p><a href="https://imgse.com/i/pS1bYCt"><img data-src="https://s1.ax1x.com/2023/01/17/pS1bYCt.jpg" alt="pS1bYCt.jpg" /></a><br /><a href="https://imgse.com/i/pS1bwDg"><img data-src="https://s1.ax1x.com/2023/01/17/pS1bwDg.jpg" alt="pS1bwDg.jpg" /></a><br /><a href="https://imgse.com/i/pS1bdKS"><img data-src="https://s1.ax1x.com/2023/01/17/pS1bdKS.jpg" alt="pS1bdKS.jpg" /></a><br /><a href="https://imgse.com/i/pS1bUv8"><img data-src="https://s1.ax1x.com/2023/01/17/pS1bUv8.jpg" alt="pS1bUv8.jpg" /></a><br /><a href="https://imgse.com/i/pS1bNgf"><img data-src="https://s1.ax1x.com/2023/01/17/pS1bNgf.jpg" alt="pS1bNgf.jpg" /></a><br /><a href="https://imgse.com/i/pS1bt8P"><img data-src="https://s1.ax1x.com/2023/01/17/pS1bt8P.jpg" alt="pS1bt8P.jpg" /></a></p><h1 id="16beautiful-arpeggio-patterns-for-beginners-easy"><a class="anchor" href="#16beautiful-arpeggio-patterns-for-beginners-easy">#</a> (16)Beautiful Arpeggio Patterns for Beginners (Easy!!)</h1><p><a href="https://imgse.com/i/pS1qTeg"><img data-src="https://s1.ax1x.com/2023/01/17/pS1qTeg.jpg" alt="pS1qTeg.jpg" /></a><br /><a href="https://imgse.com/i/pS1qIOS"><img data-src="https://s1.ax1x.com/2023/01/17/pS1qIOS.jpg" alt="pS1qIOS.jpg" /></a><br /><a href="https://imgse.com/i/pS1q5y8"><img data-src="https://s1.ax1x.com/2023/01/17/pS1q5y8.jpg" alt="pS1q5y8.jpg" /></a><br /><a href="https://imgse.com/i/pS1q4Qf"><img data-src="https://s1.ax1x.com/2023/01/17/pS1q4Qf.jpg" alt="pS1q4Qf.jpg" /></a></p><h2 id=""><a class="anchor" href="#">#</a> </h2><p>choppy<br />adjective<br />UK  /ˈtʃɒp.i/ US  /ˈtʃɑː.pi/</p><p>(of sea, lakes, or rivers) with a lot of small, rough waves caused by the wind<br />（大海、湖泊或河流）波浪滔滔的，波瀾起伏的</p>]]></content>
      
      
      
        <tags>
            
            <tag> Music </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Math</title>
      <link href="/2023/01/07/Math/"/>
      <url>/2023/01/07/Math/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a class="anchor" href="#">#</a> </h1>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode</title>
      <link href="/2023/01/06/leetcode/"/>
      <url>/2023/01/06/leetcode/</url>
      
        <content type="html"><![CDATA[<h1 id="453-non-overlapping"><a class="anchor" href="#453-non-overlapping">#</a> 453 non-overlapping</h1><p>给定一个区间的集合 intervals ，其中 intervals [i] = [starti, endi] 。返回 需要移除区间的最小数量，使剩余区间互不重叠 。</p><p>示例 1:</p><p>输入: intervals = [[1,2],[2,3],[3,4],[1,3]]<br /> 输出: 1<br /> 解释：移除 [1,3] 后，剩下的区间没有重叠。<br />示例 2:</p><p>输入: intervals = [[1,2], [1,2], [1,2] ]<br /> 输出: 2<br /> 解释：你需要移除两个 [1,2] 来使剩下的区间没有重叠。<br />示例 3:</p><p>输入: intervals = [[1,2], [2,3] ]<br /> 输出: 0<br /> 解释：你不需要移除任何区间，因为它们已经是无重叠的了。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">eraseOverlapIntervals</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> intervals<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>            </pre></td></tr><tr><td data-num="4"></td><td><pre>        intervals<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>        cnt <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        preEnd <span class="token operator">=</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">for</span> start<span class="token punctuation">,</span>end <span class="token keyword">in</span> intervals<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token keyword">if</span> start <span class="token operator">>=</span> preEnd<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                preEnd <span class="token operator">=</span> end</pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                cnt<span class="token operator">+=</span><span class="token number">1</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                preEnd <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span>preEnd<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        </pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">return</span> cnt</pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LEET </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GRE</title>
      <link href="/2022/12/14/GRE/"/>
      <url>/2022/12/14/GRE/</url>
      
        <content type="html"><![CDATA[<h1 id="单词"><a class="anchor" href="#单词">#</a> 单词</h1><h2 id="odium-憎恨-厌恶-ˈəʊdiəm"><a class="anchor" href="#odium-憎恨-厌恶-ˈəʊdiəm">#</a> odium 憎恨 厌恶 [ˈəʊdi:əm]</h2><p>sibling 兄弟 or 姊妹<br /><strong> guzzle 狂饮 暴食</strong><br /> drawl 慢吞吞地说话<br /><strong> paranoia  偏执狂</strong><br /><strong> voracious 渴求的 贪婪的</strong><br /> elicit 引出 探出<br /> even 平坦的 相等的<br /> martial 战争的<br /> hegemony  [hɪˈdʒeməni:]  n. 霸权；领导权<br /> press 困扰<br /> instrumentalist<br />pragmatic  实际的 实用主义的<br /> gobble 贪婪的吃 狼吞虎咽<br /> parallelism 平行 类似<br /> waggish 诙谐的 滑稽的<br /> cogitate 慎重思考 思索<br /> lexical 词汇的 词典的</p><h2 id="repudiate-拒绝-抛弃-rɪˈpjudiˌeɪt"><a class="anchor" href="#repudiate-拒绝-抛弃-rɪˈpjudiˌeɪt">#</a> repudiate 拒绝 抛弃 [rɪˈpju:di:ˌeɪt]</h2><p>diatribe 抨击<br /> stowaway 偷乘者<br /> inanimate 无生命的<br /> pied 杂色的<br /> alluring 迷人的<br /> superfluity 多余 冗余<br /> impenitent 不悔悟的<br /> abbreviate 缩写<br /> sinuous 蜿蜒的 弯曲的<br /> tacit 默许的 不言而喻的<br /> frothy 起泡的<br /> lounge 休息室<br /> nonporous 无孔的 不渗透的<br /> dimension 维度<br /> embroider 刺绣</p><h2 id="conglomerate-kənˈglɔməˌreɪt-v聚集成团"><a class="anchor" href="#conglomerate-kənˈglɔməˌreɪt-v聚集成团">#</a> conglomerate [kənˈglɔməˌreɪt] v. 聚集成团</h2><p>aggrieve    使痛苦、受委屈、受伤害<br /> lure        引诱、诱惑 [luə]<br /> expel       排出、开除<br /> plague      困扰、纠缠、使烦恼<br /> resume      重新开始 继续<br /> conglomerate 聚集成团 [kənˈglɔməˌreɪt]</p><p>evasive     回避的<br /> illegitimate 不合法的 私生的 非婚生的<br /> smug        自命不凡的 自满的</p><p>leisureliness 悠然 从容 [leʒə'laɪnəs]<br /> ethos       [ˈi:ˌθɔs]  n. （个人、团体或民族）道德风貌，思潮...<br />facsimile   复制本 摹本 [fækˈsɪməli:]<br /> pigment     天然色素 干粉颜料<br /> firearm     枪支<br /> greenhorn   新手 傻瓜<br /> vintner     葡萄酒商贩 酒商；葡萄酒酿制者 [ˈvɪntnə]<br /> vendor      小贩<br /> nihilism    虚无主义 [ˈnaɪəˌlɪzəm]</p><h2 id=""><a class="anchor" href="#">#</a> </h2>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Random</title>
      <link href="/2022/11/27/Random/"/>
      <url>/2022/11/27/Random/</url>
      
        <content type="html"><![CDATA[<p>若是能避开猛烈的欢喜，自然就不会有悲烈的来袭</p><p>win + ctrl + Space --- 输入法切换</p><p>angsty adj （尤指對私人問題的）焦慮的，煩憂的<br /> an angsty teenage boy<br /> 一個焦慮煩躁的少年</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ch3_网络层</title>
      <link href="/2022/11/27/Ch3-%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
      <url>/2022/11/27/Ch3-%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a class="anchor" href="#概述">#</a> 概述</h1><p>网络层的主要任务是<strong>实现网络互连</strong>，进而<strong>实现数据包在网络之间的传输</strong>。</p><p>要实现网络层任务，需解决以下问题：</p><ol><li><p>网络层向运输层提供怎样的服务 (&quot;可靠传输&quot;or&quot;不可靠传输&quot;)</p></li><li><p>网络寻址问题</p></li><li><p>路由选择问题</p></li></ol><p>###internet 小写代表互联网，Internet 大写代表因特网。</p><p>因特网 (Internet) 是目前全世界用户数量最多的互联网，它使用 TCP/IP 协议栈。</p><p>由于 TCP/IP 协议栈的网络层使用网际协议 IP, 它是协议栈的核心协议，因此在 TCP/IP 协议栈中网络层常称网际层。</p><blockquote><p><a href="https://imgse.com/i/pSNcT3T"><img data-src="https://s1.ax1x.com/2023/01/26/pSNcT3T.jpg" alt="pSNcT3T.jpg" /></a></p></blockquote><h1 id="网络层提供的两种服务"><a class="anchor" href="#网络层提供的两种服务">#</a> 网络层提供的两种服务</h1><blockquote><p><a href="https://imgse.com/i/pSN2Sds"><img data-src="https://s1.ax1x.com/2023/01/26/pSN2Sds.jpg" alt="pSN2Sds.jpg" /></a></p></blockquote><h2 id="面向连接的虚电报服务"><a class="anchor" href="#面向连接的虚电报服务">#</a> 面向连接的虚电报服务</h2><p><strong>可靠通信由网络来保证</strong></p><p>必须建立<strong>网络层的连接 --- 虚电路 VC</strong>( Virtual Circuit )</p><p>通信双方沿着<strong>已建立的虚电路发送分组</strong></p><p>目的主机的地址仅在连接建立阶段使用，之后每个分组的首部只需携带一条虚电路的编号 (构成虚电路的每一段链路都有一个虚电路编号)</p><p>这种通信方式如果使用 可靠传输的网络协议，就可使所发送的分组最终正确到达接收方 (无差错按需到达、不丢失、不重复)</p><p><strong>通信结束后 ，需要释放之前所建立的虚电路</strong></p><p>很多广域分组交换网都使用面向连接的虚电路服务。如，曾经的 X.25 和逐渐过时的帧中继 FR、异步传输模式 ATM...</p><h2 id="无连接的数据报服务"><a class="anchor" href="#无连接的数据报服务">#</a> 无连接的数据报服务</h2><p>可靠通信应当由用户主机来保证</p><p>不需要建立网络层连接</p><p>每个分组可走不同的路径</p><p>每个分组的首部必须携带目的主机的完整地址</p><p>这种通信方式所传送的分组可能误码、丢失、重复、失序</p><p>由于网络本身不提供端到端的可靠传输服务，这就是网络中的路由器可以做的比较简单，且价格低廉 (与电信网的交换机比较)。</p><p>因特网采用了这种设计思想，也就是将复杂的网络处理功能置于因特网的边缘 (用户主机和其内部的运输层), 而将相对简单的尽最大努力的分组交付功能置于因特网核心。</p><h1 id="ipv4地址概述"><a class="anchor" href="#ipv4地址概述">#</a> IPv4 地址概述</h1><h2 id="概述-2"><a class="anchor" href="#概述-2">#</a> 概述</h2><p><strong>IPv4 地址</strong>就是给因特网 (Internet) 上的<strong>每一台主机 (or 路由器) 的每一个接口</strong>分配一个在全世界范围内是唯一的 32 比特的标识符</p><p>采用<strong>点分十进制</strong>表示方法<br /><a href="https://imgse.com/i/pSN2wfP"><img data-src="https://s1.ax1x.com/2023/01/26/pSN2wfP.jpg" alt="pSN2wfP.jpg" /></a></p><h2 id="分类的ipv4地址"><a class="anchor" href="#分类的ipv4地址">#</a> 分类的 IPv4 地址</h2><p>只有 A 类、B 类、C 类 地址 可分配给网络中的主机 or 路由器的各接口</p><p>主机号 全 0 的地址是网络地址，不能分配给主机 or 路由器的各接口</p><p>主机号 全 1 的地址是广播地址，不能分配给主机 or 路由器的各接口</p><h3 id="a类地址"><a class="anchor" href="#a类地址">#</a> A 类地址</h3><p><strong>最小网络号 0、不指派</strong><br />第一个可指派的 IP ： 1.0.0.0</p><p><strong>最大网络号 127, 不指派：</strong><br />最小的本地环回测试地址 127.0.0.1</p><p>最大的本地环回测试地址 127.255.255.254</p><p>可指派的网络数量 128- 2 = 126 (- 最小网络号、最大网络号)</p><p>每个网络中可分配的 IP 地址数量 2<sup>24</sup>- 2 (除主机号全 0 的地址 全 1 的广播地址)<br /><a href="https://imgse.com/i/pSN4mPs"><img data-src="https://s1.ax1x.com/2023/01/26/pSN4mPs.jpg" alt="pSN4mPs.jpg" /></a></p><h3 id="b类地址"><a class="anchor" href="#b类地址">#</a> B 类地址</h3><p>开头得 10</p><p>最小网络号即第一个可指派的网络地址 128.0.0.0<br /> 最大网络号即最后一个可指派网络地址 127.255.0.0</p><p>可指派网络数量 2<sup>14</sup><br /> 每个网络中可分配的 IP 地址数量 2<sup>16</sup>- 2 (除主机号全 0 的地址 全 1 的广播地址)<br /><a href="https://imgse.com/i/pSN4Z5j"><img data-src="https://s1.ax1x.com/2023/01/26/pSN4Z5j.jpg" alt="pSN4Z5j.jpg" /></a></p><h3 id="c类地址"><a class="anchor" href="#c类地址">#</a> C 类地址</h3><p>开头得 110</p><p>最小网络号即第一个可指派的网络地址  192.0.0.0<br /> 最大网络号即最后一个可指派网络地址  223.255.255.0</p><p>可指派网络数量 2<sup>22</sup><br /> 每个网络中可分配的 IP 地址数量 2<sup>8</sup>- 2 (除主机号全 0 的地址 全 1 的广播地址)<br /><a href="https://imgse.com/i/pSN4VaQ"><img data-src="https://s1.ax1x.com/2023/01/26/pSN4VaQ.jpg" alt="pSN4VaQ.jpg" /></a></p><h3 id="sum"><a class="anchor" href="#sum">#</a> SUM</h3><p><a href="https://imgse.com/i/pSN4EVg"><img data-src="https://s1.ax1x.com/2023/01/26/pSN4EVg.jpg" alt="pSN4EVg.jpg" /></a><br /><a href="https://imgse.com/i/pSN4kqS"><img data-src="https://s1.ax1x.com/2023/01/26/pSN4kqS.jpg" alt="pSN4kqS.jpg" /></a><br /><a href="https://imgse.com/i/pSN4nGn"><img data-src="https://s1.ax1x.com/2023/01/26/pSN4nGn.jpg" alt="pSN4nGn.jpg" /></a><br /><a href="https://imgse.com/i/pSN4u2q"><img data-src="https://s1.ax1x.com/2023/01/26/pSN4u2q.jpg" alt="pSN4u2q.jpg" /></a></p><h2 id="划分子网的ipv4地址"><a class="anchor" href="#划分子网的ipv4地址">#</a> 划分子网的 IPv4 地址</h2><blockquote><p>32 比特的子网掩码可以表明 分类 IP 地址的主机号部分被借用了几个比特作为子网号<a href="https://imgse.com/i/pSNICB8"><img data-src="https://s1.ax1x.com/2023/01/26/pSNICB8.jpg" alt="pSNICB8.jpg" /></a></p></blockquote><ol><li>子网掩码使用<strong>连续的 1 来对应网络号和子网号</strong></li><li>子网掩码使用<strong>连续的 0 来对应主机号</strong></li><li>将划分子网的<strong> IPv4 地址</strong>与其相应的<strong>子网掩码</strong>进行<strong>逻辑与运算</strong>就可得到 IPv4 地址<strong>所在子网的网络地址</strong></li></ol><p><a href="https://imgse.com/i/pSNouRA"><img data-src="https://s1.ax1x.com/2023/01/26/pSNouRA.jpg" alt="pSNouRA.jpg" /></a><br /><a href="https://imgse.com/i/pSNonGd"><img data-src="https://s1.ax1x.com/2023/01/26/pSNonGd.jpg" alt="pSNonGd.jpg" /></a><br /><a href="https://imgse.com/i/pSNomPH"><img data-src="https://s1.ax1x.com/2023/01/26/pSNomPH.jpg" alt="pSNomPH.jpg" /></a></p><p><a href="https://imgse.com/i/pSNoZIe"><img data-src="https://s1.ax1x.com/2023/01/26/pSNoZIe.jpg" alt="pSNoZIe.jpg" /></a></p><h3 id="默认子网掩码"><a class="anchor" href="#默认子网掩码">#</a> 默认子网掩码</h3><p><a href="https://imgse.com/i/pSNoVaD"><img data-src="https://s1.ax1x.com/2023/01/26/pSNoVaD.jpg" alt="pSNoVaD.jpg" /></a></p><h2 id="无分类编址的ipv4地址"><a class="anchor" href="#无分类编址的ipv4地址">#</a> 无分类编址的 IPv4 地址</h2><p><strong>CIDR(Classless Inter-Domain Routing)</strong><br /><strong> 无分类域间路由选择</strong></p><ul><li>CIDR 消除了传统的 A、B、C 类地址，以及划分子网的概念；</li><li>CIDR 可以更加有效地分配 IPv4 的地址空间，并且可以在新的 IPv6 使用之前允许因特网的规模继续增长</li></ul><p><a href="https://imgse.com/i/pSN7Uuq"><img data-src="https://s1.ax1x.com/2023/01/26/pSN7Uuq.jpg" alt="pSN7Uuq.jpg" /></a><br /><a href="https://imgse.com/i/pSN7tvn"><img data-src="https://s1.ax1x.com/2023/01/26/pSN7tvn.jpg" alt="pSN7tvn.jpg" /></a></p><h3 id="路由聚合"><a class="anchor" href="#路由聚合">#</a> 路由聚合</h3><p>找共同前缀</p><p><a href="https://imgse.com/i/pSN7Ygs"><img data-src="https://s1.ax1x.com/2023/01/26/pSN7Ygs.jpg" alt="pSN7Ygs.jpg" /></a><br /><a href="https://imgse.com/i/pSN7J3j"><img data-src="https://s1.ax1x.com/2023/01/26/pSN7J3j.jpg" alt="pSN7J3j.jpg" /></a><br /><a href="https://imgse.com/i/pSN7GCQ"><img data-src="https://s1.ax1x.com/2023/01/26/pSN7GCQ.jpg" alt="pSN7GCQ.jpg" /></a></p><h2 id="应用规划"><a class="anchor" href="#应用规划">#</a> 应用规划</h2><h3 id="flsm定长的子网掩码"><a class="anchor" href="#flsm定长的子网掩码">#</a> FLSM 定长的子网掩码</h3><p><strong>Fixed Length Subnet Mask</strong></p><p>使用同一个子网掩码来划分子网</p><p>每个子网所分配的 IP 地址数量相同，造成 IP 地址浪费</p><p>子网划分方式不灵活：只能划分出 2<sup>n</sup> 个子网<br /> (n 是从主机号部分借用的 用来作为子网号的的比特数量)</p><p><a href="https://imgse.com/i/pSwV90I"><img data-src="https://s1.ax1x.com/2023/01/30/pSwV90I.jpg" alt="pSwV90I.jpg" /></a></p><h3 id="vlsm变长的子网掩码"><a class="anchor" href="#vlsm变长的子网掩码">#</a> VLSM 变长的子网掩码</h3><p><strong>Variable Length Subnet Mask</strong></p><p>使用不同的子网掩码来划分子网</p><p>每个子网所分配的 IP 地址数量可以不同，尽可能减少对 IP 地址的浪费</p><p>子网划分方式灵活：可以按需分配</p><p><a href="https://imgse.com/i/pSwEzXd"><img data-src="https://s1.ax1x.com/2023/01/30/pSwEzXd.jpg" alt="pSwEzXd.jpg" /></a><br /><a href="https://imgse.com/i/pSwVpnA"><img data-src="https://s1.ax1x.com/2023/01/30/pSwVpnA.jpg" alt="pSwVpnA.jpg" /></a></p><h1 id="ip数据报の发送和转发过程"><a class="anchor" href="#ip数据报の发送和转发过程">#</a> IP 数据报の发送和转发过程</h1><p>IP 数据报の发送和转发过程包含以下 2 部分:</p><ul><li>主机发送 IP 数据报</li><li>路由器转发 IP 数据报</li></ul><p>！😮声明🤦‍♂️：为了将重点放在 TCP/IP 协议栈的网际层发送 and 转发 IP 数据报的过程上，在之后的举例中，我们<strong>忽略</strong>使用<strong> ARP 协议来获取目的主机 or 路由器的 MAC 地址</strong>的过程以及<strong>以太网自学习和帧转发的过程</strong>。</p><ol><li>主机发送 IP 数据报：<br />判断目的主机是否与自己在同一网络：</li></ol><p>若在同一网络，则属于<strong>直接交付</strong>；<br /> 若不在同一网络，则属于<strong>间接交付</strong>，传输给主机所在网络的<strong>默认网关</strong> (路由器), 由默认网关帮忙转发；</p><ol start="2"><li>路由器转发 IP 数据报</li></ol><ul><li><ol><li>检查 IP 数据报首部是否出错：<br />若出错，则直接丢弃该 IP 数据报 并通告源主机<br />若未出错，则转发</li></ol></li><li><ol start="2"><li>根据 IP 数据报的目的地址在路由表中查找匹配的条目：<br />若找到匹配的条目，则转发给条目中指示的吓一跳<br />若找不到，则丢弃该 ip 数据报并通告源主机</li></ol></li></ul><h2 id="举例"><a class="anchor" href="#举例">#</a> 【举例】</h2><h3 id="源主机如何知道目的主机是否与自己在同一网络中"><a class="anchor" href="#源主机如何知道目的主机是否与自己在同一网络中">#</a> 源主机如何知道目的主机是否与自己在同一网络中？</h3><p>C-&gt;F<br /> 用 C 的掩码与 C 的 ip and F 的 ip 相与得到两个网络地址<br />如果两个目的网络地址相同<br /><a href="https://imgse.com/i/pSwlbKf"><img data-src="https://s1.ax1x.com/2023/01/30/pSwlbKf.jpg" alt="pSwlbKf.jpg" /></a><br /><a href="https://imgse.com/i/pSwlT2t"><img data-src="https://s1.ax1x.com/2023/01/30/pSwlT2t.jpg" alt="pSwlT2t.jpg" /></a></p><h3 id="主机c如何知道-路由器r的存在"><a class="anchor" href="#主机c如何知道-路由器r的存在">#</a> 主机 C 如何知道 路由器 R 的存在？</h3><p>与接口 0 的默认网关 (即接口 0 的 ip) 相同<br /><a href="https://imgse.com/i/pSwl7xP"><img data-src="https://s1.ax1x.com/2023/01/30/pSwl7xP.jpg" alt="pSwl7xP.jpg" /></a></p><h3 id="路由器收到ip数据报后如何转发"><a class="anchor" href="#路由器收到ip数据报后如何转发">#</a> 路由器收到 ip 数据报后如何转发？</h3><ol><li>检查 IP 数据报首部是否出错：<br />若出错，则直接丢弃该 IP 数据报 并通告源主机<br />若未出错，则转发</li><li>根据 IP 数据报的目的地址在路由表中查找匹配的条目：<br />若找到匹配的条目，则转发给条目中指示的吓一跳<br />若找不到，则丢弃该 ip 数据报并通告源主机</li></ol><p><a href="https://imgse.com/i/pSwlo8I"><img data-src="https://s1.ax1x.com/2023/01/30/pSwlo8I.jpg" alt="pSwlo8I.jpg" /></a><br /><a href="https://imgse.com/i/pSwlIPA"><img data-src="https://s1.ax1x.com/2023/01/30/pSwlIPA.jpg" alt="pSwlIPA.jpg" /></a><br /><a href="https://imgse.com/i/pSwlqr8"><img data-src="https://s1.ax1x.com/2023/01/30/pSwlqr8.jpg" alt="pSwlqr8.jpg" /></a><br /> 路由表中的 目的网络为目的 ip 与原掩码相与的 目的网络地址</p><h3 id="路由器隔离广播域"><a class="anchor" href="#路由器隔离广播域">#</a> 路由器隔离广播域</h3><p><a href="https://imgse.com/i/pSw3A6P"><img data-src="https://s1.ax1x.com/2023/01/30/pSw3A6P.jpg" alt="pSw3A6P.jpg" /></a><br /><a href="https://imgse.com/i/pSw3klt"><img data-src="https://s1.ax1x.com/2023/01/30/pSw3klt.jpg" alt="pSw3klt.jpg" /></a></p><h2 id="题目"><a class="anchor" href="#题目">#</a> 题目</h2><p><a href="https://imgse.com/i/pSw3360"><img data-src="https://s1.ax1x.com/2023/01/30/pSw3360.jpg" alt="pSw3360.jpg" /></a><br /><a href="https://imgse.com/i/pSw31lq"><img data-src="https://s1.ax1x.com/2023/01/30/pSw31lq.jpg" alt="pSw31lq.jpg" /></a></p><p><a href="https://imgse.com/i/pSwdk1e"><img data-src="https://s1.ax1x.com/2023/01/30/pSwdk1e.jpg" alt="pSwdk1e.jpg" /></a></p><h1 id="静态路由配置路由环路"><a class="anchor" href="#静态路由配置路由环路">#</a> 静态路由配置 &amp; 路由环路</h1><p>#静态路由配置及其可能产生的路由环路问题</p><ol><li>静态路由配置是指 用户 or 网络管理员 使用路由器的相关命令给路由器<strong>人工配置路由表</strong>。</li></ol><ul><li>方式简单、开销小<br />但不能及时适应网络状态 (流量、拓扑～) 的变化</li><li>一般只在小规模网络中采用</li></ul><ol start="2"><li>使用静态路由配置可能出现以下导致产生<strong>路由环路</strong>的错误</li></ol><ul><li>配置错误</li><li>聚合了不存在的网络</li><li>网络故障</li></ul><ol start="3"><li>路由条目的类型</li></ol><ul><li>直连网络</li><li>静态路由 (人工配置)</li><li>动态路由 (路由选择协议)</li></ul><ol start="4"><li>特殊的静态路由条目：</li></ol><ul><li>默认路由 (目的网络为 0.0.0.0, 地址掩码 0.0.0.0)</li><li>特定主机路由 (目的网络为特定主机的 IP 地址，地址掩码为 255.255.255.255)</li><li>黑洞路由 (下一条为 null0)</li></ul><h2 id="例-静态路由配置"><a class="anchor" href="#例-静态路由配置">#</a> 例 - 静态路由配置</h2><h3 id="默认路由"><a class="anchor" href="#默认路由">#</a> 默认路由</h3><p><a href="https://imgse.com/i/pSw09zD"><img data-src="https://s1.ax1x.com/2023/01/30/pSw09zD.jpg" alt="pSw09zD.jpg" /></a><br /><a href="https://imgse.com/i/pSw0SJK"><img data-src="https://s1.ax1x.com/2023/01/30/pSw0SJK.jpg" alt="pSw0SJK.jpg" /></a><br /><a href="https://imgse.com/i/pSwwjd1"><img data-src="https://s1.ax1x.com/2023/01/30/pSwwjd1.jpg" alt="pSwwjd1.jpg" /></a></p><h3 id="特定主机路由"><a class="anchor" href="#特定主机路由">#</a> 特定主机路由</h3><p><a href="https://imgse.com/i/pSwwzi6"><img data-src="https://s1.ax1x.com/2023/01/30/pSwwzi6.jpg" alt="pSwwzi6.jpg" /></a><br /><a href="https://imgse.com/i/pSwwvIx"><img data-src="https://s1.ax1x.com/2023/01/30/pSwwvIx.jpg" alt="pSwwvIx.jpg" /></a></p><h2 id="路由环路"><a class="anchor" href="#路由环路">#</a> 路由环路</h2><h3 id="静态路由配置错误导致的路由环路"><a class="anchor" href="#静态路由配置错误导致的路由环路">#</a> 静态路由配置错误导致的路由环路</h3><p><a href="https://imgse.com/i/pSw0xmj"><img data-src="https://s1.ax1x.com/2023/01/30/pSw0xmj.jpg" alt="pSw0xmj.jpg" /></a><br /><a href="https://imgse.com/i/pSw0jXQ"><img data-src="https://s1.ax1x.com/2023/01/30/pSw0jXQ.jpg" alt="pSw0jXQ.jpg" /></a><br /><a href="https://imgse.com/i/pSw0z0s"><img data-src="https://s1.ax1x.com/2023/01/30/pSw0z0s.jpg" alt="pSw0z0s.jpg" /></a></p><h3 id="聚合了不存在的网络导致路由环路"><a class="anchor" href="#聚合了不存在的网络导致路由环路">#</a> 聚合了不存在的网络导致路由环路</h3><p><a href="https://imgse.com/i/pSw0X6g"><img data-src="https://s1.ax1x.com/2023/01/30/pSw0X6g.jpg" alt="pSw0X6g.jpg" /></a><br /><a href="https://imgse.com/i/pSw0O1S"><img data-src="https://s1.ax1x.com/2023/01/30/pSw0O1S.jpg" alt="pSw0O1S.jpg" /></a><br /><a href="https://imgse.com/i/pSwBS7n"><img data-src="https://s1.ax1x.com/2023/01/30/pSwBS7n.jpg" alt="pSwBS7n.jpg" /></a><br /><a href="https://imgse.com/i/pSwB9kq"><img data-src="https://s1.ax1x.com/2023/01/30/pSwB9kq.jpg" alt="pSwB9kq.jpg" /></a><br /><a href="https://imgse.com/i/pSwBCt0"><img data-src="https://s1.ax1x.com/2023/01/30/pSwBCt0.jpg" alt="pSwBCt0.jpg" /></a></p><h3 id="网络故障导致路由环路"><a class="anchor" href="#网络故障导致路由环路">#</a> 网络故障导致路由环路</h3><p><a href="https://imgse.com/i/pSwBRNq"><img data-src="https://s1.ax1x.com/2023/01/30/pSwBRNq.jpg" alt="pSwBRNq.jpg" /></a></p><h1 id="路由选择协议"><a class="anchor" href="#路由选择协议">#</a> 路由选择协议</h1><h2 id="概述-3"><a class="anchor" href="#概述-3">#</a> 概述</h2><h3 id="静态路由选择"><a class="anchor" href="#静态路由选择">#</a> 静态路由选择</h3><p>由人工配置的 网络路由、默认路由、特定主机路由、黑洞路由... 都属于静态路由</p><p>方式简单、开销小<br />但不能及时石英网络状态的变化 (流量、拓扑等)</p><p>一般只在小规模网络中采用</p><h3 id="动态路由选择"><a class="anchor" href="#动态路由选择">#</a> 动态路由选择</h3><p>路由器通过路由选择协议 <strong>自动获取路由信息</strong>。</p><p>比较复杂、开销大<br />能较好地适应网络状态的变化</p><p>适用于大规模网络</p><h3 id="主要特点"><a class="anchor" href="#主要特点">#</a> 主要特点</h3><p>## 因特网所采用的路由选择协议的主要特点</p><ol><li>自适应<br />动态路由选择，能较好地适应网络状态的变化</li><li>分布式<br />路由器之间交换路由信息</li><li>分层次<br />将整个因特网划分为许多较小的自治系统 AS (Autonomous System)</li></ol><h3 id="分层次的"><a class="anchor" href="#分层次的">#</a> 分层次的</h3><p>因特网采用分层次的路由选择协议<br /><img data-src="https://img1.imgtp.com/2023/01/30/VIRFkcpb.jpg" alt="10.jpg" /></p><h3 id="常见路由选择协议"><a class="anchor" href="#常见路由选择协议">#</a> 常见路由选择协议</h3><p><img data-src="https://img1.imgtp.com/2023/01/30/QwBrdxb8.jpg" alt="-11.jpg" /></p><h3 id="路由器基本结构"><a class="anchor" href="#路由器基本结构">#</a> 路由器基本结构</h3><p><img data-src="https://img1.imgtp.com/2023/01/30/OsSZWkMo.jpg" alt="11.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/01/30/K88LQN8V.jpg" alt="12.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/01/30/ue4waexF.jpg" alt="13.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/01/30/XrbMjupJ.jpg" alt="14.jpg" /></p><h2 id="rip的基本工作原理"><a class="anchor" href="#rip的基本工作原理">#</a> RIP 的基本工作原理</h2><p>路由信息协议 RIP</p><p>RIP 要求 AS 内的每一个路由器都要维护从它自己到 AS 内其它每一个网络的距离记录。<br />这是一组距离，称为 &quot;<strong> 距离向量 D-V (Distance-Vector)</strong>&quot;</p><p>RIP 使用<strong>跳数</strong> (Hop Count) 作为度量 (Metric) 来衡量到达目的网络的距离：</p><ul><li>路由器到直连网络的距离定义为 1</li><li>路由器到非直连网络的距离定义为所<strong>经过的路由器数目 + 1</strong></li><li>允许一条路径最多只能包含 15 个路由器。<br />距离 = 16 时、等价于不可达<br /> thus,RIP 只适用于小型互联网</li></ul><p><img data-src="https://img1.imgtp.com/2023/01/30/Xpcf8YrX.jpg" alt="15.jpg" /></p><h3 id="rip基本工作过程"><a class="anchor" href="#rip基本工作过程">#</a> RIP 基本工作过程</h3><p>若干次交换更新后，每个路由器都知道到达本 AS 内各网络的最短距离和下一跳地址，称为<strong>收敛</strong>。<br /><img data-src="https://img1.imgtp.com/2023/01/30/7fzJb4uf.jpg" alt="16.jpg" /></p><h3 id="ripの路由条目的更新规则"><a class="anchor" href="#ripの路由条目的更新规则">#</a> RIP の路由条目的更新规则</h3><p><img data-src="https://img1.imgtp.com/2023/01/30/Z26yR2sE.jpg" alt="17.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/01/30/fu91j7If.jpg" alt="18.jpg" /></p><h3 id="rip存在坏消息传播得慢的问题"><a class="anchor" href="#rip存在坏消息传播得慢的问题">#</a> RIP 存在 &quot;坏消息传播得慢&quot; 的问题</h3><p>环路问题<br />距离无穷技术问题</p><ul><li>限制最大路径距离为 15,(16 为不可达)</li><li>当路由表变化时就立即发送更新报文 (&quot;触发更新&quot;), 而不仅是周期性发送</li><li>让路由器记录收到某特定路由信息的接口，而不让同一路由信息再通过此接口反方向发送 (&quot;水平分割&quot;)？<br /><img data-src="https://img1.imgtp.com/2023/01/30/a07aawBi.jpg" alt="19.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/01/30/sidbLTae.jpg" alt="20.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/01/30/7D3LDPpq.jpg" alt="21.jpg" /></li></ul><h2 id="ospf的基本工作原理"><a class="anchor" href="#ospf的基本工作原理">#</a> OSPF 的基本工作原理</h2><p>开放最短路径优先 - 使用了 Dijkstra 的最短路径算法 SPF<br />open shortest path first</p><p>OSPF 是基于<strong>链路状态</strong>的，而不是 RIP 那样基于向量的</p><p>OSPF 采用 SPF 算法计算路由，从算法上保证<strong>不会产生路由环路</strong></p><p>OSPF 不限制网络规模，更新效率高，收敛速度快。</p><blockquote><p>链路状态:<br />☞本路由器都和哪些路由器相邻，以及相应链路的 &quot;代价&quot;(cost)</p></blockquote><p>&quot;代价&quot; 用来表示费用、距离、时延、带宽、...<br /> 由网络管理人员来确定</p><p><img data-src="https://img1.imgtp.com/2023/01/31/9AExQdl2.jpg" alt="22.jpg" /></p><h3 id="ospf相邻路由器之间通过交互问候hello分组建立和维护邻居关系"><a class="anchor" href="#ospf相邻路由器之间通过交互问候hello分组建立和维护邻居关系">#</a> OSPF 相邻路由器之间通过交互<strong>问候 (hello) 分组</strong>，建立和维护<strong>邻居关系</strong>。</h3><ul><li>hello 分组封装在 IP 数据包中，发往组播地址 224.0.0.5;</li><li>发生周期为 10 秒</li><li>40 秒未收到来自邻居路由器的 hello 分组，则认为该邻居不可达<br /><img data-src="https://img1.imgtp.com/2023/01/31/BM2CTh96.jpg" alt="23.jpg" /></li></ul><h3 id="使用ospf的每个路由器都会产生链路状态通告lsa"><a class="anchor" href="#使用ospf的每个路由器都会产生链路状态通告lsa">#</a> 使用 OSPF 的每个路由器都会产生<strong>链路状态通告 LSA</strong></h3><p>link state advertisement</p><p>LSA:<br /> 直连网络的链路状态信息<br />邻居路由器的链路状态信息</p><p>LSA 被封装在<strong>链路状态更新分组 LSU</strong> 中，采用<strong>洪泛法</strong>发送。</p><p>使用 OSPF 的每个路由器都有一个链路状态数据库 LSDB, 用于存储 LSA。</p><p>通过各路由器洪泛发送封装有 LSA 的 LSU 分组，各路由器的 LSDB 最终将达到一致<br /><img data-src="https://img1.imgtp.com/2023/01/31/I1UY6TyK.jpg" alt="24.jpg" /></p><h3 id="基于lsdb进行spf计算构建rx-ry的最短路径即构建各自路由表"><a class="anchor" href="#基于lsdb进行spf计算构建rx-ry的最短路径即构建各自路由表">#</a> 基于 LSDB 进行 SPF 计算，构建 R<sub>x</sub> -&gt; R<sub>y</sub> 的最短路径，即构建各自路由表</h3><p><img data-src="https://img1.imgtp.com/2023/01/31/00veuMbi.jpg" alt="25.jpg" /></p><h3 id="ospf有以下5种分组类型"><a class="anchor" href="#ospf有以下5种分组类型">#</a> OSPF 有以下 5 种分组类型</h3><blockquote><p>类型一：问候 (hello) 分组<br />用来发现和维护邻居路由器的可达性</p></blockquote><blockquote><p>类型二：数据库描述 (D Description) 分组<br />向邻居路由器给出自己的链路状态数据库中的所有链路状态项目的摘要信息</p></blockquote><blockquote><p>类型三：链路状态请求 (LSR) 分组<br />向邻居路由器请求发送某些链路状态项目的详细信息</p></blockquote><blockquote><p>类型四：链路状态更新 (LS Update) 分组<br />路由器使用这种分组将其链路状态进行洪泛发送，即用洪泛法对全网更新路由状态</p></blockquote><blockquote><p>类型五：链路状态确认 (LSA acknowledgement) 分组<br />是对链路状态更新分组的确认分组</p></blockquote><h3 id="ospf工作过程"><a class="anchor" href="#ospf工作过程">#</a> OSPF 工作过程</h3><p><img data-src="https://img1.imgtp.com/2023/01/31/lBGAAQxY.jpg" alt="26.jpg" /></p><h3 id="ospf-在多点接入网络中路由邻居关系的建立"><a class="anchor" href="#ospf-在多点接入网络中路由邻居关系的建立">#</a> OSPF 在多点接入网络中路由邻居关系的建立</h3><p><img data-src="https://img1.imgtp.com/2023/01/31/j5QbXAJ8.jpg" alt="27.jpg" /></p><h3 id="ospf自治系统再划分区域area"><a class="anchor" href="#ospf自治系统再划分区域area">#</a> OSPF 自治系统再划分，区域 (Area)</h3><p>区域内路由器 IR<br /> 区域边界路由器 ABR (area border router)<br /> 主干路由器 BBR (backbone router)<br /> 自治系统边界路由器 ASBR (AS border)</p><p><img data-src="https://img1.imgtp.com/2023/01/31/coXYLySn.jpg" alt="28.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/01/31/r0cmcG9V.jpg" alt="29.jpg" /></p><h1 id="bgp边界网关协议的基本工作原理"><a class="anchor" href="#bgp边界网关协议的基本工作原理">#</a> BGP 边界网关协议的基本工作原理</h1><h2 id="basic"><a class="anchor" href="#basic">#</a> basic</h2><p>外部网关协议 EGP (例如边界网关协议 BGP)</p><ul><li>在不同的自治系统内，度量路由的 &quot;代价&quot;(距离、带宽、费用等) 可能不同<br />因此，对于自治系统之间的路由选择，使用代价作为度量来寻找最佳路由是不行的。</li></ul><p><img data-src="https://img1.imgtp.com/2023/01/31/0cEz7m8o.jpg" alt="30.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/01/31/C20Dnxqv.jpg" alt="31.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/01/31/pbD7AlvT.jpg" alt="32.jpg" /></p><h2 id="bgp发言人"><a class="anchor" href="#bgp发言人">#</a> BGP 发言人</h2><p>配置 BGP 时，每个 AS 的管理员至少选择一个路由器作为该 AS 的 &quot;<strong>BGP 发言人</strong> &quot;</p><p>不同 AS 的 BGP 发言人 要交换路由信息，首先必须建立 TCP 连接，端口号为 179</p><ol><li>在此 TCP 连接上 交换 BGP 报文以建立<strong> BGP 会话</strong></li><li>利用 BGP 会话交换路由信息 (ru, 增加新的路由、撤销过时的路由、报告出错的情况等)</li><li>使用 TCP 连接交换路由信息的两个 BGP 发言人，彼此称为对方的<strong>邻站</strong> (neighbor) or <strong>对等站</strong> (peer)</li></ol><p><img data-src="https://img1.imgtp.com/2023/01/31/WoxyIpn8.jpg" alt="33.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/01/31/sdN9UGlt.jpg" alt="34.jpg" /></p><h2 id="bgp适用于多级结构的因特网"><a class="anchor" href="#bgp适用于多级结构的因特网">#</a> BGP 适用于多级结构的因特网</h2><p><img data-src="https://img1.imgtp.com/2023/01/31/HLIJYBCE.jpg" alt="35.jpg" /></p><h2 id="bgp-4有以下4种报文"><a class="anchor" href="#bgp-4有以下4种报文">#</a> BGP-4 有以下 4 种报文</h2><blockquote><p>OPEN<br />UPDATE<br />KEEPALIVE (保活)<br />NOTIFICATION<br /><img data-src="https://img1.imgtp.com/2023/01/31/dpwKek7P.jpg" alt="36.jpg" /></p></blockquote><h2 id="题目-2"><a class="anchor" href="#题目-2">#</a> 题目</h2><blockquote><p>BGP-4 报文被封装在<strong> TCP 报文段</strong>中进行传输<br />传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议，<br />传输控制协议（TCP，Transmission Control Protocol）是为了在不可靠的互联网络上提供可靠的端到端字节流而专门设计的一个传输协议。</p></blockquote><p><img data-src="https://img1.imgtp.com/2023/01/31/vLl84mGo.jpg" alt="37.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/01/31/8jhiySVd.jpg" alt="38.jpg" /></p><h1 id="ipv4数据报的首部格式"><a class="anchor" href="#ipv4数据报的首部格式">#</a> IPV4 数据报的首部格式</h1><h2 id="1"><a class="anchor" href="#1">#</a> 1</h2><p><img data-src="https://img1.imgtp.com/2023/01/31/zy0RiMZD.jpg" alt="40.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/01/31/IY6MVdtj.jpg" alt="41.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/01/31/hYwHJIWn.jpg" alt="39.jpg" /></p><h2 id="ip数据报分片"><a class="anchor" href="#ip数据报分片">#</a> IP 数据报分片</h2><p>以太网规定 MTU=1500 字节</p><p>这三个字段共同用于 IP 数据报分片</p><ol><li>标识<br /> 16bit、属于同一个数据报的各分片数据报应该具有相同的标识。</li></ol><pre><code>count ++计数数据报 数</code></pre><ol start="2"><li><p>标志<br /> 3bit、1+1+1</p><ul><li>DF 位：1 不允许分片、0 允许分片</li><li>MF 位：1 “后面还有分片”、0 “这是最后一个分片”</li><li>保留位：必须 = 0</li></ul></li><li><p>片偏移<br /> 13bit、指出分片数据报的数据载荷部分偏移其在原数据报的位置有多少个单位</p><p><strong>以 8 字节为单位</strong><br /><img data-src="https://img1.imgtp.com/2023/01/31/Sxksd3zk.jpg" alt="42.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/01/31/HTUYLzwQ.jpg" alt="43.jpg" /></p></li></ol><p>举例：</p><p><img data-src="https://img1.imgtp.com/2023/01/31/SGz9orhD.jpg" alt="44.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/01/31/eJ95ZWoi.jpg" alt="45.jpg" /></p><h2 id="ttl-protocol-checksum"><a class="anchor" href="#ttl-protocol-checksum">#</a> TTL、protocol、checksum</h2><h3 id="生存时间ttl"><a class="anchor" href="#生存时间ttl">#</a> 生存时间 TTL:</h3><p>8bit,</p><p>now 以 &quot;跳数&quot; 为单位，l 路由器转发 IP 数据报时，将 IP 数据报首部中该字段的值 - 1, 若不为 0 就转发，否则就丢弃。</p><p>作用：防止 IP 数据报在网络中永久兜圈</p><p><img data-src="https://img1.imgtp.com/2023/01/31/imPwPkA6.jpg" alt="46.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/01/31/09egb0g4.jpg" alt="47.jpg" /></p><h3 id="协议"><a class="anchor" href="#协议">#</a> 协议</h3><p>8bit<br /><img data-src="https://img1.imgtp.com/2023/01/31/ceG2vAKk.jpg" alt="48.jpg" /></p><h3 id="首部检验和"><a class="anchor" href="#首部检验和">#</a> 首部检验和</h3><p>16bit<br /><img data-src="https://img1.imgtp.com/2023/01/31/LRWOZDcJ.jpg" alt="49.jpg" /></p><h2 id="源-目的-ip地址"><a class="anchor" href="#源-目的-ip地址">#</a> 源、目的 IP 地址</h2><p><img data-src="https://img1.imgtp.com/2023/01/31/Cgyh6jjc.jpg" alt="50.jpg" /></p><h2 id="题目-3"><a class="anchor" href="#题目-3">#</a> 【题目】</h2><p><img data-src="https://img1.imgtp.com/2023/01/31/950mw0Cd.jpg" alt="54.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/01/31/n6lWngc6.jpg" alt="53.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/01/31/OVJyfA31.jpg" alt="55.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/01/31/QpHoGkgr.jpg" alt="56.jpg" /></p><h1 id="icmp网际控制报文协议"><a class="anchor" href="#icmp网际控制报文协议">#</a> ICMP 网际控制报文协议</h1><p>Internet Control Message Protocol</p><p>主机 or 路由器 使用 ICMP 来发送 <strong>差错报告报文</strong> and <strong>询问报文</strong></p><p>ICMP 被封装在<strong> IP 数据报中发送</strong></p><h2 id="icmp差错报告报文5种"><a class="anchor" href="#icmp差错报告报文5种">#</a> ICMP 差错报告报文 5 种</h2><ol><li>终点不可达</li></ol><p><img data-src="https://img1.imgtp.com/2023/01/31/twUkXFQC.jpg" alt="57.jpg" /></p><ol start="2"><li><p>源点抑制<br /><img data-src="https://img1.imgtp.com/2023/01/31/XmmTLCHM.jpg" alt="58.jpg" /></p></li><li><p>时间超过<br /><img data-src="https://img1.imgtp.com/2023/01/31/nrmRFGdP.jpg" alt="59.jpg" /></p></li><li><p>参数问题<br /><img data-src="https://img1.imgtp.com/2023/01/31/9cXAI2Ef.jpg" alt="60.jpg" /></p></li><li><p>改变路由 (重定向)<br /><img data-src="https://img1.imgtp.com/2023/01/31/trsuguAJ.jpg" alt="61.jpg" /></p></li></ol><h2 id="when-不应发送icmp差错报告报文"><a class="anchor" href="#when-不应发送icmp差错报告报文">#</a> when 不应发送 ICMP 差错报告报文</h2><ol><li>对 ICMP 差错报告报文不再发送 ICMP 差错报告报文</li><li>对第一各分片的数据分配的所有后续数据分配都不</li><li>对具有多播地址的数据报都不</li><li>对具有特殊地址 (127.0.0.0 or 0.0.0.0 等) 的数据报 不</li></ol><h2 id="icmp询问报文"><a class="anchor" href="#icmp询问报文">#</a> ICMP 询问报文</h2><ol><li><p>请求和回答<br /> -&gt; 测试目的站是否可达</p></li><li><p>时间戳请求和回答<br /> -&gt; 进行时钟同步 and 测量时间</p></li></ol><blockquote><p><img data-src="https://img1.imgtp.com/2023/01/31/9al8yVjH.jpg" alt="62.jpg" /></p></blockquote><h2 id="icmp应用举例"><a class="anchor" href="#icmp应用举例">#</a> ICMP 应用举例</h2><h3 id="ping分组间探测"><a class="anchor" href="#ping分组间探测">#</a> PING 分组间探测</h3><p>(packet InterNet Group)<br /><img data-src="https://img1.imgtp.com/2023/01/31/g7jYAOec.jpg" alt="63.jpg" /></p><h3 id="traceroute跟踪路由"><a class="anchor" href="#traceroute跟踪路由">#</a> traceroute 跟踪路由</h3><p><img data-src="https://img1.imgtp.com/2023/01/31/9pV8kmaN.jpg" alt="64.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/01/31/0wWrxTmm.jpg" alt="65.jpg" /></p><h1 id="vpn-nat-虚拟专用网网络地址转换"><a class="anchor" href="#vpn-nat-虚拟专用网网络地址转换">#</a> VPN &amp; NAT 虚拟专用网 &amp; 网络地址转换</h1><h2 id="vpn"><a class="anchor" href="#vpn">#</a> VPN</h2><p>虚拟专用网 Virtual Private Network</p><p>利用公用的因特网 作为本机构各专用网之间的通信载体<br /><img data-src="https://img1.imgtp.com/2023/02/01/BVjRYh1W.jpg" alt="66.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/01/OW4Q7uFs.jpg" alt="67.jpg" /></p><blockquote><p>内联网 VPN<br /> 外联网 VPN<br /> 远程接入 VPN<br /><img data-src="https://img1.imgtp.com/2023/02/01/Ja41slP0.jpg" alt="68.jpg" /></p></blockquote><h2 id="nat网络地址转换"><a class="anchor" href="#nat网络地址转换">#</a> NAT 网络地址转换</h2><p>network address translation<br /> 缓解 IPV4 地址空间即将耗尽的问题</p><p>NAT 能使大量内部专用地址的专用网络用户 共享少量外部全球地址来访问因特网上的主机和资源<br /><img data-src="https://img1.imgtp.com/2023/02/01/NUE6bqHX.jpg" alt="69.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/01/5NKqRXug.jpg" alt="70.jpg" /></p><blockquote><p>NAPT<br />natwork address and port translation<br /> 将端口号和 IP 地址一起进行转换的技术叫做<strong>网络地址与端口号转换 NAPT</strong></p></blockquote><p><img data-src="https://img1.imgtp.com/2023/02/01/Bg9mPqHs.jpg" alt="1.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/01/VYyoMIcv.jpg" alt="2.jpg" /><br /><img data-src="https://img1.imgtp.com/2023/02/01/MMgu0x5L.jpg" alt="3.jpg" /></p>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CET6</title>
      <link href="/2022/11/09/CET6/"/>
      <url>/2022/11/09/CET6/</url>
      
        <content type="html"><![CDATA[<h1 id="单词"><a class="anchor" href="#单词">#</a> 单词</h1><h2 id="one"><a class="anchor" href="#one">#</a> one</h2><p>bizarre     奇异的<br /> contend     竞争、坚决主张<br /> perplex     迷惑、困惑<br /> verge       边缘<br /> speciality 特产、专业、特长<br /> collective 集体的 集体<br /> kit 成套工具、用具包<br /> sly 狡猾的、诡秘的、偷偷摸摸的<br /> handful 一把、少数、费劲的<br /> living 活的、生动的<br /> erroneous 错误的<br /> deed 行为 实际 功绩 (房产) 契约证书 v. 通过行为转化<br /> hut 小屋<br /> torrent 奔流 山洪 激流的汹涌的<br /> rear 后部臀部 养育饲养建立培养<br /> mountain 山岳山脉<br /> dormitory<br />decieve 欺骗<br /> silver 银子银器<br /> waggon 四轮运货马车 敞篷货车<br /> letter 信证书 印刷 租赁人<br /> revise 修订 校订<br /> pie 喜鹊 爱说话的人 弄乱<br /> throng 群 群众 一大群 大量 拥挤的<br /> menace 威胁<br /> traverse 横越 横切<br /> recorder 首席 法官 竖笛 录音机<br /> habit 长袍 穿衣<br /> murmur 低语<br /> portuguese 葡萄牙<br /> tragedy 惨案<br /> ego 自我<br /> revolt 叛乱 反感 使・・・恶心<br /> exterior 表面的 对外的<br /> leak 泄露 漏洞<br /> assumption 傲慢 采取<br /> ditch 沟 渠道 迫降<br /> brisk 活泼的 敏锐的 凛冽的<br /> wear 磨损 耐久性<br /> exceedinly 极端地 很<br /> resignation 辞职 放弃 顺从<br /> bud 发芽<br /> chase 狩猎 追捕<br /> Oceania 大洋洲<br /> wind 卷曲 缠绕<br /> bounce 向・透露 注意 恢复<br /> conservative 守旧的<br /> cassette 匣子<br /> chorus 合唱<br /> liability 责任倾向 义务<br /> indignant 愤慨的<br /> kettle 水壶 锅 坑 穴<br /> corrode 破坏 侵蚀<br /> pretend 假托 赝品的 模拟的<br /> extraordinary 特派的 纵向的<br /> gasoline 汽油<br /> seemingly 表面上</p><p>clause 子句，条款<br /> ambulance 救护车 野战 医院<br /> tribe 部落 宗族<br /> sensation 感觉 知觉 轰动<br /> canal 建河 疏导<br /> undertaking 任务 事业 企业 保证 许诺<br /> leap 跳跃 猛冲<br /> sore 疮痛处 痛心的 恼火的<br /> oval 卵形的<br /> locality 位置<br /> disposal 丢掉 处理 销毁 碾碎器<br /> interval 间隔 休息间距<br /> retort 反击 反驳<br /> interpret 解释 口译 演出<br /> apprehension 理解 忧惧 逮捕<br /> opaque 不透明的 不传导的<br /> impart 给予 传递 告诉<br /> rusty  生锈的<br /> tremendous 极大的 巨大的 惊人的<br /> sympathetic 同情的共鸣的 交感神经<br /> exceed 超出 领先<br /> foreigner<br />commend 称赞 表扬<br /> vain 虚荣的<br /> manipulate 操作 控制 手持<br /> millimetre 毫米<br /> ward 病房<br /> identical<br />soap 肥皂 阿谀奉承<br /> Atlantic 大西洋<br /> dismay 惊慌 沮丧 灰心<br /> thorn 刺 荆棘<br /> summit 顶点 极度 最高点<br /> representative 典型的<br /> compulsory 强迫的 义务的<br /> electronics 电子学<br /> announcer<br />noun 名词<br /> ascertain 查明 弄清<br /> envelope 封套 皮壳<br /> preliminary<br />hoist 生气 扯起来<br /> flaw 瑕疵 裂缝<br /> sociology 社会学<br /> narrative 叙述 故事<br /> tariff 关税 价格表<br /> refine 精炼 提纯 净化<br /> valve 阀门 电子管<br /> transplant 移植 种植<br /><strong> divine</strong> 神的 敬神的<br /> evolution 进化 发展<br /> bribe 贿赂<br /> clutch 抓住 掌握<br /> sufficiently<br />dentist<br />costume 装束<br /> alter 改变<br /> ounce gen 司 英两<br /> metallic 金属的 金属粒子<br /> efficient 有胜任的<br /><strong> veil</strong> 面纱 面罩 修女<br /> aggressive 侵略的 好斗的 攻击性的<br /> motor 机动的<br /> ball 球状舞会<br /> elite 精英 中坚分子<br /> simplicity 简朴<br /> toe 脚趾<br /><strong> dilute</strong> 冲淡 稀释<br /> bracket 支架 括弧 托架<br /> cement 水泥胶 结合剂 补牙物 基石 v 维护保养<br /> compile 搜集<br /> tease 戏弄 强求<br /> shrug 怂 耸肩<br /> enroll 登记 参军<br /> comb 梳子 鸡冠 蜂巢<br /> exceptation 预期<br /> crime 羞耻 犯罪<br /> erosion 糜烂<br /> commerce 社交 贸易<br /> plaster 灰泥 石膏药<br /> feeble 虚弱的 微弱的<br /> sake 理由 利益 好处<br /> materialism 唯物主义 实例主义<br /> upside-down 颠倒的 乱七八糟<br /> gang 一帮 一伙<br /> sensible 明智的 可察觉的 实用的<br /> club 夜总会<br /> suck 吮吸<br /> mill 磨坊 制造厂<br /> preferable 更合意的<br /> agent 工人 药剂<br /> adverse 相反的 逆的 敌对的<br /> initial<br />scope 范围 能力 眼力 仔细研究<br /> democracy 民主 民主国家<br /> humorous<br />invest 包围<br /> preposition 前置词介词<br /> recur 再发生 重现<br /> expertise 专家的意见 专门技术<br /> coil 线圈绕 盘绕<br /> commodity 日用品 商品 物品<br /> federation 联邦 联盟<br /> weight 使负重 、倾斜<br /> hysterical 歇斯底里的 异常兴奋的<br /> timid 胆怯的      羞怯的<br /> breakdown 崩溃<br /> suspicious 猜疑的<br /> warfare<br />clearance 清除 间隙<br /> pillar 柱子  栋梁<br /> velocity  速率 迅速<br /> authorize<br />plant 设备 设立 工厂<br /> deer 鹿<br /> fourth<br />superb 壮丽的 超等的<br /> coherent 粘着的 紧凑的<br /> reconcile 使和好 调停<br /> discern 辨出<br /> communist 共产主义的<br /> curt 简略的 生硬的 简短的<br /> succession 继承<br /> investigation 研究 调查<br /> smuggle 私运 走私<br /> imagine 认为 猜测<br /> meridiem 正午<br /> electricity<br />hedge 篱笆 障碍物 限制 拐弯抹角<br />保护自己不受财产损失<br /> inspection 视察<br /> forehead<br />tragic<br />physician 内科医生<br /> difference 分歧<br /> post 竿 邮件<br /> moderate 温和的 适度的 稳健的<br /> anticipate 预期<br /> interst 利益 嗜好 股份 利息<br /> pint 品脱<br /> resemblance 相似 相似性<br /> corresponding 符合的 一致的 相当的<br /> overlook 看漏 忽视<br /> horrible 极可厌的<br /> revelation 揭露 泄露 启示 展示<br /> humble 谦逊的 粗鄙的<br /> bull 斗牛犬 宗教 猛冲<br /> devise 设计 遗赠 (的财产)<br /> snap 猛咬 突然折断<br /> commute 交换 兑换 经常来往<br /> lorry 运货 汽车卡车<br /> portion  一部分 命运 分担的责任<br /> correspondent 通讯记者 与。相应<br /> horrible 极可恶的</p><p>revelation 揭露 泄漏 启示<br /> practise 实践<br /> indirect 迂回的 欺骗的<br /> orient 亚洲 远东 东方<br /> corrupt 贿赂 腐败的<br /> mock 嘲弄 挖苦<br /> diverse<br />misfortune 灾祸 灾难<br /> deprive 夺去 使失去<br /> dew 露水<br /> hydrogen 氢<br /> conspicuous 显眼的 出众的<br /> bank 堆积<br /> blow 殴打 吹响<br /> practicable 能实行的 适用的<br /> northern 北部的<br /> gloomy 黑暗的 令人沮丧的<br /> cater 迎合 投合<br /> vacuum 真空空间吸尘器<br /> misunderstand 误会 曲解<br /> instance 诉讼 例子 程序<br /> conform 使遵守 一致<br /> shrewd 精明的敏锐的<br /> storage 贮藏 存储 保管 仓库<br /> philosopher 哲学家<br /> inhabit 栖息于<br /> dwell 居住 凝思 细想<br /> hamper 妨碍 阻碍 牵制<br /> longitude 经线<br /> steamer 汽船 蒸笼<br /> wreath 花环 花圈 花冠<br /> facet 方面 刻面<br /> consequent 必然的 作为结果的<br /> nightmare 噩梦<br /> oath 誓言 宣誓<br /> breeze 微风 轻而易举的事<br /> dish 菜肴 凹形 挖空 闲谈<br /> prolong 拖延<br /> reckless 鲁莽的<br /> disclose 揭露<br /> interpreter 程序<br /> allowance 津贴<br /> beef 抱怨诉苦<br /> headquarters 司令 指挥 总部<br /> resonance 共鸣 共振<br /> widow 寡妇 遗孀<br /> ceramic 陶器的<br /> transcend 超过 胜过<br /> habitual 习惯的<br /> skirt 边缘郊区<br /> gulf 海湾<br /> quart 夸脱 (=2 品脱)<br /> unusually 显著的<br /> drown 淹死<br /> statistics 统计数字<br /> sentence 判决 刑罚 命题 使遭受<br /> lend 贷款 增添 给予<br /> adverb 副词<br /> encounter 遭遇 偶然 碰到<br /> converge 聚合 集中于一点</p><p>bolt 螺 栓 钉 闪电 狼吞虎咽<br /> B.C. 公元前<br /> oral 口试<br /> whistle  啸啸 汽笛<br /> simple 无辜的 纯粹的 n. 平民 精神病人 草药<br /> lest 唯恐 以免<br /> mutual 相同的 共同的<br /> compensate 补偿 赔偿<br /> tow 牵引<br /> waterproof 不透水的 防水的 雨衣<br /> photograph 照相 照片<br /> mortgage 抵押</p><p>disposition 性情 处置 处理 布置<br /> elevate 提高 抬高<br /> concentrate  聚集 浓缩 精选</p><p><strong>trifle</strong> 小事 琐事 浪费 玩忽<br /> tell 吩咐 辨别 告诉<br /> dragon 凶暴的人<br /> quartz 石英<br /> security 保证 抵押 债券证券<br /> competitive 竞赛的 比赛的<br /> eve 前夜 前夕<br /> thereafter 此后以后<br /> bulletin 告示 公告</p><p>student 研究生 学者<br /> reflexion 反射 映像 折射 考虑 = reflection<br />July 七月<br /> meal 膳食 谷物进餐<br /> adjoin 贴近 吡连 靠近<br /> progress  前进 进步<br /> slippery 狡猾的 不可靠的<br /> recreation 消遣 娱乐活动<br /> sue 控告 请愿<br /> deem 认为 想<br /> hostage 人质 抵押品<br /> crush 碾碎 镇压 关键时刻 果汁<br /> repay 偿还 报答<br /> relativity 相关性<br /> buzz 嗡嗡<br /> recession 衰退<br /> proportional 比例的 相称的</p><p>startle 吃惊<br /> sausage 腊肠<br /> boycott 联合抵制<br /> presumably  推测起来 大概<br /> copper 铜币 镀铜 一种蝴蝶<br /> spectacular 惊人的 展览物<br /> definitely 确切的<br /> condemn 谴责<br /> rouse 唤醒<br /> hasten 催促 急忙<br /> symposium  专题研讨会 讨论会<br /> drive 驾驶驱入<br /> journalist  记者<br /> republic 共和国 共和政体<br /> diameter 直径<br /> outlook 观点 前景 景色<br /> shipment 货物<br /> intricate 复杂的 纠缠的<br /> suppress 镇压 隐瞒<br /> servant 雇工<br /> deficiency 缺乏<br /> prayer 祷告<br /> immigrant<br />manufacture 制造加工<br /> illusion 幻想 错觉<br /> onto 到... 上<br /> division 分配 除法<br /> continuous 连续不断的<br /> versatile 多方面的<br /> bankrupt 破产<br /> dignity<br />legislation 立法 法规<br /> prototype 原型<br /> flank 肋 侧面的<br /> instantaneous 瞬间的 即刻的<br /> tomorrow<br />tug 猛拖<br /> repetition 重复 反复<br /> exhaust 耗尽 排气装置<br /> illegal 非法移民<br /> stiffen 使僵硬 变粘稠<br /> criticism 批判 评论<br /> shed 脱落 流出 小棚<br /> descend 下降<br /> vegetation 植物 草木<br /> reproach 责备 耻辱<br /> volume 卷册 容积 体积 音量<br /> electrician 电工技师<br /> handicap 妨碍 使不利<br /> stumble 绊倒 踌躇<br /> notable 著名的<br /> warrant 许可证 正当理由 委任状<br /> obstacle 障碍物</p><h1 id="day1"><a class="anchor" href="#day1">#</a> day1</h1><ol><li>expire 满期  到期 断气 散发<br /> embody 体现 包含</li></ol><p>periodical 期刊</p><p>overlap 重叠 覆盖物<br /> deligate 代表<br /> christian 基督教的<br /> dwarf 矮子</p><p>ferrous 铁的<br /> treasurer 司库 财务主管</p><p>wield 挥 行使<br /> Christ  n. 救世主<br /> christian 基督教的<br /> ironical 讽刺的<br /> everlasting 永久的<br /> breakdown 细目列表</p><h1 id="2-excise-切除"><a class="anchor" href="#2-excise-切除">#</a> 2. excise 切除</h1><p>subsequent 随后的 后来的<br /><strong> incredible 惊人的</strong><br /> charter 宪章 章程 包租 发给...<br />Moslem 穆斯林的<br /> duke 公爵</p><p>pose 提出 造成<br /><strong> hamper 妨碍 牵制</strong><br /> analytic<br /><strong>vigorous 剧烈的</strong> 活跃的 精神旺盛的</p><ul><li>He is none the less <strong>vigorous</strong> for his years.<br /> 他虽年老而依然健壮.</li></ul><p>resemblance 相似<br /> escort 陪同 护送<br /><strong> narration 叙事 故事</strong></p><p>#3. extraction 抽出 血统 家世<br /><strong> counsel 律师 忠告</strong><br /> propaganda 宣传<br /> avail 益处<br /> pneumatic 充气的<br /><strong> furious 狂怒的 激烈的</strong></p><p><strong>taper 逐渐变细 ，减少</strong><br /> acquaint 使结识 了解<br /> datum 资料 数据<br /> counsel 建议 忠告 律师<br /> attorney 辩护律师</p><p>propaganda 宣传<br /> pneumatic 充气的 气动的</p><h1 id="4-referee-裁判"><a class="anchor" href="#4-referee-裁判">#</a> 4. referee 裁判</h1><p>locality 位置<br /> sift 筛子<br /> brand 在。上烙印 加污名于<br /> installment 分期付款<br /> instrumental 有帮助的 乐器的<br /> descent 出身 下降 斜坡<br /> subsequently 其次 接着<br /> adjacent 毗邻的<br /> commence 获得学位 着手<br /> balcony 阳台 楼厅<br /> thereof 在其中 它的<br /> editorial 社论的 编辑的<br /> mustard 芥末<br /> sandwich 夹裹 把... 夹入</p><h1 id="5-goodness-善良-美德"><a class="anchor" href="#5-goodness-善良-美德">#</a> 5. goodness 善良 美德</h1><p>plump 丰满的 胖乎乎的<br /> contradict 反驳<br /> xerox 复印 影印<br /> cross 生气的 愤怒的<br /> herald 预告 宣布<br /> detach 分开 拆卸 使脱离<br /> bazaar 集市 义卖<br /> pantry 食品柜 餐具室<br /> integrity 诚实 正直 完整<br /> decorative<br />documentary 文件的<br /> survival 遗物 幸存<br /> successor 继任者</p><h1 id="6-tread-踩-踏-步行"><a class="anchor" href="#6-tread-踩-踏-步行">#</a> 6. tread 踩 踏 步行</h1><p>disorder 失调<br /><strong> wharf 码头 停泊所</strong><br /> confirmation 证实<br /> streamline 精简<br /> practicable 切实可行的<br /> pilgrim 香客 朝圣者<br /> equation 平衡 综合体<br /> radical 基本的  彻底的 激进的<br /> revenue 收入 收益 税收<br /> offspring</p><h1 id="7-superstition-迷信-迷信观念"><a class="anchor" href="#7-superstition-迷信-迷信观念">#</a> 7. superstition 迷信 迷信观念</h1><p>infinite 无限的 无穷的 极度的<br /> damn 一点点 丝毫 诅咒 谴责<br /> hail 冰雹 一阵<br /> rapture 狂喜<br /> periodic 周期的<br /> cloak 披风 斗篷 借口 掩饰<br /> rectify 纠正 修正<br /> senator 参议员<br /> censeless 无意义的 失去知觉的<br /> magnitude 巨大 重要性 震级<br /> deprive 剥夺</p><h2 id="8-respectable-可敬的-可观的-体面的"><a class="anchor" href="#8-respectable-可敬的-可观的-体面的">#</a> 8. respectable 可敬的 可观的 体面的</h2><p>viscous 粘的<br /> blunder 疏忽<br /> continental 欧洲大陆的 大陆的<br /><strong> coordinate 使协调 调和</strong><br /> assassinate 暗杀 刺伤<br /> grunt 呼呼声<br /> hurricane<br />shovel 铲</p><h2 id="9-ruby-红宝石"><a class="anchor" href="#9-ruby-红宝石">#</a> 9. ruby 红宝石</h2><p>contrast<br />deform  使变形 损毁外形<br /><strong> integrate 使融入 使结合</strong><br /> psychology 心理学 心里<br /> haughty 傲慢的 目中无人的<br /> blaze 燃烧<br /> inevitably 不可避免的<br /> inadequate 不充足的 不够格的<br /> inaccurate 不精确的<br /> specimen 抽样 样本<br /> pal 朋友<br /> incorporate 使并入 包含<br /> haughty 傲慢的 目中无人的</p><h2 id="10-strife-冲突"><a class="anchor" href="#10-strife-冲突">#</a> 10. strife 冲突</h2><p>consistent<br />friction 矛盾 不和<br /> slide 贬值 滑动<br /> gangster 匪徒<br /> inaugurate 开创 为举行</p><p><strong>kinetic 运动的</strong><br /> rooster 公鸡<br /> patriot 爱国者<br /> absorption 吸收 合并<br /> inaugurate 开创<br /> friction 矛盾 摩擦力</p><h2 id="11-dictator-独裁者"><a class="anchor" href="#11-dictator-独裁者">#</a> 11. <strong>dictator 独裁者</strong></h2><p>nourishment 滋养品 营养<br /><strong> interior 内部的 内心的</strong><br /> inflation 通货膨胀<br /> strip 狭长区域<br /> antique 古董<br /> intake 摄取量<br /> magician 巫师<br /> tact 机敏 圆滑 得体<br /> inspiration 灵感 妙计<br /> baffle 挡板 困惑<br /> interior 内部的 内心的</p><h2 id="12-incline-斜坡-斜面"><a class="anchor" href="#12-incline-斜坡-斜面">#</a> 12. incline 斜坡 斜面</h2><p><strong>ambient 周围的 四周的</strong><br /><strong> inertia 惯性 惰性 迟钝</strong><br /> tyrant 暴君 专制君主 专横的人<br /><strong> modification 缓和 修改 修饰</strong><br /> competitive 竞争的<br /><strong> antenna 天线 触角</strong><br /><strong> agitation 鼓动 搅动 焦虑 烦恼</strong><br /> twilight 黄昏 暮光<br /> meditate 沉思 冥想 仔细考虑<br /> ascend 攀登 上升<br /> graze 擦伤 放牧<br /> clown 小丑</p><h2 id="13-drainage-排水"><a class="anchor" href="#13-drainage-排水">#</a> 13. drainage 排水</h2><p>luxurious 奢侈的 豪华的惬意的<br /> implore 乞求 恳求 哀求<br /> conviction 确信 定罪 判罪<br /> hinge 合页 铰链<br /> dome 圆屋顶 半球形物<br /> sensitivity 敏感性 灵敏性<br /> liner 邮轮 客轮 衬里 衬垫</p><p>veto 否决<br /> bull 公牛 雄兽 买空的证券投机商<br /> bribe 行贿<br /> response 回复 回答<br /> commission 授权 委托 佣金<br /> smart 刺痛 剧透 难受<br /> negligible 微不足道的 可忽略不计的</p><h2 id="14-axle-轮轴-车轴"><a class="anchor" href="#14-axle-轮轴-车轴">#</a> 14. axle 轮轴 车轴</h2><p>whilst 同时 时时<br /> metallic<br /><strong>persecute 迫害 残害 骚扰</strong><br /> fro 向后 向那边<br /> zinc 镀锌<br /> coincide 巧合 同时发生<br /> unanimous 一致同意的 无异议的<br /> theorem 定理<br /><strong> persecute 迫害 残害 骚扰</strong><br /> pamphlet 小册子<br /> overthrow 推翻 瓦解<br /> multiplication<br />decisive 决定性的 果断的<br /> awkward 使人尴尬的 难携带的 笨拙的<br /> quantitative 大小的数量的</p><h2 id="15-resultant-作为结果的"><a class="anchor" href="#15-resultant-作为结果的">#</a> 15. resultant 作为结果的</h2><p>velocity 速率<br /> disperse 分散 驱散<br /> inspector 巡警 督察长<br /> composite 合成物<br /> realistic 现实的<br /><strong> resent 怨恨</strong><br /> unique<br />islam 伊斯兰教<br /> woodpecker 啄木鸟<br /><strong> whitewash 粉饰 石灰水粉刷</strong><br /> reside 居住 属于<br /><strong> perstige 威望 声望</strong></p><h2 id="16-empirical-经验主义的"><a class="anchor" href="#16-empirical-经验主义的">#</a> 16. <strong>empirical 经验主义的</strong></h2><p><strong>partinent 恰当的 中肯的</strong><br /> induce 劝诱 劝说<br /> flaw 瑕疵 谬误<br /> inorganic 无生物的 无机的<br /> specificaion 详述 规格 说明书<br /> collide 碰撞<br /> filement 细丝 细线 细状物<br /> colonist 移民</p><h2 id="17-inclination-倾向-爱好"><a class="anchor" href="#17-inclination-倾向-爱好">#</a> 17. inclination 倾向 爱好</h2><p>cereal 谷物 麦片<br /> personaliy 个性 性格<br /> incidentally 附带地 顺便提及<br /> estate 地区 遗产 住宅区<br /> proverb 谚语 格言<br /> superficial 表面的 肤浅的<br /> fossil 化石的<br /> sequence 序列<br /> decompose 使腐烂 分解</p><h2 id="18-tuberculosis-结核病-肺结核"><a class="anchor" href="#18-tuberculosis-结核病-肺结核">#</a> 18. tuberculosis 结核病 肺结核</h2><p>foresee<br />tile 瓦片 瓷砖<br /> mistress 情妇女主人<br /> villa 别墅<br /> historian<br />popularity 声望 流行<br /> maple<br />cleanliness<br />span 墩距 间隔<br /> blond 白肤金发碧眼的人<br /> scope 眼界 施展余地 机会<br /> seige 包围 围攻<br /> bridegroom 新郎<br /> merchandise 买卖 销售</p><p>optical 光的<br /> burglar 夜盗 窃贼<br /> preset 预先设置<br /> propulsion 推进</p><h2 id="19-passport-护照"><a class="anchor" href="#19-passport-护照">#</a> 19. passport 护照</h2><p>undertake 承诺 从事<br /> ridicule 嘲弄 奚落<br /> theatre 剧院 演戏</p><p>cosmic 宇宙的<br /> gnaw 折磨<br /> jug 壶<br /> greed<br />torque 扭转<br /> bypass 路过</p><h2 id="20-applaud"><a class="anchor" href="#20-applaud">#</a> 20. applaud</h2><p>equator 赤道<br /> radiator 暖气片 散热器 冷却器<br /><strong> perpendicular 垂直 (线)</strong><br />deficient<br /><strong>scrap 废弃 取消</strong><br /> consul 领事<br /> rear 饲养 领养<br /><strong> overhear 偶然听到 偷听</strong><br /><strong> eloquence 雄辩 口才</strong><br /><strong> plateau 高原 平稳时期</strong><br /><strong> operation 企业</strong><br /><strong> stride 大步 步态 进展</strong><br /> finance<br />makeup 体格<br /> unreasonable<br />eclipse 日食月食 黯然失色</p><h2 id="21-symphony-交响乐"><a class="anchor" href="#21-symphony-交响乐">#</a> 21. symphony 交响乐</h2><p>alteration 更改<br /> vaccinate 给。接种疫苗<br /> earnings 工资<br /> wardrobe 衣柜 衣橱 行头</p><ul><li>feminine 女性的 阴性的</li><li>masculine 男性的 阳刚的<br /> supplement 增刊<br /> offset 抵消 补偿<br /> substantial 物质的 坚固的 大量的</li></ul><p>mend 修改 康复<br /> second 临时调任<br /> productivity 生产率<br /> shady 可疑的 背阴的 不正当的<br /> notion 观点<br /> endeavor 尝试 试图<br /> compatible 兼容的</p><h2 id="22-siren-汽笛-警报器-妖妇"><a class="anchor" href="#22-siren-汽笛-警报器-妖妇">#</a> 22. <strong>siren 汽笛 警报器 妖妇</strong></h2><p><strong>requisite 必需品</strong><br /> consolidate 合并 联合<br /> aviation 航空 飞机制造业<br /> horn 角状物 喇叭 角质<br /> coward 胆小鬼 懦夫<br /> destiny 命运<br /> pedlar 流动小贩<br /> supersonic 超音速的<br /> allied 联合的 同盟的<br /> insignificant<br />ponder<br />certainty</p><h2 id="23-panther-豹-黑豹-美洲豹"><a class="anchor" href="#23-panther-豹-黑豹-美洲豹">#</a> 23. panther 豹 黑豹 美洲豹</h2><p>ward 病房 被监护人<br /> vicious 残暴的 恶意的<br /> reactor 反应堆<br /> inferior 差的<br /> Mars 火星 战神<br /> metropolitan 大主教<br /> frustrate 挫败 沮丧<br /> fabrication 制造 构造物 捏造<br /><strong> lodging 寄宿 租住的房间</strong><br /><strong> tyranny 暴政 专横</strong><br /> saturation 饱和 浸透<br /> catholic 天主教徒<br /> productive<br />ignorance<br />immigrate</p><h2 id="24-bourgeois-资产阶级的"><a class="anchor" href="#24-bourgeois-资产阶级的">#</a> 24. <strong>bourgeois 资产阶级的</strong></h2><p>manifest 明显的 显而易见的<br /> patriotic 爱国的<br /> obedient 服从的 顺从的 温驯的<br /> expedition 探险 远足<br /> overestimate 过高估计、评价<br /> establish 查实<br /> patron 代言人<br /> intonation 语调 声调<br /> characterize 描述<br /> perfection 完美<br /> leakage 漏出<br /> opaque 不透明是<br /> hymn 圣歌 歌颂<br /> moor 使停泊<br /> consumption</p><h2 id="25-ultrasonic-超声波"><a class="anchor" href="#25-ultrasonic-超声波">#</a> 25. ultrasonic 超声波</h2><p>fluctuation  波动 起伏 涨落<br /> symmetrical 对称的 匀称的<br /> mock 嘲弄<br /> flap 拍打<br /> massacre 大屠杀<br /> signify 意味着<br /> handout 施舍物 救济品 讲义<br /> terminology 术语 专用术语<br /><strong> occurrence 事件 发生</strong><br /><strong> cruise 航船 游览</strong><br /> untie 解开 松开<br /> compliment 赞美<br /> boiler<br />misfortune<br />cruise 乘船游览、航游</p><h2 id="26-ranch-大农厂"><a class="anchor" href="#26-ranch-大农厂">#</a> 26. ranch 大农厂</h2><p>rational 理性的 理智的<br /><strong> peripheral</strong> 周围的 次要的<br /> predominant 占优势的<br /> executive 总经理 主管 行政部门<br /> deposition 罢免 沉淀 书面证词<br /> compact 把.. 压实<br /><strong> decree 法令 判决</strong><br /> hover 犹豫不决 徘徊<br /><strong> flux 流体 波动</strong><br /><strong> bewilder 使困惑 使糊涂 不知所措</strong><br /><strong> prevalent 流行的 盛行的</strong><br /> perplex 迷惑<br /> seaport 海港 港口城市<br /> politics<br />diagnose<br />photography<br />recommendation</p><h2 id="27-errand-差事"><a class="anchor" href="#27-errand-差事">#</a> 27. errand 差事</h2><p>tensile 张力的 能伸长的<br /> petition 请愿<br /> tape 录制 粘贴<br /> enlighten 启发<br /> liability 责任 债务 累赘<br /> currency 货币<br /> ware 商品 货物 陶器<br /> puff 吹<br /> equilibrium 平衡 均衡 平静<br /> utensil 器皿 用具<br /> sensible 明智的 理智的<br /> baron 男爵 大亨 巨头<br /> royalty 王室 版费 使用费<br /> torpedo 用鱼雷袭击 故意破坏<br /> crisis</p><h2 id="28-ventilate-使通风-发表看法"><a class="anchor" href="#28-ventilate-使通风-发表看法">#</a> 28. ventilate 使通风 发表 (看法)</h2><p><strong>wrath 狂怒</strong><br /><strong> stern 严厉的</strong><br /><strong> stem 茎</strong><br /> essense 本质 精华 精油<br /> prey 猎物 伤害的对象<br /> aerial 空气中的 航空的<br /><strong> mortgage 抵押</strong><br /> individual 单独的<br /> grind 磨碎 用力挤压<br /><strong> barge 驳船 游艇</strong><br /> supervise 监督<br /> locomotive 机车 火车头<br /> vowel 元音<br /> squeeze<br />version<br />notify<br />thereafter<br />optimism</p><h2 id="29fortress-ˈfɔtris堡垒-要塞"><a class="anchor" href="#29fortress-ˈfɔtris堡垒-要塞">#</a> 29.fortress  [ˈfɔ:tris] 堡垒 要塞</h2><p>initiate 开始 创始 接纳<br /> deputy [ˈdepjuti] 副的 代理人<br /> diesel  [ˈdi:zəl] 柴油 柴油车<br /> exceptional 优越的<br /><strong> versatile</strong> 多才多艺的 多功能的<br /> mount 山峰 坐骑<br /> indefinite 无限期的<br /> cradle 摇篮 发源地<br /><strong> peril</strong> [ˈperil]  n. 重大危险；（某活动或行为的）危险，...<br /><strong>bid 努力 投标</strong><br /><strong> sheriff 郡长 县治安官</strong><br /> missionary 传教士<br /> nursery 苗圃 托儿所<br /> mobilize 动员起来<br /> observe<br />Jesus<br />deem<br />composition</p><h2 id="30-perception-感觉-洞察力-理解"><a class="anchor" href="#30-perception-感觉-洞察力-理解">#</a> 30. perception 感觉 洞察力 理解</h2><p>hazard 危险<br /> molecular [məˈlekjələ] 分子的<br /> patent 专利<br /> goddess [ˈgɔdɪs]  n. 女神；被崇拜的女人<br /> grassy [ˈgræsi:]  adj. 长满草的；覆盖着草的<br /><strong> hospitality</strong>  [ˌhɔspiˈtæliti]  n. 殷勤好客；热情友好；款待<br /> outlet [ˈautlet]  n. 出口；排放管；（情感的）发泄途径；.<br />dove [dʌv]  n. 鸽子；（政界的）鸽派人士<br /> yolk 蛋黄<br /> measurement</p><h2 id="31-hydrocarbon-烃-碳氢化合物"><a class="anchor" href="#31-hydrocarbon-烃-碳氢化合物">#</a> 31. hydrocarbon 烃 碳氢化合物</h2><p>commonplace 平常的事<br /> merciful 仁慈的 幸运的<br /><strong> prairie 大草原</strong><br /> distort 歪曲 变形<br /> inva<strong>ria</strong>bly [ɪnˈveəriəbli]  adv. 不变地；总是<br /> stiffness 僵硬 生硬<br /><strong> crank 转动</strong><br /><strong> rapidity</strong> [rəˈpɪdɪtɪ]  n. 急速，迅速；陡，险峻<br /> plague 鼠疫 瘟疫 灾难<br /> profound 深刻的 知识渊博的<br /> adore 崇拜 热爱<br /> generalize 形成概念<br /> ambassador 大使 代表</p><h2 id="32-tranquil-平静的-宁静的-ˈtræŋkwil"><a class="anchor" href="#32-tranquil-平静的-宁静的-ˈtræŋkwil">#</a> 32. tranquil 平静的 宁静的 [ˈtræŋkwil]</h2><p><strong>resolute 坚决的 果断的 [ˈrezəˌlu:t]</strong><br /><strong> finite 有限的 限定的</strong><br /><strong> trench 深沟 地沟 战壕</strong><br /> lump 结成块<br /> nought 零 无 [nɔ:t]<br /> repel 击退 使厌恶<br /> dreadful  [ˈdredful]  adj. 可怕的；糟糕透顶的；极严重的<br /> perch  [pə:tʃ]  n. （禽鸟的）栖息；高位<br /> rim 边沿，边缘；<br />butt 大酒桶；烟蒂<br /> prejudice<br />intellect 理解力；才智非凡的人；出众的...<br />homogeneous  adj. 同类的，同性质的<br /> drain v. 使流出；使排干；喝光<br /> count 指控；罪状；事项；计数</p><h2 id="33-disillusion-ˌdisiˈluʒən-使醒悟-理想破灭"><a class="anchor" href="#33-disillusion-ˌdisiˈluʒən-使醒悟-理想破灭">#</a> 33. disillusion  [ˌdisiˈlu:ʒən] 使醒悟 理想破灭</h2><p>shipwreck  [ˈʃɪpˌrek]  n. 船舶失事；海难<br /> incomplete adj. 不完全的；未完成的<br /> corrupt adj. 腐败的，贪污的<br /> dynamo  [ˈdaɪnəˌməʊ]  n. 发电机；精力充沛的人<br /> overwhelm  vt. 压倒；使不知所措；征服<br /> cling  vi. 粘住；依附；紧紧抓住<br /> hearty  [ˈhɑ:ti:]  adj. 衷心的；（饭菜）丰盛的；强烈的<br /> gleam  vt.&amp;vi. 发微光；闪烁<br /> merit  [ˈmerit]  n. 价值；优点<br /> environmental<br />junction  n. 连接；交叉路口；汇合处<br /> nominate  vt. 提名，推荐；任命<br /> marginal  [ˈmɑ:dʒinəl]  adj. 微小的；边缘的；（土地）贫瘠的<br /> storage<br />budget  n. 预算；预算案<br /> gravel [ˈɡrævəl]  n. 砂跞；砾石；结石<br /> prolong vt. 延长；拉长；拖延</p><h2 id="34-enterprise-ˈentəpraiz-事业-进取心-创业-企业"><a class="anchor" href="#34-enterprise-ˈentəpraiz-事业-进取心-创业-企业">#</a> 34. enterprise  [ˈentəpraiz]  事业 进取心 创业 企业</h2><p><strong>nucleus</strong> [ˈnju:kliəs] <strong>原子核 核心 中心</strong><br /><strong> indicative</strong> [inˈdikətiv]  <strong>adj. 指示的；象征的</strong><br /><strong> serpent</strong>  [ˈsɜ:pənt]  <strong>n. 蛇；狡猾的人</strong><br /><strong> petty</strong> adj. 不重要的；小题大做的；下级的<br /> notwithstanding prep. 尽管；虽然<br /><strong> opstinate</strong>  [ˈɔbstənɪt]  adj. 固执的，执拗的；难以移动的</p><p>limp [limp]  n. 跛行<br /> lace  vt. 用鞋带系（鞋）；在… 里掺入；在…...<br />retort  vi. 回嘴；反驳<br /> workpiece  n. 工件，工作部件<br /> arch [ɑ:tʃ]  vt. 成拱形；拱起<br /> regularity  n. 规则性；整齐</p><p>diploma</p><h2 id="35-drastic-激烈的-严厉的"><a class="anchor" href="#35-drastic-激烈的-严厉的">#</a> 35. drastic 激烈的 严厉的</h2><p><strong>drastic [ˈdræstik]  adj. 激烈的；严厉的</strong><br /><strong> germ</strong>[dʒə:m]  n. <strong>细菌；病菌；起源，发端</strong><br /><strong> gathering</strong> [ˈgæðərɪŋ]  n. 集会；聚会；聚集</p><p><strong>prudent [ˈpru:dnt]  adj. 谨慎的；精明的</strong><br /><strong> retard [rɪˈtɑ:d]  vt. 延迟，减缓</strong><br /> subdivide  vt. 把… 再分</p><p>doctrine   n. 信条；主义；学说；正式声明<br /> spectator [spekˈteitə]  n. 旁观者，观众<br /> humanitarian [hju:ˌmænɪˈteəri:ən]  n. 慈善家；人道主义者<br /> ascertain   弄清<br /> burner [ˈbɜ:nə]  n. 炉头，燃烧器<br /> notable  显著的<br /> bacterium<br />lengthen  vt.&amp;vi. 延长<br /> windy<br />thesis</p><h2 id="36-versus-与相对-对阵"><a class="anchor" href="#36-versus-与相对-对阵">#</a> 36. versus 与... 相对、对阵</h2><p>summon  [ˈsʌmən]  vt. 召唤；鼓起（勇气）<br />maiden  n. 少女；未婚女子<br /> lathe  [leɪð] vt. 用车床加工<br /> hostile  [ˈhɔstail] adj. 敌对的；怀有敌意的；不友善的；...<br />album 唱片集 相册<br /> symposium 研讨会<br /> likeness 相似；肖像<br /> speculate 思索 推测<br /> marvel 惊叹不已<br /> ingenious 机灵的<br /> shrill 尖声叫<br /> constituent  [kənˈstitjuənt]  n. 选民；成分</p><h2 id="37-assault-攻击əˈsɔlt"><a class="anchor" href="#37-assault-攻击əˈsɔlt">#</a> 37. assault 攻击 [əˈsɔ:lt]</h2><p><strong>orient 东方 亚洲</strong><br /> disturbance 动乱 困扰<br /> mountainous 庞大的<br /> jack 千斤顶<br /> reptile  [ˈreptail] 爬行动物<br /> quantify  vt. 确定… 的数量<br /><strong> elliptical</strong>  [iˈliptikəl] 椭圆的 隐晦的 间接的<br /> symmetry 对称 相当<br /> illiterate 文盲<br /> dissipate 消散<br /><strong> uproar [ˈʌpˌrɔ:] 骚动 喧嚣</strong><br /><strong> momentary 瞬间的 片刻的</strong><br /><strong> ornament</strong> [ˈɔ:nəmənt] vt. 装饰，点缀<br /><strong> bandit</strong>  [ˈbændit] n. 土匪，盗匪，歹徒<br /> presentation<br />idealism<br />lunar</p><h2 id="38-straighten-挺起来"><a class="anchor" href="#38-straighten-挺起来">#</a> 38. straighten 挺起来</h2><p>intercourse 交际 来往<br /> numerical<br />scorch [skɔ:tʃ] 烧焦、疾驰<br /> martyr  [ˈmɑ:tə]  n. 烈士，殉难者；深受… 之苦者<br /> stray 迷路的<br /> ferry 运送 渡运<br /> fret 烦恼<br /> notorious [nəuˈtɔ:riəs] adj. 臭名昭著的；声名狼藉的</p><p>finely 细微的<br /> correlate  [ˈkɔrileit]  v. 相互关联；使显示联系<br /> thrash 拍打<br /> pacific<br />cosmos 宇宙<br /> panel 面板 专门小组<br /> combat</p><h2 id="39-parachute-降落伞-风散种子ˈpærəʃut"><a class="anchor" href="#39-parachute-降落伞-风散种子ˈpærəʃut">#</a> 39. parachute 降落伞 风散种子 [ˈpærəʃu:t]</h2><p>refugee [ˌrefjuˈdʒi:]  n. 难民，避难者<br /> second-hand  n. 旧的，第二手的<br /> outline 概述<br /> stairway 楼梯<br /> limestone 石灰岩</p><p>torment 折磨 戏弄 [ˈtɔ:ment]<br /> locust  蝗虫<br /> magnetism 磁力  [ˈmægnɪˌtɪzəm]<br /> warehouse 仓库 货栈<br /> tangle 使缠结 混乱 [ˈtæŋɡl]<br /> exert 施加 (影响、压力)、运用<br /> persuation<br />assert 断言 维护</p><h2 id="40-wholesome-健康的-ˈhəulsəm"><a class="anchor" href="#40-wholesome-健康的-ˈhəulsəm">#</a> 40. wholesome 健康的 [ˈhəulsəm]</h2><p>fixture [ˈfikstʃə]  n. 固定装置；定期存款；体育活动；常客<br /> overall 工作服 罩衣<br /> souvenir<br />manipulate 操作 控制处理<br /> cylinder 圆筒 汽缸<br /> analogy 相似 类比<br /><strong> pathetic 差劲的 可怜的</strong><br /> uphold 拥护 支持 维持<br /> principally 首要的<br /> inland 内陆的 内地的<br /> yoke 枷锁<br /> wring 挤 扭<br /> excess 过多<br /> undertaking 任务 事业</p><p>bitterness<br />underestimate</p><h2 id="41-postulate-假定-假设ˈpɔstʃəˌleɪt"><a class="anchor" href="#41-postulate-假定-假设ˈpɔstʃəˌleɪt">#</a> 41. postulate 假定 假设 [ˈpɔstʃəˌleɪt]</h2><p>illuminate 照明<br /> alongside<br />rascal 流氓 家伙 [ˈræskəl]<br /> alternate 交替的 [ˈɔːltə(r) neɪt]<br /> fission 裂变 分裂<br /> deviate 背离 [ˈdi:vieit]<br /> intent 坚决的 专心的 专注的<br /> indoor 室内的<br /> uranium [juəˈreinjəm]  n. 铀<br /> wade 蹚 跋涉<br /> regenerative<br />slang 俚语<br /> spatial [ˈspeiʃəl]<br />anniversary<br />raisin 葡萄干</p><h2 id="42-correspondence-通信-符合-相似"><a class="anchor" href="#42-correspondence-通信-符合-相似">#</a> 42. correspondence 通信 符合 相似</h2><p>discount 折扣<br /> exclusive 排外的 独用的 高级的<br /> convert<br />impluse 冲动 一时的念头<br /> silicon<br />flatter 奉承 谄媚</p><p>straightforward 坦率的<br /> watertight 不透水的 严密的<br /><strong> oath 誓言 誓约 咒骂</strong><br /><strong> prophecy [ˈprɔfisi]  n. 预言，预言能力</strong><br /> testify 证实 作证 [ˈtestɪfaɪ]</p><h2 id="43-maintenance-生活费-维持"><a class="anchor" href="#43-maintenance-生活费-维持">#</a> 43. maintenance 生活费 维持</h2><p>brood 一窝<br /> diversion 转移 娱乐 转向<br /> wrinkle 使起皱<br /> corrosion 腐蚀 侵蚀<br /> province 领域 范围<br /> settlement 殖民 定居点 和解<br /> incapable 软弱无能的<br /> emerge 显露<br /> seam 接缝 煤层<br /> echo 重复 随声附和<br /> vein 静脉 矿脉<br /> clasp 扣住 抱紧<br /> warning<br />colonial</p><h2 id="44-obscure-鲜为人知的-晦涩的"><a class="anchor" href="#44-obscure-鲜为人知的-晦涩的">#</a> 44. obscure 鲜为人知的 晦涩的</h2><p>gigantic 巨大的<br /> simultaneous 同步的<br /> fragrant 芳香的<br /> domestic 国内的 家务的 家用的 驯养的<br /> ornamental 装饰品<br /> tulip 郁金香<br /> emission</p><h2 id="45-confidential-秘密的-机密的-悄悄的"><a class="anchor" href="#45-confidential-秘密的-机密的-悄悄的">#</a> 45. confidential 秘密的 机密的 悄悄的</h2><p>stillness 寂静 静止<br /> catalogue 为。编目录 列举 历数<br /> specialize 专攻<br /> embassy 大使馆<br /> ideally 理想地 完美地<br /><strong> intermediate 中间的</strong><br /> insulator 绝缘体<br /> pedestrian 行人<br /> disastrous 灾难性的 极糟糕的<br /> erect 直立的 竖直的<br /> monk 僧侣 和尚<br /> physically 身体上<br /> ham 火腿 蹩脚演员<br /> melody 旋律 曲调 悦耳</p><h2 id="46-bureaucracy-官僚主义-制度"><a class="anchor" href="#46-bureaucracy-官僚主义-制度">#</a> 46. bureaucracy 官僚主义 、制度</h2><p>introduce 引进 主持<br /> ignite 点火<br /> lining 内衬 [ˈlaɪnɪŋ]<br /> verse 诗 韵文<br /> distinctly 无疑地 清楚地<br /> embarrass 使尴尬<br /> gross 严重的<br /> jealousy  n. 妒忌；小心提防；羡慕<br /> positively 确实的的确确<br /> flatten<br />hoist 起重机</p><h2 id="47-derivation-引出-起源-由来"><a class="anchor" href="#47-derivation-引出-起源-由来">#</a> 47. derivation 引出 起源 由来</h2><p>romantic 不切实际的<br /> penalty 处罚 点球 [ˈpenəlti]<br /> normalization 标准化<br /> subsidiary [səbˈsidiəri]  adj. 辅助的，次要的<br /> sneer 冷笑 嘲笑<br /> sweeten 变甜<br /> capacitor  [kəˈpæsɪtə]  n. 电容器<br /> formerly 以前<br /> extinct [prəˈpel] 绝种的 不复存在的<br /> cigar 雪茄</p><h2 id="48-trifle-ˈtraifl-琐事-少量"><a class="anchor" href="#48-trifle-ˈtraifl-琐事-少量">#</a> 48. trifle  [ˈtraifl] 琐事 少量</h2><p>fluctuate 使波动<br /><strong> residual</strong> [rɪˈzɪdʒu:əl] 剩余的 残留的<br /><strong> penetration</strong> [ˌpenɪˈtreɪʃən] 穿透 渗透 侵入<br /> vulgar 粗俗的 庸俗的<br /> stagger 使摇晃、震惊、错开<br /> mint 薄荷 巨额钱财 铸币厂<br /> hose 袜类 软管 水管<br /> dependant 受赡养者 侍从 家眷<br /> refrain 克制、忍住<br /> mob<br />confront<br />prototype<br />terminate</p><h2 id="49-stuffy-古板的-闷热的-不通的"><a class="anchor" href="#49-stuffy-古板的-闷热的-不通的">#</a> 49. stuffy 古板的 闷热的 不通的</h2><p>orchard [ˈɔ:tʃəd]  n. 果园<br /> pasture      n. 牧场；牧草地<br /> lubricate    vi. 润滑<br /> watchful     adj. 警觉的，警惕的<br /> rash         adj.  轻率的；鲁莽的<br /> virgin       adj. 未使用的<br /><strong> violate</strong>    vt. 违反，违背；侵犯；亵渎<br /> pope [pu:p]  n. （天主教）教皇<br /> reef<br />comedy<br /><strong>systematic</strong>    adj. 成体系的；有条理的<br /> sweetness     n. 令人愉快；芬芳<br /> destructive<br />hum</p><h2 id="50-fraction-分数-少量-一点儿"><a class="anchor" href="#50-fraction-分数-少量-一点儿">#</a> 50. fraction 分数、少量、一点儿</h2><p>pierce      刺穿、突破、穿透<br /> witty       风趣的、机智的<br /> fellowship  友谊、联谊会、研究院职位<br /> frail       虚弱的、易碎的、体弱的<br /> pant        vi. 喘气<br /> explicit    清晰的、直率的<br /> manuscript  手稿、原稿、手抄本<br /> suppress    镇压、隐瞒、抑制<br /> outermost   最远的<br /> haunt       常去的地方<br /> litter      使凌乱<br /> category<br />commend     称赞、表扬、推荐<br /> economics</p><h2 id="51-pious-ˈpaɪəs-adj-虔诚的伪善的"><a class="anchor" href="#51-pious-ˈpaɪəs-adj-虔诚的伪善的">#</a> 51. pious        [ˈpaɪəs]  adj. 虔诚的；伪善的</h2><p><strong>poultry</strong>         [ˈpəultri] 家禽<br /> quench              扑灭、止渴<br /> capacitance         [kəˈpæsɪtəns] 电容量<br /> fracture            v. 使裂开、骨折<br /> ripple              涟漪、细浪、波痕<br /> luminous            发光的<br /> assessment          评估<br /> stereo<br />irrigation<br />laundry<br />suffice             vi. 充足的<br /> soften              vi.<br />whisper</p><h2 id="52dedicate-ˈdedikeit-vt-致力献身投身"><a class="anchor" href="#52dedicate-ˈdedikeit-vt-致力献身投身">#</a> 52.dedicate [ˈdedikeit]  vt. 致力，献身，投身</h2><p>magistrate   地方法官<br /> herd         兽群<br /> hearth       壁炉地面、壁炉炉床<br /> cartridge    弹药筒、子弹<br /> heave        vt. 举起、使起伏、呕吐<br /> overseas    adj. 国外的、海外的<br /> divert      vi. 转移<br /> sodium      钠<br /> tilt<br />sodium<br />abundance<br />milky<br />commodity</p><h2 id="53melancholy-ˈmelənkəli-adj-忧郁的悲伤的"><a class="anchor" href="#53melancholy-ˈmelənkəli-adj-忧郁的悲伤的">#</a> 53.melancholy  [ˈmelənkəli]  adj. 忧郁的；悲伤的</h2><p>spectrum    系列、范围、波谱 [ˈspektrəm]<br /> analogue    类似物 [ˈænəˌlɔ:g]<br /> groove      vt. 开槽于<br /> algebra     代数 [ˈældʒibrə]<br /> mighty      强大的、巨大的 [ˈmaɪti:]</p><p>preach      说教<br /> valve       阀<br /> paragraph<br />troublesome<br />reckless    粗心大意的 鲁莽的<br /> validity    有效、效力、可信性</p><h2 id="54-forge-fɔdʒ-vt缔造-创造-开创-伪造"><a class="anchor" href="#54-forge-fɔdʒ-vt缔造-创造-开创-伪造">#</a> 54. forge  [fɔ:dʒ] vt. 缔造、创造、开创、伪造</h2><p>noted       著名的、知名的<br /> first-rate  一流的、高级的<br /> snore       vi. 打鼾、呼噜<br /> mast        给.. 装桅杆</p><p>charcoal    木炭、炭笔<br /> kilowatt    千瓦<br /> pitch       球场、音高、程度、沥青<br /> vault        [vɔ:lt] 拱顶、金库、墓穴<br /> grove       [ɡrəuv] 小树林、树丛<br /> pipe        管乐器、烟斗、管道<br /> scripture   经文、经典<br /> persistence 锲而不舍<br /> deposite    押金、寄存物、保证金、存款</p><h2 id="55-persevere-vi坚持-锲而不舍ˌpəsiˈviə"><a class="anchor" href="#55-persevere-vi坚持-锲而不舍ˌpəsiˈviə">#</a> 55. persevere  vi. 坚持、锲而不舍 [ˌpə:siˈviə]</h2><p>waver vi. 摇晃 犹豫不决<br /> trample 践踏 踩伤<br /> distinguish<br />devour  vt. 狼吞虎咽<br /> thrill<br />slaughter 屠杀 屠宰<br /> brace 准备 使紧靠 紧绷 (肩 or 膝)</p><p>latent 潜在的<br /> compulsory 强迫的 义务的<br /> representative</p><p>initially</p><p>propagation 繁殖 宣传 传播<br /> drawback<br />yacht   [jɔt] 游艇<br /> remainder 剩余物 余数</p><h2 id="56-boycott-vt联合抵制"><a class="anchor" href="#56-boycott-vt联合抵制">#</a> 56. boycott vt. 联合抵制</h2><p>tower vi 高耸 屹立<br /> gather<br />qualify</p><p>suspicious 可疑的 猜疑的 [səˈspiʃəs]</p><p>violation 违反<br /> regime [reiˈʒi:m]  政体 制度 养生法<br /> proposition 观点 命题<br /> amusement 娱乐 消遣<br /> whisker 络腮胡子 一丝 一点儿<br /> knight 骑士 武士 爵士<br /> descendant 子孙 后裔<br /> breed 品种<br /> prose 散文<br /> idleness 懒惰 闲散<br /> shrug 耸肩<br /> obedience 服从<br /> complement 补充 衬托物<br /> sincerity [sɪnˈserɪti:] 真诚 诚意</p><h2 id="57-designate-ˈdeziɡneit-vt-指派指定标示把定名为"><a class="anchor" href="#57-designate-ˈdeziɡneit-vt-指派指定标示把定名为">#</a> 57. designate [ˈdeziɡneit] vt. 指派；指定；标示；把… 定名为</h2><p>dock 船停码头 入港<br /> dominate<br />reconcile 使和好 调和 顺从<br /> telex  发电报<br /> resume 重新开始 恢复<br /> destine 命定 注定 预定 [ˈdestɪn]</p><p>watery<br />subordinate 下级的 次要的 [səˈbɔ:dinit]</p><p>cable 缆绳 电报<br /> champion  [ˈtʃæmpjən] 冠军 拥护者<br /> deficiency<br />tropic 热带地区 回归线<br /> disagreement<br />warrant 拘捕令 正当理由<br /> shipbuilding<br />shrine  [ʃrain]  n. 神庙，神龛，圣祠；圣地</p><h2 id="58-ingenuity-ˌɪndʒiˈnjuiti-n-心灵手巧"><a class="anchor" href="#58-ingenuity-ˌɪndʒiˈnjuiti-n-心灵手巧">#</a> 58. ingenuity [ˌɪndʒiˈnjuiti]  n. 心灵手巧</h2><p>participate<br />forsake [fəˈseik] 遗弃 抛弃 离开<br /> flect 弯曲<br /> deflect 偏移 转移 使脱离 放弃<br /> pluck 采摘 拔 弹乐器 修眉毛</p><p>industrious  [ɪnˈdʌstri:əs] 勤劳的 勤奋的<br /> geographical<br />decimal  [ˈdesiməl]  adj. 小数的，十进制的<br /> singular  [ˈsiŋɡjulə]  adj. 异常的；非凡的；单数的</p><p>membership 成员资格 会员人数<br /> hollow 树洞<br /> embroidery 刺绣<br /> terrorist 恐怖分子<br /> substance 物质 重要性 主旨<br /> buffalo  [ˈbʌfələu] 水牛 水陆坦克<br /> miser [ˈmaɪzə] 守财奴 吝啬鬼<br /> wrench 痛苦 扳钳 [rentʃ]  猛拉 使痛苦<br /> slander 诽谤 诋毁 [ˈslændər]</p><h2 id="59-fling-fliŋ-vtvi-猛掷突然冲向急伸"><a class="anchor" href="#59-fling-fliŋ-vtvi-猛掷突然冲向急伸">#</a> 59. fling [fliŋ]  vt.&amp;vi. 猛掷；突然冲向；急伸</h2><p>deal 买卖</p><p>wretched 不幸的 讨厌的 苦恼的 难过的 [ˈretʃid]</p><p>woe 悲伤 悲痛 麻烦<br /> bead 珠子<br /> generosity  慷慨 大方<br /> shrub 灌木<br /> banquet 宴会 盛宴 [ˈbæŋkwit]<br /> expenditure [ɪkˈspendətʃə] n. （时间等）消耗；花费，开销，支出<br /> inference 推论 结论<br /> Egyptian [ɪˈdʒɪpʃən]  n. 埃及人<br /> graphite 石墨 [ˈgræfˌaɪt]<br />Jupiter<br />erosion</p><h2 id="60-rebuke-riˈbjuk-vt-指责非难斥责"><a class="anchor" href="#60-rebuke-riˈbjuk-vt-指责非难斥责">#</a> 60. rebuke [riˈbju:k]  vt. 指责，非难，斥责</h2><p>entreat 恳求 乞求 [enˈtri:t]<br /> preside vi. 主持 负责<br /> flutter vi. 振翼 飘动<br /> peck 啄 轻吻<br /> rinse 漱口 冲洗  [rins]<br /> rebuck 指责 斥责</p><p>monstrous 骇人听闻的 巨大的<br /> yeast 酵母 [ji:st]<br /> motorway [ˈməʊtəˌweɪ] 高速公路<br /> seaside<br />ultraviolet [ˌʌltrəˈvaiəlit] 紫外线辐射<br /> vocation 职业 使命<br /> horizon 地平线 范围 眼界<br /> pirate [ˈpaiərit] 海盗 道德破坏者<br /> steak [steik] 牛排 牛肉</p><h2 id="61-console-安慰-慰藉-安抚-kənˈsəul"><a class="anchor" href="#61-console-安慰-慰藉-安抚-kənˈsəul">#</a> 61. console 安慰 慰藉 安抚 [kənˈsəul]</h2><p>chord vi. 和谐 [kɔ:d]</p><p>plain 素色的 朴素的 明显的 相貌平平的<br /> willow 柳树<br /> standardize<br />alignment 调准 结盟 联合</p><p><strong>conceit 自负 自大</strong><br /> spite 恶意 怨恨<br /> monarch [ˈmɔnək]  君主 帝王</p><p>stout 矮胖的 结实的 坚决的 [staut]<br /> expel 驱除</p><ol start="62"><li>thermal 热的 天然温热的 保暖的</li></ol><p>chill v. 使变冷 冷却 恐惧<br /> bankrupt<br />yearn vi. 渴望 渴求 向往<br /> evaporate vi. 消失</p><p>lofty 高耸的 崇高的 傲慢的<br /> ruthless 无情的 冷酷的 坚决的<br /> overwhelming [ˌəuvəˈhwelmiŋ]  巨大的 势不可挡的</p><p>pulley 滑轮 皮带轮 [ˈpʊli]<br /> herb 草<br /><strong> sim</strong>plicity 质朴 简单<br /> reproduction 繁殖 复制品 [ˌri:prəˈdʌkʃən]<br /> exposition [ˌekspəˈziʃən] n. 说明，解释；展览会，博览会<br /> outlaw 逃犯 亡命之徒 [ˈautlɔ:]</p><h1 id="63-faultless-完美无缺的-无可挑剔的"><a class="anchor" href="#63-faultless-完美无缺的-无可挑剔的">#</a> 63. faultless 完美无缺的 无可挑剔的</h1><p><strong>salute 向致敬 赞扬</strong> [səˈlu:t]<br /><strong> subdue 征服 克服</strong> [səbˈdju:]<br /> patrol v. 巡逻 [pəˈtrəul]<br /> muse vi. 沉思 冥想<br /> hike vi. 徒步旅行<br /> gamble 冒险 vt.</p><p>choice 优等的<br /> negative  呈阴性的</p><p>cape 披肩 斗篷<br /> sentiment 情绪 见解 感伤 眷恋<br /> regulation<br />frequency<br />aerospace 航天工业 (工业)<br /> proton 质子<br /> norm 规范<br /> chestnut 栗子 栗树 栗色<br /> lease 租约 租契</p><h1 id="64-bridle-vt控制-给套头ˈbraɪdl"><a class="anchor" href="#64-bridle-vt控制-给套头ˈbraɪdl">#</a> 64. bridle vt. 控制 给... 套头 [ˈbraɪdl]</h1><p>endow vt. 资助 赋予</p><p>barren 贫瘠的 无用的 不孕的 [ˈbærən]<br /> striking 显著的 妩媚动人的<br /><strong> gradient</strong> [ˈgreɪdi:ənt] adj. 倾斜的 梯度<br /> dynaimic (al) 力的</p><p>kidney 肾脏 肾 [ˈkidni]  肾，肾脏；（供食用的）腰子<br /> bugle 军号 喇叭 [ˈbju:gəl]<br />ballet<br />hostage 人质 受限制的人 [ˈhɔstidʒ]<br /> cooperative 合作社<br /> qualification 资格 素质 资历 限制条件</p><h1 id="65reel-v蹒跚-摇摆-踉跄-卷-绕"><a class="anchor" href="#65reel-v蹒跚-摇摆-踉跄-卷-绕">#</a> 65.reel v. 蹒跚 摇摆 踉跄 卷 绕</h1><p>stitch vt. 缝<br /> thicken 变浓稠 变密集</p><p>undesirable 不受欢迎的 不良的 有害的<br /> questionable 可疑的 有问题的<br /> infinitely adv. 无限地，无穷 [ˈɪnfɪnɪtlɪ]</p><p>flake 小薄片 碎片<br /> bearing 忍受 方位 举止 轴承<br /> Saturn [罗神] 农神  土星 [ˈsætən]<br />fa<strong>ste</strong>ner 扣件 纽扣 拉链 [ˈfɑ:sənə]<br /> arctic 北极 [ˈɑ:ktɪk]<br /> misery 痛苦 不幸 穷困 [ˈmizəri]<br /> epoch 时代 历元 [ˈi:pɔk]<br />、</p><h1 id="66-squat-vt使蹲下-擅自占用skwɔt"><a class="anchor" href="#66-squat-vt使蹲下-擅自占用skwɔt">#</a> 66. squat vt.(使) 蹲下 擅自占用 [skwɔt]</h1><p>negotiate  谈判 协商 顺利通过<br /> reproduce 模拟 复制 重复 繁殖<br /> raise  [reiz] 提出 举起 起身 提高 筹集<br /> adjoin  邻接 毗连 [əˈdʒɔin]<br /> insulate 将。隔离 使隔热、隔音、绝缘<br /> conceive 想象 以为 怀孕<br /> southwards<br />poll vi. 对・・・进行民意检测 获得 (票数)</p><p>sovereign 独立自主的 拥有最高统治权的 [ˈsɔvrin]<br /> thorough 仔细的 严谨的</p><p>modesty   谦逊 (地方) 小<br /> filth 污秽 污物 淫秽 [filθ]<br /> terrace 排屋 平台 梯田  [ˈterəs]<br /> warfare 战争<br /> amplitude 广大 广阔 大量 振幅 [ˈæmplɪˌtu:d]<br /> preservation [ˌprezəˈveiʃən] 保存<br /> refinery 精炼厂 提炼厂 [rɪˈfaɪnəri:]</p><h1 id="67-overhang-vi悬垂ˌəʊvəˈhæŋ"><a class="anchor" href="#67-overhang-vi悬垂ˌəʊvəˈhæŋ">#</a> 67. overhang vi. 悬垂 [ˌəʊvəˈhæŋ]</h1><p>coin 杜撰 制造硬币<br /> steal 窃取<br /> grope vi 探索<br /> conform vi<br />pattern 防制 模仿 以图案装饰<br /> reclaim 开垦 收回 申请退税</p><p>indispensable<br />eternal 永久的 不朽的 没完没了的 [i:ˈtə:nl]</p><p>chorus [ˈkɔ:rəs] 合唱 合唱团 副歌<br /> scarcity 缺乏 不足 稀少 [ˈskeəsɪti:]<br /> snob 势利小人<br /> battery 电池 一排 一系列 [ˈbætəri]<br /> quartz 石英<br /> incidence 发生 发生率 入射</p><h1 id="68-menace-ˈmenəs-v威胁-恐吓"><a class="anchor" href="#68-menace-ˈmenəs-v威胁-恐吓">#</a> 68. menace [ˈmenəs] v. 威胁 恐吓</h1><p>fence vi. 击剑 围栅栏</p><p>gorgeous [ˈɡɔ:dʒəs]  令人愉快的 漂亮的 绚丽的<br /> pregnent 怀孕的 意义深长的 耐人寻味的<br /> identical 同一的 完全相同的</p><p>ordinarily 通常</p><p>admiration [ˌædməˈreɪʃən]  钦佩 赞赏 羡慕<br /> coefficient [ˌkəʊəˈfɪʃənt]  协同因素 系数<br /> marsh 沼泽 湿地<br /> partition  [pɑ:ˈtiʃən]  隔墙 隔断 分开<br /> complexity<br />pumpkin<br />resignation  [ˌrezɪgˈneɪʃən]  屈从 顺从 辞呈<br /> predecessor  [ˈpri:disesə]  前辈 前任 前身<br /> weaver 织布工、者</p><h1 id="69-bestow-biˈstəu-给予-赠与-授予"><a class="anchor" href="#69-bestow-biˈstəu-给予-赠与-授予">#</a> 69. bestow [biˈstəu] 给予 赠与 授予</h1><p>bend vi. 屈从 弯腰<br /><strong> indulge</strong> [inˈdʌldʒ] vi. 纵容 娇惯<br /> filter vi. 过滤 走漏<br /> overtake 突然袭击 压倒 赶上<br /> trigger vt. 触发 引爆</p><p>onward (s) 向前的<br /> regorous [ˈriɡərəs] 严格的 严密的 一丝不苟的<br /> literary 精通文学的</p><p>electronics<br />forum [ˈfɔ:rəm] 论坛<br /> regiment 团 一大群 [ˈredʒimənt]<br /><strong>courtesy</strong> [ˈkə:tisi]  礼貌 彬彬有礼<br /> subscript 下标<br /> correlation 关系<br /> granite  [ˈɡrænit]  花岗岩</p><h1 id="70-hurl-vi猛投-həl"><a class="anchor" href="#70-hurl-vi猛投-həl">#</a> 70. hurl vi. 猛投 [hə:l]</h1><p>contend [kənˈtend] 声称 主张<br /> wag 摇摆 摇动 摇晃手指<br /> worship vi. 做礼拜</p><p>slack 萧条的 不景气的 懈怠的<br /> thrifty [ˈθrɪfti:] 节俭的 茂盛的<br /><strong> photoelectric</strong> [ˌfəʊtəʊɪˈlektrɪk] 光电的<br /> sheer 纯粹的 陡峭的 极薄的</p><p>token 代金券 记号 辅币<br /> jewellery [ˈdʒuːəlri] 珠宝 首饰<br /> deflection 偏斜 偏转<br /> satisfaction 满足 赔偿 补偿<br /> olive<br />neutron [ˈnu:ˌtrɔn] 中子<br /> sitting-room<br />shade 浓淡 深浅 阴凉处<br /> enclosure [inˈkləuʒə] 围绕 围场 圈占地 附件</p><h1 id="71-reign-rein-v占优势-盛行-统治-主宰"><a class="anchor" href="#71-reign-rein-v占优势-盛行-统治-主宰">#</a> 71 reign [rein] v. 占优势 盛行 统治 主宰</h1><p>impose 强加 使承受、打扰<br /> denounce 谴责 痛斥 告发<br /> traverse vt. 横穿 穿过 [ˈtrævəs]<br /> cherish 珍爱 怀有<br /> acknowledge 承认 公认 表示感谢<br /><strong> diminish</strong> 减少 减弱 贬低 [diˈminiʃ]</p><p>subtle 微妙的 机巧的 清淡的 [ˈsʌtl]<br /> integral 基本的 构成整体所必须的 [ˈintiɡrəl]<br /> accessory 附属的 同谋的 [ækˈsesəri]</p><p>interface 界面 接口<br /> vicinity 邻近 附近地区 [viˈsiniti]<br /> displacement 取代 免职<br /> wasp 黄蜂 [wɔsp]<br /> detector 探测器 检测仪<br /> electrician 电工 电气技师<br /> row 严重分歧 争吵 吵闹<br /> windmill 风车 [ˈwɪndˌmɪl]<br />bachelor</p><h1 id="72-rattle-发出震颤声-发出格格声-ˈrætl"><a class="anchor" href="#72-rattle-发出震颤声-发出格格声-ˈrætl">#</a> 72 rattle 发出震颤声 发出格格声 [ˈrætl]</h1><p>tack 用大头钉固定 曲折航行<br /> shatter 使粉碎 、破碎 [ˈʃætə]<br /> paralyse 使麻痹、瘫痪 [ˈpærəlaiz]</p><p>thoughtless 粗心的 欠考虑的 自私的 [ˈθɔ:tlɪs]<br /> irrespective 不考虑的 不顾的 [ˌɪrisˈpektiv]<br /> summary 概括的 速决的</p><p>glider 滑翔机<br /> propeller 螺旋桨 推进器 [prəˈpelə]<br /> dismay 惊恐 焦虑 哀伤<br /> ingredient 配料 成分 因素<br /> denial 否认 拒绝 [diˈnaiəl]<br /> accord 一致 符合 协议<br /> audience 正式会见 听众 读者  [ˈɔ:djəns]</p><h1 id="73-rally-vi-集合-团结-恢复-ˈræli"><a class="anchor" href="#73-rally-vi-集合-团结-恢复-ˈræli">#</a> 73 rally vi 集合 团结 恢复 [ˈræli]</h1><p>perish vi. 惨死 毁灭 老化   [ˈperiʃ]<br /> surpass 超出 [səˈpɑ:s]</p><p>instantaneous 瞬间的 即刻的  [ˌɪnstənˈteinjəs]<br /> grim 严峻的 阴森的 严肃的<br /> polar 极地的 完全相反的<br /> fair 合理的<br /> sturdy 坚定的 牢固的 [ˈstə:di]</p><p>antarctic 南极洲<br /> stew 炖煮的菜 [stju:]<br /> skyscraper 摩天楼<br /> lever 把手 杠杆 手段 方法  [ˈli:və]<br /> spice 香料 调味品 香气 趣味 [spais]<br /> burial 埋葬 葬礼 [ˈberiəl]<br /> disappearance 消失 失踪 丢失 被盗</p><h1 id="74-riot-vi发动暴乱-闹事"><a class="anchor" href="#74-riot-vi发动暴乱-闹事">#</a> 74 riot vi. 发动暴乱 闹事</h1><p><strong>oar vi. 划 [ɔ:]</strong><br /> coke vt.&amp;vi. 炼成焦炭<br /><strong> exemplify 作为... 例证 是... 典范</strong></p><p>even 恒定的 平坦的 平均的<br /> comparable 可比较的 类似的</p><p>counter 反方向地 对立地</p><p>directory 通讯录 目录<br /> parameter 参数 界限<br /> thigh 股 大腿  [θai]<br /> cavity 洞   [ˈkæviti]<br /> succession 继承权 一连串<br /> receiver 接收者 听筒<br /> recipe [ˈresəpi]<br /><strong> vigour 活力 精力 元气 [ˈvɪgə]</strong><br /><strong> faction 派别派系 小集团 内讧 [ˈfækʃən]</strong><br /> projector 投影仪 放映机<br /> lounge [laundʒ]</p><h1 id="75-scramble-ˈskræmbl-s-gan-bl-vi爬-攀登-仓促行动-争夺"><a class="anchor" href="#75-scramble-ˈskræmbl-s-gan-bl-vi爬-攀登-仓促行动-争夺">#</a> 75 scramble [ˈskræmbl] [s gan bl] vi. 爬 攀登 仓促行动 争夺</h1><p>inlet 引进<br /> paper 贴纸 掩饰 用纸覆盖 [ˈpeipə]<br /><strong>ascribe</strong> 把... 归因于 认为... 具有 [əsˈkraib]<br /> relay 转播 传送 传话 转述<br /> interconnect 使相互联系 [ˌɪntəkəˈnekt]</p><p>quanlitative 品质的 性质的 [ˈkwɔlitətiv]</p><p>peak 帽舌<br /><strong> frock</strong> 女裙 女装 [frɔk]<br />criterion  [kraiˈtiəriən]<br /><strong>firmness</strong> 坚固 坚实  [ˈfə:mnɪs]<br /> punch 打孔机 穿孔器<br /><strong> gust</strong> 一阵狂风 迸发 (感情) [ɡʌst]<br /><strong>pickle</strong> 腌菜 泡菜 困境 窘境 [ˈpɪkəl]<br /> array 陈列 布置 一大批<br /><strong> transverse</strong> 横轴 [trænsˈvɜ:s]<br /><strong>superiority</strong> [suːˌpɪəriˈɒrəti] 优越性 优势<br /> romance [rəuˈmæns]</p><h1 id="76-clash-v争论-发生冲突-不相容"><a class="anchor" href="#76-clash-v争论-发生冲突-不相容">#</a> 76 clash v. 争论 发生冲突 不相容</h1><p>unlimited<br />stiff 生硬的 不灵活的 酸痛的<br /> circular 环形的<br /> poke 戳 刺<br /> jingle 叮当响<br /> revive 使苏醒 复兴</p><p>ashore 在岸上 上岸</p><p>nun 修女<br /><strong> spectacle 场面 景象</strong> [ˈspektəkl]<br /><strong>majesty</strong> 庄严 雄伟 陛下 [ˈmædʒisti]<br /> grant 拨款 补助金<br /> concert 一致 和谐 音乐会<br /> vision 视力 展望 幻觉 [ˈviʒən]<br /> slit 狭长的切口 狭缝 [slit]<br /> anode 阳极 正极 [ˈænˌəʊd]<br /> architect 建筑师 [ˈɑ:kitekt]</p><h1 id="77-scoff-vi嘲笑-嘲弄-狼吞虎咽skɔf"><a class="anchor" href="#77-scoff-vi嘲笑-嘲弄-狼吞虎咽skɔf">#</a> 77 scoff vi. 嘲笑 嘲弄 狼吞虎咽 [skɔf]</h1><p>flock vi. 蜂拥 群集</p><p>deafen 使聋<br /> detain 耽搁 扣押 扣留<br /> magnify 加强 夸大</p><p>courageous 勇敢的 无畏的  [kəˈreɪdʒəs]<br /> courteous 有礼貌的 谦恭的  [ˈkə:tjəs]</p><p>polymer<br />execution<br />margin<br />surplus<br />compensation</p><h1 id="78-reckon-认为"><a class="anchor" href="#78-reckon-认为">#</a> 78 reckon 认为</h1><p>tramp vi. 步行、拖着沉重的步子走<br /> flee 逃避<br /> defy 挑战 反抗 不服从</p><p>customary 习惯的 习俗的 特有的<br /> axial</p><p>pendulum 钟摆 摇摆不定的<br /> solidarity 团结<br /> statistics 统计<br /> mosque 清真寺<br /> bait 饵 诱饵<br /> deformation 变形 畸形 算坏</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>relate_words</title>
      <link href="/2022/11/09/relate-words/"/>
      <url>/2022/11/09/relate-words/</url>
      
        <content type="html"><![CDATA[<h1 id="semaphore-ˈseməˌfôr"><a class="anchor" href="#semaphore-ˈseməˌfôr">#</a> semaphore /ˈseməˌfôr/</h1><p>名词：信号，旗语，臂板信号，信号机<br /> binary semaphore 二进制信号量</p><h1 id="simultaneously-同时地"><a class="anchor" href="#simultaneously-同时地">#</a> simultaneously 同时地</h1><h1 id="exclusive-独有的-专用的-排外的-排斥的"><a class="anchor" href="#exclusive-独有的-专用的-排外的-排斥的">#</a> exclusive   独有的、专用的、排外的、排斥的</h1><h1 id="synchronization-同步"><a class="anchor" href="#synchronization-同步">#</a> synchronization 同步</h1><h1 id="mutel-exclusion-within-the-monitor"><a class="anchor" href="#mutel-exclusion-within-the-monitor">#</a> mutel exclusion within the monitor</h1><p>监视器内的互斥排除</p><h1 id="monitor-管程"><a class="anchor" href="#monitor-管程">#</a> monitor 管程</h1><h1 id="intervals-名词-间隔-间隙-音程-幕间休息-际"><a class="anchor" href="#intervals-名词-间隔-间隙-音程-幕间休息-际">#</a> intervals 名词：间隔，间隙，音程，幕间休息，际</h1>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OS(三)内存管理</title>
      <link href="/2022/11/09/OS-%E4%B8%89-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/2022/11/09/OS-%E4%B8%89-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="内存管理の概念"><a class="anchor" href="#内存管理の概念">#</a> 内存管理の概念</h1><h2 id="内存空间の分配与回收"><a class="anchor" href="#内存空间の分配与回收">#</a> 内存空间の分配与回收</h2><blockquote><p>操作系统负责<strong>内存空间的分配与回收</strong><br /><a href="https://imgse.com/i/zHVRoV"><img data-src="https://s1.ax1x.com/2022/12/17/zHVRoV.jpg" alt="zHVRoV.jpg" /></a></p></blockquote><h2 id="内存空间の扩充"><a class="anchor" href="#内存空间の扩充">#</a> 内存空间の扩充</h2><ol><li>覆盖技术</li><li>交换技术</li><li>虚拟存储技术</li></ol><blockquote><p>操作系统需要提供某种技术从逻辑上<strong>对内存空间进行扩充</strong></p></blockquote><h2 id="地址转换"><a class="anchor" href="#地址转换">#</a> 地址转换</h2><blockquote><p>操作系统需要提供地址转换功能，负责程序的<strong>逻辑地址</strong>与<strong>物理地址</strong>的转换</p></blockquote><p>程序员只需关注指令、数据的逻辑地址。<br />而逻辑地址到物理地址的转换 (此过程称为<strong>地址重定位</strong>) 应该由 OS 负责</p><p>三种装入方式</p><ol><li>绝对装入：编译时产生绝对地址<br />编译器负责地址转换<br /> (单道程序阶段，此时还没有产生操作系统)</li><li>可重定位装入：装入时将逻辑地址转换为物理地<br />装入程序负责地址转换<br /> (用于早期的多道批处理系统)</li><li>动态运行时装入：运行时将逻辑地址转换为物理地址，需设置重定位寄存器<br />运行时才负责地址转换<br /> (现代操作系统)</li></ol><h2 id="内存保护"><a class="anchor" href="#内存保护">#</a> 内存保护</h2><blockquote><p>操作系统需要提供内存保护功能，保证各进程在各自存储空间内运行，互不干扰</p></blockquote><ul><li>方法 1：在 CPU 中设置一对上、下限寄存器，存放进程的上、下限地址。进程的指令要访问某个地址时，CPU 检查是否越界。<br /><a href="https://imgse.com/i/zAzy38"><img data-src="https://s1.ax1x.com/2022/11/15/zAzy38.jpg" alt="zAzy38.jpg" /></a></li><li>方法 2：采用<strong>重定位寄存器</strong> (又称<strong>基址寄存器</strong>) 和<strong>界地址寄存器</strong> (又称<strong>限长寄存器</strong>) 进行越界检查。<br />重定位寄存器中存放的是进程的 起始物理地址，<br />界地址寄存器中存放的是进程的 最大逻辑地址。<br /><a href="https://imgse.com/i/zAz6gS"><img data-src="https://s1.ax1x.com/2022/11/15/zAz6gS.jpg" alt="zAz6gS.jpg" /></a></li></ul><h1 id="覆盖与交换"><a class="anchor" href="#覆盖与交换">#</a> 覆盖与交换</h1><h2 id="覆盖技术"><a class="anchor" href="#覆盖技术">#</a> 覆盖技术</h2><p>思想：将程序分为多个段 (多个模块)。常用的段 常驻内存、不常用的段在需要时调入内存<br />内存中分为一个 &quot;固定区&quot; &amp; 若干个 &quot;覆盖区&quot;</p><p>需要常驻内存的段放在 “固定区”、调入内存后就不再调出。<br />不常用的段放在 “覆盖区”、需要用到时调入内存、用不到时调出内存。<br /><a href="https://imgse.com/i/zHE6UK"><img data-src="https://s1.ax1x.com/2022/12/16/zHE6UK.jpg" alt="zHE6UK.jpg" /></a></p><h2 id="交换技术"><a class="anchor" href="#交换技术">#</a> 交换技术</h2><p>思想：内存空间紧张时、系统将内存中某些进程暂时<strong>换出</strong>外存、把外存中某些具备运行条件的进程<strong>换入</strong>内存 (进程在内存与磁盘 间动态调度)</p><ul><li>内存紧张时、换出某些进程以腾出内存空间、再换入某些进程。</li><li>磁盘分为文件区和对换区、换出的进程放在对换区。</li></ul><p><strong>中级调度 (内存调度)</strong>、就是要决定将哪个处于挂起状态的进程重新调入内存。<br />暂时换出外存等待的进程为挂起状态 (suspend)--- 就绪挂起、阻塞挂起<br /><a href="https://imgse.com/i/xXfwb4"><img data-src="https://s1.ax1x.com/2022/11/06/xXfwb4.png" alt="xXfwb4.png" /></a></p><p><a href="https://imgse.com/i/zHVsMj"><img data-src="https://s1.ax1x.com/2022/12/16/zHVsMj.jpg" alt="zHVsMj.jpg" /></a></p><h2 id="覆盖与交换-2"><a class="anchor" href="#覆盖与交换-2">#</a> 覆盖与交换</h2><p>区别：<br />覆盖是在同一个程序 or 进程中的<br />交换是在不同进程 (or 作业) 之间的</p><h1 id="连续分配管理方式"><a class="anchor" href="#连续分配管理方式">#</a> 连续分配管理方式</h1><h2 id="单一连续分配"><a class="anchor" href="#单一连续分配">#</a> 单一连续分配</h2><p><a href="https://imgse.com/i/zHVbe1"><img data-src="https://s1.ax1x.com/2022/12/17/zHVbe1.jpg" alt="zHVbe1.jpg" /></a><br /> 内存中只有一道用户程序、用户程序独占整个用户区空间。<br />优点：实现简单、无外部碎片；可采用覆盖技术扩充内存；<br />不一定需要采取内存保护</p><h2 id="固定分区分配"><a class="anchor" href="#固定分区分配">#</a> 固定分区分配</h2><h2 id="动态分区分配"><a class="anchor" href="#动态分区分配">#</a> 动态分区分配</h2>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Kmeans</title>
      <link href="/2022/11/07/Kmeans/"/>
      <url>/2022/11/07/Kmeans/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>4_mul_linerRegression</title>
      <link href="/2022/11/07/4-mul-linerRegression/"/>
      <url>/2022/11/07/4-mul-linerRegression/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>OS(二)进程与线程</title>
      <link href="/2022/11/03/OS-%E4%BA%8C-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
      <url>/2022/11/03/OS-%E4%BA%8C-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="进程の概念-组成-特征"><a class="anchor" href="#进程の概念-组成-特征">#</a> 进程の概念、组成、特征</h1><p>概念：是动态的 是程序的一次执行过程<br />概念：是<strong>进程实体</strong>的运行过程，是系统进行<strong>资源分配</strong>和<strong>调度</strong>的一个独立单位</p><h2 id="进程の组成-pcb"><a class="anchor" href="#进程の组成-pcb">#</a> 进程の组成 - PCB</h2><p>进程被创建时，OS 为其分配の Process ID<br />OS 要记录 PID、进程所属用户 ID（UID）</p><p><strong>PCB 是进程存在の唯一标志</strong> process control block<br /><a href="https://imgse.com/i/z3CKW6"><img data-src="https://s1.ax1x.com/2022/11/22/z3CKW6.jpg" alt="z3CKW6.jpg" /></a></p><p><a href="https://imgse.com/i/z3CYTA"><img data-src="https://s1.ax1x.com/2022/11/22/z3CYTA.jpg" alt="z3CYTA.jpg" /></a></p><p>PCB 、程序代码、数据段 组成了<strong>进程实体 (进程映像)</strong><br /> PCB 是给 OS 用的<br />程序代码、数据段是给进程用的</p><p>一个<strong>进程实体 (进程映像)<strong> 由</strong> PCB、程序段、数据段</strong>组成。<br />进程是动态的，** 进程实体 (进程映像)** 是静态的。</p><h2 id="进程d特征"><a class="anchor" href="#进程d特征">#</a> 进程 d 特征</h2><p>动态性是 most basic<br /><a href="https://imgse.com/i/z3PfUA"><img data-src="https://s1.ax1x.com/2022/11/22/z3PfUA.jpg" alt="z3PfUA.jpg" /></a></p><h1 id="进程の状态与转换"><a class="anchor" href="#进程の状态与转换">#</a> 进程の状态与转换</h1><p><a href="https://imgse.com/i/xqnoIe"><img data-src="https://s1.ax1x.com/2022/11/03/xqnoIe.png" alt="xqnoIe.png" /></a></p><h2 id="状态"><a class="anchor" href="#状态">#</a> 状态</h2><h3 id="创建态-就绪态"><a class="anchor" href="#创建态-就绪态">#</a> 创建态、就绪态</h3><blockquote><p>进程正在被创建时，它的状态是 “<strong>创建态</strong>”，在这个阶段操作系统会为进程 分配资源，初始化 PCB</p></blockquote><blockquote><p>当进程创建完成后，便进入 “<strong>就绪态</strong>”，处于就绪态の进程已经具备运行条件，但由于没有空闲の CPU，就暂时不能运行</p></blockquote><h3 id="运行态"><a class="anchor" href="#运行态">#</a> 运行态</h3><blockquote><p>如果一个进程此时在 CPU 上运行，那么这个进程称处于 “<strong>运行态</strong>”<br />CPU 会执行该进程对应の程序 (执行指令序列)<br /><a href="https://imgse.com/i/xqQHTf"><img data-src="https://s1.ax1x.com/2022/11/03/xqQHTf.png" alt="xqQHTf.png" /></a></p></blockquote><h3 id="阻塞态"><a class="anchor" href="#阻塞态">#</a> 阻塞态</h3><blockquote><p>在进程运行过程中，可能会请求等待某个事件的发生 (如等待某种系统资源の分配 or 等待其他进程的响应)<br /> 让这个进程下 CPU ，并让它进入 &quot;<strong> 阻塞态</strong> &quot;<br /> 当 CPU 空闲时，又会选择另一个 “<em>就绪态</em>” 进程上 CPU 运行</p></blockquote><h3 id="终止态"><a class="anchor" href="#终止态">#</a> 终止态</h3><blockquote><p>该进程可执行 exit 系统调用，请求操作系统终止该进程<br />此时该进程会进入 “<strong>终止态</strong>”，操作系统会让该进程下 CPU 并回收内存空间等资源，最后还要回收该进程的 PCB。<br />当终止进程的工作完成后，这个进程彻底消失了</p></blockquote><h2 id="状态间の转换"><a class="anchor" href="#状态间の转换">#</a> 状态间の转换</h2><p><a href="https://imgse.com/i/xq1cGD"><img data-src="https://s1.ax1x.com/2022/11/03/xq1cGD.png" alt="xq1cGD.png" /></a></p><p>进程 PCB 中，会有一个变量 state 来表示进程的当前状态</p><h2 id="进程的组织方式"><a class="anchor" href="#进程的组织方式">#</a> 进程的组织方式</h2><p><a href="https://imgse.com/i/xq3KJO"><img data-src="https://s1.ax1x.com/2022/11/03/xq3KJO.png" alt="xq3KJO.png" /></a></p><h1 id="进程控制"><a class="anchor" href="#进程控制">#</a> 进程控制</h1><p><a href="https://imgse.com/i/xqzXmn"><img data-src="https://s1.ax1x.com/2022/11/04/xqzXmn.md.png" alt="xqzXmn.md.png" /></a></p><h2 id="基本概念"><a class="anchor" href="#基本概念">#</a> 基本概念</h2><ul><li><p>WHAT：<br />进程控制的主要功能是对系统中所有进程 实施有效的管理，具有创建新进程、策划小已有新进程、实现进程状态转换等功能</p><p>实现进程状态的转换</p></li><li><p>如何实现：用<strong>原语</strong>实现<br />原语 是一种特殊的程序，它的执行具有原子性。<br /><a href="https://imgse.com/i/xqaPKO"><img data-src="https://s1.ax1x.com/2022/11/03/xqaPKO.png" alt="xqaPKO.png" /></a><br /><a href="https://imgse.com/i/xqa8aj"><img data-src="https://s1.ax1x.com/2022/11/03/xqa8aj.png" alt="xqa8aj.png" /></a><br /><a href="https://imgse.com/i/xqaNR0"><img data-src="https://s1.ax1x.com/2022/11/03/xqaNR0.png" alt="xqaNR0.png" /></a></p></li></ul><h2 id="进程控制相关的原语"><a class="anchor" href="#进程控制相关的原语">#</a> 进程控制相关的原语</h2><p>Tip：无论哪个进程控制原语，要做的就三件事</p><ol><li><p>更新 PCB 中信息 (修改进程状态 state)  保存 / 恢复运行环境</p><ul><li>所有的进程控制原语一定都会会修改进程状态标志</li><li>录夺当前运行进程的 CPU 使用权 必然需保存其运行环境</li><li>某些进程开始运行前必然要恢复其运行环境</li></ul></li><li><p>将 PCB 插入合适的队列</p></li><li><p>分配 / 回收资源</p></li></ol><h3 id="进程的创建"><a class="anchor" href="#进程的创建">#</a> 进程的创建</h3><p><a href="https://imgse.com/i/xLSek6"><img data-src="https://s1.ax1x.com/2022/11/04/xLSek6.md.png" alt="xLSek6.md.png" /></a></p><h3 id="进程的终止"><a class="anchor" href="#进程的终止">#</a> 进程的终止</h3><p><a href="https://imgse.com/i/xLSVTx"><img data-src="https://s1.ax1x.com/2022/11/04/xLSVTx.md.png" alt="xLSVTx.md.png" /></a></p><h3 id="进程的阻塞"><a class="anchor" href="#进程的阻塞">#</a> 进程的阻塞</h3><h3 id="进程的唤醒"><a class="anchor" href="#进程的唤醒">#</a> 进程的唤醒</h3><p><a href="https://imgse.com/i/xLSmtK"><img data-src="https://s1.ax1x.com/2022/11/04/xLSmtK.md.png" alt="xLSmtK.md.png" /></a></p><h3 id="进程的切换"><a class="anchor" href="#进程的切换">#</a> 进程的切换</h3><p><a href="https://imgse.com/i/xLSE01"><img data-src="https://s1.ax1x.com/2022/11/04/xLSE01.md.png" alt="xLSE01.md.png" /></a></p><h1 id="进程通信ipc"><a class="anchor" href="#进程通信ipc">#</a> 进程通信 (IPC)</h1><p>Inter-process Communication 两个进程之间产生 数据交互<br />进程 是分配系统资源的单位 (include 内存地址空间)，因此各进程拥有的<strong>内存地址空间相互独立</strong><br />为保证安全，一个进程不能直接访问另一个进程的地址空间</p><h2 id="共享存储"><a class="anchor" href="#共享存储">#</a> 共享存储</h2><p>为避免出错，各个进程对共享空间的<strong>访问</strong>应该是<strong>互斥</strong>的<br />各个进程可使用 OS 内核提供的同步互斥工具 (PV 操作)</p><ol><li>基于数据结构的共享<br />比如共享空间里只能放一个长度为 10 的数组。这种通信方式速度慢、限制多、是一种<strong>低级通信</strong>方式</li><li>基于存储区的共享<br /> OS 在内存中划出一块共享存储区，数据的形式、存放位置都由通讯进程控制，而不是 OS。这种共享方式速度很快，是一种<strong>高级通讯</strong>方式</li></ol><h2 id="消息传递"><a class="anchor" href="#消息传递">#</a> 消息传递</h2><p>进程间的数据交换以格式化的消息 (Message) 为单位<br />进程通过 OS 提供的 “发送消息 / 接收消息” 两个<strong>原语</strong>进行数据交换</p><ol><li>直接通信方式<br />消息发送进程要指明 接收进程的 ID<br /><a href="https://imgse.com/i/xL7pIH"><img data-src="https://s1.ax1x.com/2022/11/04/xL7pIH.png" alt="xL7pIH.png" /></a></li><li>间接通信方式<br />通过 “信箱” 作为中间实体进行消息传递<br /><a href="https://imgse.com/i/xLTfMV"><img data-src="https://s1.ax1x.com/2022/11/04/xLTfMV.png" alt="xLTfMV.png" /></a></li></ol><h2 id="管道通信"><a class="anchor" href="#管道通信">#</a> 管道通信</h2><blockquote><p><strong>管道</strong>是一个特殊的共享文件，又名 pipe 文件。其实就是在内存中开辟一个大小固定的内存缓冲区<br />写进程往管道写数据，即使管道没被写满，只要管道没空，读进程就可以从管道中读数据<br />都进程从管道中读数据，即使管道没被读空，只要管道没满，写进程就可以往管道中写数据</p></blockquote><ol><li>管道只能采用<strong>半双工通信</strong>，某一时间段内只能实现单向的传输。如果要实现<strong>双向同时通信</strong>，则需要设置两个管道</li><li>各进程要<strong>互斥</strong>地访问管道 (由操作系统实现)</li><li>当管道<strong>写满</strong>时，<strong>写进程将阻塞</strong>，直到都进程将 管道中的数据取走，即可唤醒写进程</li><li>当管道<strong>读空</strong>时，<strong>读进程将阻塞</strong>，直到写进程往 管道中写入数据，即可唤醒读进程</li><li>管道中的数据一旦被读出，就彻底消失。<br />SO，当多个进程读同一个管道时，可能会错乱。对此，通常有两种解决方案：</li></ol><ul><li><strong>一个管道允许多个写进程，一个读进程</strong> (14 年官方答案)</li><li>允许<strong>有多个写进程，多个读进程</strong>，但系统会让各个读进程轮流从管道中读数据 (Linux の方案)</li></ul><h1 id="线程概念-多线程模型"><a class="anchor" href="#线程概念-多线程模型">#</a> 线程概念、多线程模型</h1><p><a href="https://imgse.com/i/xXRPxO"><img data-src="https://s1.ax1x.com/2022/11/06/xXRPxO.png" alt="xXRPxO.png" /></a><br /><a href="https://imgse.com/i/xL7LkQ"><img data-src="https://s1.ax1x.com/2022/11/04/xL7LkQ.png" alt="xL7LkQ.png" /></a><br /><a href="https://imgse.com/i/xLLhE8"><img data-src="https://s1.ax1x.com/2022/11/04/xLLhE8.png" alt="xLLhE8.png" /></a><br /> 可以把线程理解为 “轻量级进程”<br /><strong> 线程是一个基本的 CPU 执行单元</strong>，也是程序执行流的最小单位。<br />引入线程之后，不仅是进程之间可以并发，进程内的各线程之间也可以并发，从而进一步提升了系统的并发度，使得一个进程内使得一个进程内也可以并发处理各种任务 (如 tim 视频、文字聊天、传文件)</p><p>引入线程后，进程只作为除 COU 之外的系统资源的分配单元 (如 打印机、内存地址空间等 都是分配给进程的)</p><p>线程则作为<strong>处理机的分配单元</strong></p><h2 id="变化"><a class="anchor" href="#变化">#</a> 变化</h2><ol><li>资源分配、调度<ul><li>传统进程机制中，进程是 资源分配、调度的基本单位</li><li>引入线程后，进程是资源分配的基本单位，线程是调度的基本单位</li></ul></li><li>并发性<ul><li>传统进程机制中，只能进程之间并发</li><li>引入线程后，各线程间也能并发，进程间也并发，提高了并发度</li></ul></li><li>系统开销<ul><li>传统进程间并发，需要切换进程的运行环境，系统开销很大</li><li>线程间并发，如果是同一进程内的线程切换，则不需要切换进程环境，系统开销小</li><li>引入线程后，并发所带来的系统开销小</li></ul></li></ol><h2 id="属性"><a class="anchor" href="#属性">#</a> 属性</h2><ol><li>线程是处理机调度的单位</li><li>多 CPU 计算机中，各个线程可占用不同的 CPU</li><li>每个线程都有一个线程 ID 、线程控制块 (TCB)</li><li>线程也有 就绪、阻塞、运行 三种基本状态</li><li>线程几乎不拥有系统资源</li><li>同一进程の 不同线程间共享 进程の资源</li><li>由于共享内存地址空间，同一进程中の线程间通信甚至无需系统干预</li><li>同一进程间の线程切换 不会引起进程切换</li><li><strong>不同进程中の线程切换 会引起进程切换</strong></li><li>切换同进程内の线程，系统开销很小</li><li>切换进程，系统开销很大</li></ol><h1 id="线程的实现方式-多线程模型"><a class="anchor" href="#线程的实现方式-多线程模型">#</a> 线程的实现方式 &amp; 多线程模型</h1><h2 id="线程的实现方式"><a class="anchor" href="#线程的实现方式">#</a> 线程的实现方式</h2><h3 id="用户级线程"><a class="anchor" href="#用户级线程">#</a> 用户级线程</h3><p><a href="https://imgse.com/i/xOSRzD"><img data-src="https://s1.ax1x.com/2022/11/04/xOSRzD.png" alt="xOSRzD.png" /></a></p><ol><li>用户级线程由应用程序通过<strong>线程库</strong>实现，所有的<strong>线程管理工作</strong>都由应用程序负责 (包括 线程切换)</li><li>用户级线程中，<strong>线程切换</strong>可以在<strong>用户态下</strong>即可完成，无需操作系统干预</li><li>在用户看来，是由多个线程。但是在操作系统内核看来，并 意识不到线程の存在。<br />“用户级线程” 就是 “从用户视角能看到の线程”</li><li>优缺点：<ul><li>优点：用户级线程の切换 在用户空间即可完成，不需要切换到核心态，线程管理の系统开销小，效率高。</li><li>缺点：当一个用户级线程被阻塞后，整个进程都会被阻塞，并发度不高。 多个线程不可在多核处理机上并行运行。</li></ul></li></ol><h3 id="内核级线程"><a class="anchor" href="#内核级线程">#</a> 内核级线程</h3><p><a href="https://imgse.com/i/xOS4Ld"><img data-src="https://s1.ax1x.com/2022/11/04/xOS4Ld.png" alt="xOS4Ld.png" /></a></p><ol><li>内核级线程の管理工作由<strong>操作系统内核</strong>完成</li><li>线程调度、切换等工作都由内核负责，so 内核级线程の切换必然需要在<strong>核心态</strong>下才能完成</li><li>操作系统 会为每个 内核级线程建立相应的 TCB (Thread control Block 线程控制块)，通过 TCB 对线程进行管理。“内核级线程” 就是 “从操作系统内核视角看 能看得到的线程”</li><li>优缺点：<ul><li>优点：当一个线程被阻塞后，别的线程还可以继续执行，并发能力强。 多线程可在多核处理机上并发执行。</li><li>缺点：一个用户会占用多个内核级线程，线程切换由 OS 内核完成，需要切换到核心态，so 线程管理の成本高，开销大。</li></ul></li></ol><h2 id="多线程模型"><a class="anchor" href="#多线程模型">#</a> 多线程模型</h2><p>在支持内核级线程的系统中，根据用户级线程 and 内核级线程 の映射关系，可以划分为几种多线程模型</p><h3 id="一对一模型"><a class="anchor" href="#一对一模型">#</a> 一对一模型</h3><p><a href="https://imgse.com/i/xO9cvD"><img data-src="https://s1.ax1x.com/2022/11/04/xO9cvD.png" alt="xO9cvD.png" /></a><br /> 一个用户级线程 映射到 一个内核级线程。每个用户进程有与 用户级线程同数量の内核级线程</p><ul><li>优点：</li></ul><h3 id="多对一模型"><a class="anchor" href="#多对一模型">#</a> 多对一模型</h3><p><a href="https://imgse.com/i/xO9oPP"><img data-src="https://s1.ax1x.com/2022/11/04/xO9oPP.png" alt="xO9oPP.png" /></a></p><h3 id="多对多模型"><a class="anchor" href="#多对多模型">#</a> 多对多模型</h3><p><a href="https://imgse.com/i/xO9LrQ"><img data-src="https://s1.ax1x.com/2022/11/04/xO9LrQ.png" alt="xO9LrQ.png" /></a></p><p><a href="https://imgse.com/i/xOCSP0"><img data-src="https://s1.ax1x.com/2022/11/04/xOCSP0.png" alt="xOCSP0.png" /></a></p><h1 id="线程的状态与转换"><a class="anchor" href="#线程的状态与转换">#</a> 线程的状态与转换</h1><h2 id="状态与转换"><a class="anchor" href="#状态与转换">#</a> 状态与转换</h2><p><a href="https://imgse.com/i/xO2PLd"><img data-src="https://s1.ax1x.com/2022/11/05/xO2PLd.png" alt="xO2PLd.png" /></a></p><h2 id="组织与控制"><a class="anchor" href="#组织与控制">#</a> 组织与控制</h2><p><a href="https://imgse.com/i/xORd9f"><img data-src="https://s1.ax1x.com/2022/11/05/xORd9f.png" alt="xORd9f.png" /></a></p><h1 id="调度算法"><a class="anchor" href="#调度算法">#</a> 调度算法</h1><blockquote><p>Tips 作业调度 or 进程调度？ 抢占式 or 非抢占式？ 优缺点？<strong>是否导致饥饿？</strong></p></blockquote><h2 id="先来先服务fcfs"><a class="anchor" href="#先来先服务fcfs">#</a> 先来先服务 (FCFS)</h2><p><a href="https://imgse.com/i/xXMEfU"><img data-src="https://s1.ax1x.com/2022/11/05/xXMEfU.png" alt="xXMEfU.png" /></a></p><h2 id="短作业优先sjf"><a class="anchor" href="#短作业优先sjf">#</a> 短作业优先 (SJF)</h2><p><a href="https://imgse.com/i/xXMkkV"><img data-src="https://s1.ax1x.com/2022/11/05/xXMkkV.png" alt="xXMkkV.png" /></a><br /><a href="https://imgse.com/i/xXMZpF"><img data-src="https://s1.ax1x.com/2022/11/05/xXMZpF.png" alt="xXMZpF.png" /></a></p><h2 id="高响应比优先hrrn"><a class="anchor" href="#高响应比优先hrrn">#</a> 高响应比优先 (HRRN)</h2><p><a href="https://imgse.com/i/xXMAYT"><img data-src="https://s1.ax1x.com/2022/11/05/xXMAYT.png" alt="xXMAYT.png" /></a></p><p>！ 😂</p><table><thead><tr><th>算法</th><th>可抢占？</th><th>优点</th><th>缺点</th><th>考虑等待时间、运行时间</th><th>饥饿？   (某进程长期得不到服务)</th></tr></thead><tbody><tr><td>FCFS</td><td>非抢占式</td><td>公平；实现简单</td><td>对短作业不利、长作业有利</td><td>等待时间</td><td>不会</td></tr><tr><td>SJF/SPF</td><td>默认非抢占式 SJF/SPF  、抢占式 SRTN</td><td>拥有最短の平均等待时间、平均周转时间</td><td>对长作业不利、可能导致饥饿；难以做到真正の短作业优先</td><td>运行时间</td><td>会</td></tr><tr><td>HRRN</td><td>非抢占式</td><td>FCFS &amp; SJF の折中</td><td>😵</td><td>综合考虑等待时间、运行时间</td><td>不会</td></tr></tbody></table><blockquote><p>SJF/SPF 可用于 <strong>作业</strong>调度 job、<strong>进程</strong>调度 process   作业 / 进程の运行是由用户提供的，并不一定真实，不一定能做到真正的短作业优先<br /> S Remaining Time Next<br /><a href="https://imgse.com/i/xXQyUx"><img data-src="https://s1.ax1x.com/2022/11/05/xXQyUx.png" alt="xXQyUx.png" /></a></p></blockquote><h1 id="调度の层次-概念"><a class="anchor" href="#调度の层次-概念">#</a> 调度の层次、概念</h1><blockquote><p>作业：一个具体の任务<br />用户向系统提交一个作业～用户让 OS 启动一个程序 (来处理一个具体の任务)<br /> 挂起： 内存不够时，可将某些进程の数据调出外存。等 内存空闲 or 进程需要 运行时再重新调入内存。<br />暂时调到外存等待の进程状态 为 <strong>挂起状态</strong>。被挂起的进程 PCB 会被组织成<strong>挂起队列</strong>。<br />挂起态可分为：就绪挂起、阻塞挂起。<br />有的 OS 会把 就绪挂起、阻塞挂起 分为两个挂起队列，甚至会根据阻塞原因不同再把 阻塞挂起进一步细分为多个队列<br /><a href="https://imgse.com/i/xXfwb4"><img data-src="https://s1.ax1x.com/2022/11/06/xXfwb4.png" alt="xXfwb4.png" /></a></p></blockquote><h2 id="三个层次"><a class="anchor" href="#三个层次">#</a> 三个层次</h2><p><a href="https://imgse.com/i/xXhniR"><img data-src="https://s1.ax1x.com/2022/11/06/xXhniR.png" alt="xXhniR.png" /></a></p><ol><li><p>高级调度 (作业调度):<br /><strong> 外存 ---&gt; 内存</strong><br /><strong>按照某种规则，从后备队列中选择合适の作业将其调入内存，并为其创建进程。</strong><br />按一定的原则从 外存の作业后备队列中挑选一个作业 调入内存，并创建进程。 每个作业值调入一次，调出一次。 作业调入时 会创建 PCB，调出时 才撤销 PCB。</p></li><li><p>低级调度 (进程调度 / 处理机调度)：<br /><strong>内存 ---&gt;CPU</strong><br /><strong> 按照某种规则，从就绪队列中选择一个进程为其分配处理机。</strong><br />按照某种策略 从就绪队列中选取 一个进程，将处理机分配给它。<br />是 OS 中<strong>最基本の一种调度</strong>，在一般の OS 中都必须配置 进程调度。<br />进程调度の 频率很高，一般几十毫秒一次</p></li><li><p>中级调度 (内存调度)：<br /><strong>外存 ---&gt; 内存</strong><br /><strong>按照某种规则，从挂起队列中选择合适的进程 将其数据调回内存</strong><br />按照某种策略决定将哪个处于挂起状态の进程重新调入内存。<br />一个进程可能会被 多次调出、调入内存，因此<strong>中极调度</strong> 发生の频率要比高级调度更高。</p></li></ol><h1 id="进程互斥の软件实现方法"><a class="anchor" href="#进程互斥の软件实现方法">#</a> 进程互斥の软件实现方法</h1><h2 id="单标志法"><a class="anchor" href="#单标志法">#</a> 单标志法</h2><p>算法思想：两个进程在<em>访问完临界区后</em>会把使用临界区の权限 转交给另一个进程。<br />=<strong> 每个进程进入临界区の权限只能由另一个进程赋予</strong><br /> “同一时刻最多只允许一个进程访问临界区”</p><blockquote><p>未遵循 “空闲让进”<br /><a href="https://imgse.com/i/xXvRQe"><img data-src="https://s1.ax1x.com/2022/11/06/xXvRQe.png" alt="xXvRQe.png" /></a></p></blockquote><h2 id="双标志先检查"><a class="anchor" href="#双标志先检查">#</a> 双标志先检查</h2><blockquote><p>未遵循 “忙则等待”  (p0,p1 搞不好同时访问临界区)<br /><a href="https://imgse.com/i/xXvfLd"><img data-src="https://s1.ax1x.com/2022/11/06/xXvfLd.png" alt="xXvfLd.png" /></a></p></blockquote><h2 id="双标志后检查"><a class="anchor" href="#双标志后检查">#</a> 双标志后检查</h2><blockquote><p>未遵循 “空闲让进 、 有限等待” ，可能导致饥饿<br /><a href="https://imgse.com/i/xXvWsH"><img data-src="https://s1.ax1x.com/2022/11/06/xXvWsH.png" alt="xXvWsH.png" /></a></p></blockquote><h2 id="peterson算法"><a class="anchor" href="#peterson算法">#</a> Peterson 算法</h2><blockquote><p>遵循了 空闲让近、忙则等待、有限等待 三个原则，but 依未遵循 让权等待 原则<br /><a href="https://imgse.com/i/xXxj1O"><img data-src="https://s1.ax1x.com/2022/11/06/xXxj1O.png" alt="xXxj1O.png" /></a></p></blockquote><h1 id="进程互斥の硬件实现方法"><a class="anchor" href="#进程互斥の硬件实现方法">#</a> 进程互斥の硬件实现方法</h1><h2 id="中断屏蔽方法"><a class="anchor" href="#中断屏蔽方法">#</a> 中断屏蔽方法</h2><p>利用 “开 / 关中断指令” 实现 (与原语的实现思想相同，即 在某进程开始访问临近区到结束访问为止都不允许被中断，也就不能发生进程切换， 因此也不能发生两个同时 访问临界区的情况)</p><hr /><p>关中断；<br />临界区；<br />开中断；</p><hr /><p>优点：简单、高效<br />缺点：不适用于 多处理机；只适用于<strong>操作系统</strong>内核进程，不适用于 用户进程 (因为 开 / 关 中断指令只能运行在内核态， 这组指令如果能让用户随意使用会很危险)</p><h2 id="testandset指令"><a class="anchor" href="#testandset指令">#</a> TestAndSet 指令</h2><p>简称 TS、TSL 指令<br /> TSL 是用硬件实现的，执行过程中不允许被中断，只能一气呵成。<br />优点：适用于多处理机环境 实现简单、无需像软件方法严格检查是否有漏洞<br />缺点：不满足”<strong> 让权等待</strong> “原则，暂时无法进入临界区の进程会占用 CPU 并循环执行 TSL 指令，从而导致 “忙等”<br /><a href="https://imgse.com/i/xjQBmd"><img data-src="https://s1.ax1x.com/2022/11/06/xjQBmd.png" alt="xjQBmd.png" /></a></p><h2 id="swap指令"><a class="anchor" href="#swap指令">#</a> Swap 指令</h2><p>简称 Exchange XCHG 指令<br /> Swap 指令<strong>是用硬件实现の</strong>，执行过程中不允许被中断，只能一气呵成。<br />优点：适用于多处理机环境 实现简单、无需像软件方法严格检查是否有漏洞<br />缺点：不满足”<strong> 让权等待</strong> “原则，暂时无法进入临界区の进程会占用 CPU 并循环执行 TSL 指令，从而导致 “忙等”<br /><a href="https://imgse.com/i/xjlK4P"><img data-src="https://s1.ax1x.com/2022/11/06/xjlK4P.png" alt="xjlK4P.png" /></a></p><h1 id="互斥锁"><a class="anchor" href="#互斥锁">#</a> 互斥锁</h1><p>解决临界区最简单工具の就是<strong>互斥锁 (mutex lock)</strong> . 一个进程在进入临界区时应获得锁；在退出临界区时释放锁。 函数 acquire () 获得🔒，release () 释放🔒。<br />每个互斥锁有一个布尔变量 availabel, 表示🔒是否可用。</p><p>如果🔒是可用の，调用 acquire () 会成功，且🔒不再可用。当一个进程试图获取不可用的🔒时，会被阻塞，直到🔒被释放。</p><pre><code>  acquire()     while(!available)&#123;        ；                         //忙等待     available = false;            //获得锁     &#125;     release()&#123;     available = true;             //释放锁  &#125;</code></pre><p>acquire () 和 release () 的执行必须是原子操作，因此互斥锁通常采用硬件机制来实现。</p><p>互斥锁の主要缺点是<strong>忙等待</strong>，当有一个进程在临界区，任何其他进程在进入临界区时必须连续循环调用 acquire ()<br /> 当多个进程共享同一 CPU 时，就浪费了 CPU の生命周期。<br />因此，互斥锁 通常用于多处理系统，一个线程可以在一个处理器上等待，不影响其他线程の执行。</p><p>需要连续循环忙等的互斥锁，都可称为<strong>自旋锁 (spin lock)</strong>, 如 TSL、swap、单标志法</p><p>特性：</p><ul><li>需忙等，进程时间片用完才下 处理机，违反 “让权等待”</li><li>优点：等待期间不用切换上下文，多处理系统中，若上锁の时间短，则等待代价很低</li><li>常用于多处理系统，一个核忙等，其他核正常工作，并快速释放临界区</li><li>不太适用于单处理机系统，忙等の过程中不可能照常工作<br /><a href="https://imgse.com/i/xj8qa9"><img data-src="https://s1.ax1x.com/2022/11/06/xj8qa9.png" alt="xj8qa9.png" /></a></li></ul><h1 id="信号量机制"><a class="anchor" href="#信号量机制">#</a> 信号量机制</h1><p>1965，荷兰科学家 Dijkstra 提出の实现 “进程互斥、同步の方法”-- 信号量机制<br />用户进程可以通过使用 OS 提供の<strong>一对原语</strong>来对信号量进行操作，实现了进程互斥、进程同步。</p><p><strong>每个信号量至少记录 2 个信息：信号量的值 and 等待该信号量的进程队列 (queue PCB)</strong></p><p>(类 PASCAL 语言来描述)<br />semaphore = record<br />value: integer;<br />queue: ^PCB;<br />end;<br /> 其中 PCB 是进程控制块，是操作系统为每个进程建立的数据结构。</p><p><strong>信号量</strong>其实就是一个变量，一个信号量可 <strong>表示系统中某种资源の数量</strong>，如：系统中只有一台打印机，就可以设置一个处置为 1 的信号量。</p><p><strong>原语</strong>是一种特殊的程序段，其执行只能一气呵成，不可被中断。原语是由<strong>关中断 / 开中断指令</strong>实现的。</p><p><strong>一对原语</strong>：wait (S) 原语 &amp; signal (S) 原语，原语可理解为自己写的函数，<strong>信号量 S</strong> 为函数调用时传入の参数。</p><p>wait、signal 原语常<strong>简称为 P、V 操作</strong>。平时常写为 P (S)、V (S)</p><h2 id="整型信号量"><a class="anchor" href="#整型信号量">#</a> 整型信号量</h2><p>用一个<strong>整数型变量</strong>作为信号量，用来表示系统中某种资源的数量。<br />与普通整数信号量の区别：对信号量的操作只有三种：初始化、P 操作、V 操作</p><pre><code>  Eg：某计算机系统有一台打印机  int S = 1;         //初始化整形信号量，表示打印机资源个数  void wait(int S)&#123;          //wait原语，相当于“ 进入区”     while( S &lt;=0 );     S = S - 1;  &#125;  void signal(int S)&#123;           //signal原语，相当于“ 退出区”     S = S + 1;  &#125;</code></pre><p>进程 pi<br />...<br />wait (s);          // 进入区，申请资源<br />使用资源...        // 临界区，访问资源<br /> signal (s);        // 退出区，释放资源<br />...</p><h2 id="记录型信号量"><a class="anchor" href="#记录型信号量">#</a> 记录型信号量</h2><p>整型信号量缺陷 存在 “忙等” 问题，-&gt;, 记录型 数据结构表示の<strong>信号量</strong>。</p><blockquote><p>信号量 value&gt;0，value 表示可用资源的数量；value&lt;0，value 表示因该类资源阻塞的进程数量。<br />// 记录型信号量の定义<br /> typedef struct {<br />int value;              // 剩余资源数<br /> struct process *L;      // 等待队列<br />} semaphore;</p></blockquote><pre><code>  void wait( semaphore S)&#123;     S.value--;     if(S.value &lt; 0)&#123;        block(S.L);  //如果剩余资源数不够，使用block原语使进程 运行态-&gt;阻塞态，并把挂到信号量S的等待(阻塞)队列中     &#125;  &#125;  void singal( semaphore S)&#123;     S.value++;     if(S.value &lt;= 0)&#123;        wakeup(S.L);  //释放资源后，若还有别的进程在等待这个资源，则使用wakeuo原语唤醒等待队列中的一个进程，该进程从 阻塞态-&gt;就绪态     &#125;  &#125;</code></pre><p>P 操作 S.value &lt;0 该类资源已分配完毕，因此进程应调用 block 原语进行自我阻塞，主动放弃处理机，并插入该类资源的等待队列 S.L 中。可见，该机制遵循了 &quot;让权等待&quot; 原则，不会出现 “忙等” 现象。</p><h2 id="二进制信号量binary-semaphore"><a class="anchor" href="#二进制信号量binary-semaphore">#</a> 二进制信号量 (Binary Semaphore)</h2><p>只允许信号量取 0 or 1 值</p><h1 id="用信号量机制实现进程-互斥-同步-前驱关系"><a class="anchor" href="#用信号量机制实现进程-互斥-同步-前驱关系">#</a> 用信号量机制实现进程 互斥、同步、前驱关系</h1><p><strong>一个信号量对应一种资源</strong><br />信号量的值 = 这种资源的剩余数量 (信号量值 &lt; 0, 说明此时有进程在等待这种资源)<br /> P (S)-- 申请一个资源 S，若资源不够就阻塞等待<br /> V (S)-- 释放一个资源 S，若有进程在等待这个资源，则唤醒一个进程</p><h2 id="进程互斥"><a class="anchor" href="#进程互斥">#</a> 进程互斥</h2><p>basic：信号量 mutex 表示 “进入临界区的名额”</p><ol><li>分析并发进程的关键活动，划定临界区</li><li>设置<strong>互斥信号量</strong> mutex,<strong> 初值为 1</strong></li><li>在进入区 P (mutex)-- 申请资源</li><li>在退出区 V (mutex)-- 释放资源</li></ol><p>注意：对<strong>不同的临界资源</strong>需要<strong>设置不同的互斥信号量</strong><br />缺少 P (mutex) 就不能保证临界资源的互斥访问<br />缺少 V (mutex) 会导致资源永不被释放，等待进程永不被唤醒</p><pre><code>  //记录型信号量の定义  typedef struct&#123;     int value;              //剩余资源数     struct process *L;      //等待队列  &#125;semaphore;  //信号量机制实现互斥  semaphore mutex = 1;  P1()&#123;     ...     P(mutex);               //使用临界资源要加锁     临界区代码段...     V(mutex);               //解锁     ...  &#125;  P2()&#123;     ...     P(mutex);     临界区代码段...     V(mutex);     ...  &#125;</code></pre><h2 id="进程同步"><a class="anchor" href="#进程同步">#</a> 进程同步</h2><blockquote><p>要让各并发进程 按要求有序地推进</p></blockquote><ol><li>分析什么地方需要实现 “同步关系”，即必须保证 “一前一后” 执行的两个操作 (or 代码)</li><li>设置同步信号量 S，初值为 0</li><li>在 “前操作” 之后执行 V (S)</li><li>在 “后操作” 之前执行 P (S)<br /><a href="https://imgse.com/i/xzKBOe"><img data-src="https://s1.ax1x.com/2022/11/08/xzKBOe.png" alt="xzKBOe.png" /></a></li></ol><h2 id="进程前驱关系"><a class="anchor" href="#进程前驱关系">#</a> 进程前驱关系</h2><ol><li>要为每一对前驱关系各设置一个同步信号量</li><li>在 “前操作” 之后对相应的同步信号量执行 V 操作</li><li>在 “后操作” 之前对相应的同步信号两执行 P 操作</li></ol><p><a href="https://imgse.com/i/xzKgYt"><img data-src="https://s1.ax1x.com/2022/11/08/xzKgYt.png" alt="xzKgYt.png" /></a></p><h1 id="生产者消费者问题"><a class="anchor" href="#生产者消费者问题">#</a> 生产者消费者问题</h1><p>empty：空闲缓冲区の数量 初值 n<br />full：非空闲缓冲区の数量<br /><a href="https://imgse.com/i/zS5lhF"><img data-src="https://s1.ax1x.com/2022/11/09/zS5lhF.png" alt="zS5lhF.png" /></a><br /><a href="https://imgse.com/i/zAseVP"><img data-src="https://s1.ax1x.com/2022/11/14/zAseVP.jpg" alt="zAseVP.jpg" /></a><br /><a href="https://imgse.com/i/zAsVbt"><img data-src="https://s1.ax1x.com/2022/11/14/zAsVbt.jpg" alt="zAsVbt.jpg" /></a></p><h1 id="多生产者-多消费者"><a class="anchor" href="#多生产者-多消费者">#</a> 多生产者 - 多消费者</h1><h1 id="吸烟者问题"><a class="anchor" href="#吸烟者问题">#</a> 吸烟者问题</h1><h1 id="读者写者问题"><a class="anchor" href="#读者写者问题">#</a> 读者写者问题</h1><p>mutex (1):a semaphore which is used to ensure mutual exclusion when <em>readcount</em> is updated i.e. when any reader enters or exits from the critical section.<br /> 一个信号量，用于在 <em>readcount</em> 更新时确保互斥，即当任何阅读器进入或退出临界区时。</p><p>readcount (0): an integer variable that keeps track of <strong>how many processes are currently reading the object</strong>.<br /> 跟踪<strong>当前有多少进程正在读取对象</strong></p><p>wrt (1):a semaphore common to both reder and writer process.<br /><a href="https://imgse.com/i/zSoLfU"><img data-src="https://s1.ax1x.com/2022/11/09/zSoLfU.png" alt="zSoLfU.png" /></a></p><p><a href="https://imgse.com/i/zSTbDA"><img data-src="https://s1.ax1x.com/2022/11/09/zSTbDA.png" alt="zSTbDA.png" /></a><br /><a href="https://imgse.com/i/zSTHud"><img data-src="https://s1.ax1x.com/2022/11/09/zSTHud.png" alt="zSTHud.png" /></a></p><h1 id="哲学家进餐问题"><a class="anchor" href="#哲学家进餐问题">#</a> 哲学家进餐问题</h1><p><a href="https://imgse.com/i/zFzAk6"><img data-src="https://s1.ax1x.com/2022/11/13/zFzAk6.jpg" alt="zFzAk6.jpg" /></a><br />Declare condition self[5];<br />Allows philosopher i to delay when he is hungery but is unable to obtain chopsticks needed.</p><h1 id="管程"><a class="anchor" href="#管程">#</a> 管程</h1><h2 id="引入管程原因"><a class="anchor" href="#引入管程原因">#</a> 引入管程原因</h2><p>解决信号量机制存在的问题：编写程序困难、易出错<br />一种机制，让程序员写程序时不需再关注复杂的 PV 操作<br /> 1973 年，Brinch Hansen 首次再程序设计语言 (Pascal) 中引入 “管程” 成分 -- 一种高级同步机制</p><h2 id="管程的定义和基本特征"><a class="anchor" href="#管程的定义和基本特征">#</a> 管程的定义和基本特征</h2><p>管程是一种特殊的软件模块，有这些部分组成：</p><ol><li>局部于管程的 共享数据结构说明</li><li>对该数据结构进行操作的一组过程</li><li>对局部于管程的共享数据设置初始值的语句</li><li>管程有一个名字</li></ol><h2 id=""><a class="anchor" href="#">#</a> </h2><h1 id="死锁的概念"><a class="anchor" href="#死锁的概念">#</a> 死锁的概念</h1><p>哲学家问题中，if 5 个哲学家都拿起了走手边的筷子。</p><ul><li>每个人都占有资源，同时又在等待另一个人手里的资源</li><li>在并发环境下，各进程因竞争资源而造成的一种<em>互相等待对方手里的资源，导致各进程都阻塞，都无法向前推进</em>的现象</li></ul><h2 id="死锁-饥饿-死循环"><a class="anchor" href="#死锁-饥饿-死循环">#</a> 死锁、饥饿、死循环</h2><ol><li>死锁：一定是 “循环等待对方手里的资源” 导致的，因此如果有死锁现象，那么<strong>至少有两个 or 两个以上的进程同时发生死锁</strong>.<br /> 发生死锁的进程一定处于<strong>阻塞态</strong>。</li><li>饥饿：<strong>可能只有一个进程发生饥饿</strong>。可能是<strong>阻塞态</strong> or<strong> 就绪态</strong>、(长期得不到需要的 I/O 设备、长期得不到处理机)</li><li>死循环：可能只有一个进程发生死循环。死循环的 进程可以上处理机运行 (可以是 运行态)。<br />由代码的逻辑错误导致的 | 是被管理者的问题 (程序员来解决)；<br />死锁 &amp; 饥饿 由于 OS 分配资源的策略不合理导致的 | 是管理者 (OS) 的问题 (OS 来解决)</li></ol><h2 id="死锁产生的必要条件"><a class="anchor" href="#死锁产生的必要条件">#</a> 死锁产生的必要条件</h2><p>(必须同时满足以下 4 个条件)</p><ol><li><p>互斥条件：只有对必须互斥使用的资源 的争抢才会导致死锁 (哲学家筷子、打印机设备...)。像内存、扬声器这种可以同时让多个进程使用的资源是不会导致死锁的 (因为进程不用阻塞等待这种资源)</p></li><li><p>不剥夺条件：进程所获得的资源在未使用之前，<strong> 不能由其他进程强行夺走</strong>，只能主动释放。</p></li><li><p>请求和保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源又被其他进程占有，此时请求进程被阻塞，但又对自己已有的资源<strong>保持</strong>不放</p></li><li><p>循环等待条件：存在一种进程资源的循环等待链，链中的每一进程 已获得的资源 同时被下一个进程所请求</p></li></ol><ul><li>补充：发生死锁时一定有<strong>循环等待</strong>，但是发生循环等待时未必死锁。<br />(<strong>循环等待</strong>是发生死锁的 必要不充分条件)</li></ul><p>如果同类资源数大于 1，则循环等待时，未必发生死锁。<br />如果系统中每类资源都只有一个，那就是 充要条件 了。</p><h2 id="when-deadlock-happen"><a class="anchor" href="#when-deadlock-happen">#</a> When deadlock happen ?</h2><p>in all, 对不可剥夺资源的不合理分配，可能导致死锁</p><ol><li><p>对系统资源的竞争。<br />各进程对不可剥夺の资源 (如打印机) 的竞争可能引起死锁，<br />对可剥夺资源 (CPU) 的竞争是不会引起死锁的。</p></li><li><p>进程推进顺序非法。<br />请求和释放资源的顺序不当<br />如：并发执行的进程 P1、P2，各自申请并占有了资源 R1,R2，之后 P1 又紧接着申请 R2，P2 又申请资源 R1，两者会因为申请的资源被对方占有而阻塞，从而发生死锁</p></li><li><p>信号量的使用不当。<br />生产者 - 消费者问题中，如果互斥的 P 在 同步的 P 之前，就可能导致死锁 (互斥信号量、同步信号量 as 一种抽象的系统资源)</p></li></ol><h2 id="deadlock-的处理策略"><a class="anchor" href="#deadlock-的处理策略">#</a> deadlock 的处理策略</h2><ul><li>预防：破坏 4 个必要条件中的一个</li><li>避免：某种方法防止系统进入不安全状态，从而避免死锁 (银行家算法)</li><li>死锁的检测和解除：允许死锁发生、系统负责检测出死锁并解除</li></ul><h3 id="预防死锁"><a class="anchor" href="#预防死锁">#</a> 预防死锁</h3><ol><li>破坏互斥条件</li></ol><p>互斥条件：只有对必须互斥使用的资源的争抢才会导致互锁</p><ul><li>将临界资源改为可共享的资源 (如 SPOOLing 技术)</li><li>缺点：可行性不高、很多时候无法破环互斥条件。</li></ul><p>(为了系统安全、很多地方还必须保护这种互斥性)</p><ol start="2"><li>破坏不剥夺 条件</li></ol><p>不剥夺条件：进程所获得的资源在未使用之前，不能由其他进程强行夺走</p><ol><li>当某个进程请求新的资源得不到满足时，它必须立即释放保持的所有资源，待以后需要时重新申请。</li><li>当某个进程需要的资源被其他资源占有时，由 OS 协助将想要的资源强行剥夺。<br />this 一般要考虑各进程的优先级 (如:<strong> 剥夺调度方式</strong>，就是将处理机资源强行剥夺给优先级更高的进程使用)</li></ol><p>缺点：</p><ul><li>实现复杂</li><li>释放已获得的资源可能造成前一阶段工作的失效。 this 只适用于易保存 and 恢复状态的资源，如 CPU。</li><li>反复地申请 and 释放资源会增加系统的开销，降低系统的吞吐量。</li><li>对方案一，意味着只要暂时得不到某个资源，之前获得的那些资源就都由放弃，以后再重新申请。如果一直这样，会导致进程<strong>饥饿</strong></li></ul><ol start="3"><li>破坏请求和保持 条件<br />请求和保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源又被其它进程占有，此时请求进程被阻塞，但又对自己已有的资源保持不放。</li></ol><ul><li>采用静态分配方法，即进程在运行前 一次申请完它需要的全部资源，在它的资源未满足之前，不让它投入运行。<br />一旦投入运行后，这些资源就一直归它所有，该进程就不会再请求别的资源</li><li>缺点：有些资源可能只需要很短的时间，因此如果进程的整个运行时间一直都保持着所有资源，就会造成严重的资源浪费，资源利用率低。可能导致某些进程饥饿。</li></ul><ol start="4"><li>破坏 循环等待 条件<br />循环等待条件：存在一种进程资源的循环等待链，链中的每一个进程已获得的资源同时 被下一个进程所请求。</li></ol><ul><li>可采用<strong>顺序资源分配法</strong>：给系统中的资源编号，规定每个进程必须按编号递增的顺序请求资源，同类资源 (相同的资源) 一次申请完</li><li>缺点：不方便增加新设备、会导致资源浪费、用户编程麻烦<br /><a href="https://imgse.com/i/z3MtWF"><img data-src="https://s1.ax1x.com/2022/11/22/z3MtWF.jpg" alt="z3MtWF.jpg" /></a></li></ul><h1 id="避免死锁"><a class="anchor" href="#避免死锁">#</a> 避免死锁</h1><h2 id="安全序列"><a class="anchor" href="#安全序列">#</a> 安全序列</h2><h2 id="银行家算法"><a class="anchor" href="#银行家算法">#</a> 银行家算法</h2><h1 id="检测和解除"><a class="anchor" href="#检测和解除">#</a> 检测和解除</h1>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL(二) 关系数据库</title>
      <link href="/2022/11/02/SQL-%E4%BA%8C-%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2022/11/02/SQL-%E4%BA%8C-%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>简介：提出关系模型的是美国 IBM 公司的 E.F.Codd</p><ul><li>1970 年提出关系数据模型</li><li>after , 提出了<strong>关系代数</strong> and<strong> 关系演算</strong>的概念</li><li>1972 提出了关系的 第一、第二、第三范式</li><li>1974 提出了关系的 BC 范式</li></ul><h1 id="关系数据结构及形式化定义"><a class="anchor" href="#关系数据结构及形式化定义">#</a> 关系数据结构及形式化定义</h1><h2 id="关系"><a class="anchor" href="#关系">#</a> 关系</h2><pre><code>关系 ：单一的数据结构 。 现实世界的实体 及 实体间的各种联系均用关系来表示。二维表 ： 逻辑结构。     从用户角度，关系模型中的数据结构 是一张二维表。建立在集合代数的基础上。</code></pre><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>域 (Domain)</td><td>一组具有相同数据类型的集合</td></tr><tr><td>笛卡尔积 (Cartesian Product)</td><td>所有域所有取值的一个组合 ；不能重复</td></tr><tr><td>关系 (Relation)</td><td></td></tr></tbody></table><h3 id="域domain"><a class="anchor" href="#域domain">#</a> 域 (Domain)</h3><h4 id="一组具有相同数据类型的集合"><a class="anchor" href="#一组具有相同数据类型的集合">#</a> 一组具有相同数据类型的集合</h4><h3 id="笛卡尔积cartesian-product"><a class="anchor" href="#笛卡尔积cartesian-product">#</a> 笛卡尔积 (Cartesian Product)</h3><pre><code>from itertools import productfor x,y,z in product(['a','b','c'],['d','e','f'],['m','n']):    print(x,y,z)  </code></pre><p><a href="https://imgse.com/i/xHqMAH"><img data-src="https://s1.ax1x.com/2022/11/02/xHqMAH.png" alt="xHqMAH.png" /></a></p><ul><li>元组 (Tuple)<br /><a href="https://imgse.com/i/xHLS2t"><img data-src="https://s1.ax1x.com/2022/11/02/xHLS2t.png" alt="xHLS2t.png" /></a><ul><li>笛卡尔积中每一元素 (d1,d2,...,dn) 叫做一个 n 元组 (n-tuple) or 简称元组</li><li>(张青梅，计算机专业，李勇)</li></ul></li><li>分量 (Component)<ul><li>笛卡尔积元素 (d1,d2,...,dn) 中的每一个值 di 叫做一个分量。</li><li>张青梅、计算机专业、...</li></ul></li><li>基数 (Cardinal number)<ul><li><a href="https://imgse.com/i/xHLXLT"><img data-src="https://s1.ax1x.com/2022/11/02/xHLXLT.png" alt="xHLXLT.png" /></a></li></ul></li><li>笛卡尔积的表示方法<ul><li>可 一个二维表</li><li>每行对应一个元组，每列对应一个域</li><li><a href="https://imgse.com/i/xHOGm8"><img data-src="https://s1.ax1x.com/2022/11/02/xHOGm8.png" alt="xHOGm8.png" /></a></li></ul></li></ul><h3 id="关系relation"><a class="anchor" href="#关系relation">#</a> 关系 (Relation)</h3><h4 id="关系-2"><a class="anchor" href="#关系-2">#</a> 关系</h4><p><a href="https://imgse.com/i/xHO0lq"><img data-src="https://s1.ax1x.com/2022/11/02/xHO0lq.png" alt="xHO0lq.png" /></a></p><h4 id="元组"><a class="anchor" href="#元组">#</a> 元组</h4><p>关系中的每个元素是关系中的元组，通常用<strong> t</strong> 表示。</p><h4 id="单元关系-与-二元关系"><a class="anchor" href="#单元关系-与-二元关系">#</a> 单元关系 与 二元关系</h4><ul><li>n=1, 单元关系 (Unary relation) or 一元关系</li><li>n=2, 二元关系 (Binary relation)</li></ul><h4 id="关系的表示"><a class="anchor" href="#关系的表示">#</a> 关系的表示</h4><p>关系也是一个二维表，每行对应一个元组，每列对用一个域<br /><a href="https://imgse.com/i/xHOonK"><img data-src="https://s1.ax1x.com/2022/11/02/xHOonK.png" alt="xHOonK.png" /></a></p><h4 id="属性"><a class="anchor" href="#属性">#</a> 属性</h4><ul><li>关系中不同列可对应相同的域</li><li>为区分，必须对每列起一个名字，成为属性</li><li>n 目关系必有 n 个属性</li></ul><h4 id="码"><a class="anchor" href="#码">#</a> 码</h4><ul><li><p>候选码 (Candidate Key)</p><ul><li>若关系中的某一属性组的值能唯一地标识一个元组，则称<strong>该属性组</strong>为候选码</li><li>简单的情况：候选码只包含一个属性</li></ul></li><li><p>全码 (All-key)</p><ul><li>最极端的情况：关系模式中的所有属性组是这个关系模式的候选码，成为全码。</li></ul></li><li><p>主码</p><ul><li>若一个关系有多个候选码，则选定其中一个为主码 (Primary key)</li></ul></li><li><p>主属性</p><ul><li>候选码的诸属性成为<strong>主属性</strong> (Prime attribute)</li><li>不包含任何候选码的属性成为非主属性 (None-Prime attribute) or 非码属性</li><li><a href="https://imgse.com/i/xHXMEF"><img data-src="https://s1.ax1x.com/2022/11/02/xHXMEF.md.png" alt="xHXMEF.md.png" /></a></li></ul></li></ul><h4 id="三类关系"><a class="anchor" href="#三类关系">#</a> 三类关系</h4><ul><li><strong>基本关系</strong> (基本表 or 基表): 实际存在的表，是实际存储数据的逻辑表示。</li><li><strong>查询表</strong>：查询结果对应的表。</li><li><strong>视图表</strong>：是虚表，由基本表 or 其他试图表导出的表，不对应实际存储的数据。</li></ul><h4 id="基本关系的性质"><a class="anchor" href="#基本关系的性质">#</a> 基本关系的性质</h4><ul><li>列是同质的 (Homogeneous)</li><li>不同的列可出自同一个域</li><li>其中的每一列称为一个属性</li><li>不同的属性要给予不同的属性名</li><li>列的顺序无所谓，列的次序可任意交换。</li><li>行的顺序无所谓，行的次序可以任意交换。</li><li><strong>任意两个元组的候选码不能相同</strong></li><li>分量必须取原子值（most basic）<ul><li><a href="https://imgse.com/i/xHXqbT"><img data-src="https://s1.ax1x.com/2022/11/02/xHXqbT.png" alt="xHXqbT.png" /></a></li></ul></li></ul><h2 id="关系模式"><a class="anchor" href="#关系模式">#</a> 关系模式</h2><h3 id="what-关系模式"><a class="anchor" href="#what-关系模式">#</a> What 关系模式</h3><ul><li>关系模式 Relation Schema 是型</li><li>关系是值</li><li>关系模式是对关系的描述<ul><li>元组集合的结构</li><li>属性构成</li><li>属性来自的域</li><li>属性与域之间的映象关系</li></ul></li></ul><h3 id="定义-关系模式"><a class="anchor" href="#定义-关系模式">#</a> 定义 关系模式</h3><ul><li><a href="https://imgse.com/i/xHjroF"><img data-src="https://s1.ax1x.com/2022/11/02/xHjroF.png" alt="xHjroF.png" /></a></li><li><a href="https://imgse.com/i/xHjyi4"><img data-src="https://s1.ax1x.com/2022/11/02/xHjyi4.png" alt="xHjyi4.png" /></a></li><li><a href="https://imgse.com/i/xHjgzR"><img data-src="https://s1.ax1x.com/2022/11/02/xHjgzR.png" alt="xHjgzR.png" /></a></li></ul><h3 id="关系模式与关系"><a class="anchor" href="#关系模式与关系">#</a> 关系模式与关系</h3><ul><li><p>关系模式：</p><ul><li>对关系的描述</li><li>静态的、稳定的</li></ul></li><li><p>关系：</p><ul><li>关系模式在某一时刻的状态 or 内容</li><li>动态的、随时间不断变化的</li></ul></li><li><p>关系模式和关系往往统称为关系</p></li></ul><h2 id="关系数据库"><a class="anchor" href="#关系数据库">#</a> 关系数据库</h2><p>在一个给定的应用领域中，所有关系的集合构成一个关系数据库</p><h3 id="关系数据库の型与值"><a class="anchor" href="#关系数据库の型与值">#</a> 关系数据库の<strong>型</strong>与<strong>值</strong></h3><ol><li>关系数据库的型：关系数据库模式  对关系数据库的描述</li><li>关系数据库模式包括：<ul><li>若干域の定义</li><li>在这些域上定义の若干关系模式</li></ul></li><li>关系数据库の值：<ul><li>关系模式在某一时刻对应の关系の集合</li></ul></li></ol><h1 id="关系操作"><a class="anchor" href="#关系操作">#</a> 关系操作</h1><h2 id="基本关系操作"><a class="anchor" href="#基本关系操作">#</a> 基本关系操作</h2><h3 id="常用关系操作"><a class="anchor" href="#常用关系操作">#</a> 常用关系操作</h3><ul><li><strong>查询</strong>：选择、投影、连接、除、并、交、差</li><li><strong>数据更新</strong>：插入、删除、修改</li><li>查询的表达能力是其中最主要的部分</li><li><strong>选择、投影、并、差、笛卡尔积 是 5 种基本操作</strong></li></ul><h3 id="关系操作の特点"><a class="anchor" href="#关系操作の特点">#</a> 关系操作の特点：</h3><ul><li>集合操作方式：操作的对象和结果都是集合，一次一集合の方式</li></ul><h2 id="关系数据库语言の分类"><a class="anchor" href="#关系数据库语言の分类">#</a> 关系数据库语言の分类</h2><ul><li><p>关系代数语言：用对关系の运算来表达查询要求</p><ul><li>代表：ISBL</li></ul></li><li><p>关系演算语言：用为此来表达查询要求</p><ul><li>元组关系演算语言：<ul><li>谓词变元の基本对象是元组变量</li><li>代表：APLAHA,QUEL</li></ul></li><li>域关系演算语言：<ul><li>谓词变元の基本对象是域变量</li><li>代表：QBE</li></ul></li></ul></li><li><p>具有关系代数 and 关系演算双重特点の语言</p><ul><li>代表：SQL</li></ul></li></ul><h1 id="关系的完整性"><a class="anchor" href="#关系的完整性">#</a> 关系的完整性</h1><h2 id="关系の三类完整性约束"><a class="anchor" href="#关系の三类完整性约束">#</a> 关系の三类完整性约束</h2><p>1). 实体完整性<br /> 2). 参照完整性</p><p>关系模型必须满足の完整性约束条件 称为关系の两个<strong>不变性</strong>，应该由关系系统自动支持</p><p>3). 用户定义の完整性<br />应用领域需要遵循の约束条件，体现了具体领域中の语义约束</p><h2 id="实体完整性"><a class="anchor" href="#实体完整性">#</a> 实体完整性</h2><p><strong>规则 2.1 实体完整性规则 (Entity Integrity)</strong><br /> 若属性 A 是基本关系 R 的主属性，则属性 A 不能取空值<br />例子：<br />SAP(SUPERVISOR, SPECIALITY, POSTGRADUATE)<br />POSTGRADUATE:<br /> 主码 (假设研究生不会重名)<br /> 不能取空值</p><p>规则说明：</p><ol><li>实体完整性规则是针对基本关系而言的。一个基本表通常对应现实世界的一个实体集。</li><li>现实世界中的实体是可区分的，即它们具有某种唯一性标识</li><li>关系模型中以主码作为唯一标识</li><li>主码的属性即主属性不能取空值<br />主属性取空值，就说明存在某个不可标识的实体，即存在不可区分的实体，这与 2) 矛盾，因此这个规则称为实体完整性</li></ol><h2 id="参照完整性"><a class="anchor" href="#参照完整性">#</a> 参照完整性</h2><h3 id="关系间的引用"><a class="anchor" href="#关系间的引用">#</a> 关系间的引用</h3><p>关系模型中实体与实体间的联系都是用关系来描述的，因此肯存在着关系与关系间的引用<br />例子：<br />学生 (<strong>学号</strong>，姓名，性别，<strong>专业号</strong>，年龄)  #学号是主码<br />专业 (<strong>专业号</strong>，专业名)                     #专业号是主码</p><p>学生关系引用了 专业关系的主码 “专业号”<br /> 学生关系中的 “专业号” 值 必须是确实存在的 专业的专业号，即专业<br />关系中有该专业的记录</p><p>例 2：学生、课程、学生与课程之间多对多联系<br />学生 (<strong>学号</strong>，姓名，性别，专业号，年龄)<br /> 课程 (<strong>课程号</strong>，课程名，学分)<br /> 选修 (<strong>学号</strong>，<strong>课程号</strong>，成绩)</p><p>例 3：学生实体及其内部的一对多联系<br /><a href="https://imgse.com/i/zSaqTx"><img data-src="https://s1.ax1x.com/2022/11/09/zSaqTx.png" alt="zSaqTx.png" /></a><br /> “学号” 是主码，“班长” 是外码，它引用了本关系的 “学号”<br />“班长” 必须是确实存在的学生的 学生的学号</p><h3 id="外码"><a class="anchor" href="#外码">#</a> 外码</h3><p>H<sub>2</sub>O<br />K<sub>s</sub></p><ul><li>设<em> F</em> 是基本关系<em> R</em> 的一个 or 一组属性，但不是关系<em> R</em> 的码<br />如果<em> F</em> 与基本关系<em> S</em> 的主码 K<sub>s</sub> 相对应，则称 F 是基本关系 R 的外码</li><li>基本关系<em> R</em> 称为<strong>参照关系</strong> (Referencing Relation)</li><li>基本关系<em> S</em> 称为<strong>被参照关系</strong> (Referenced Relation) or <strong>目标关系</strong> (Target Relation)</li></ul><p>例 1：<br />学生关系的 专业号 与专业关系的主码 专业号 相对应</p><ul><li>” 专业号 “属性是学生关系的外码</li></ul><h3 id="参照完整性规则"><a class="anchor" href="#参照完整性规则">#</a> 参照完整性规则</h3><h2 id="用户定义の完整性"><a class="anchor" href="#用户定义の完整性">#</a> 用户定义の完整性</h2><h1 id="关系代数"><a class="anchor" href="#关系代数">#</a> 关系代数</h1><h2 id="传统的集合运算"><a class="anchor" href="#传统的集合运算">#</a> 传统的集合运算</h2><h3 id="并union"><a class="anchor" href="#并union">#</a> 并 (Union)</h3><h3 id="差difference"><a class="anchor" href="#差difference">#</a> 差 (Difference)</h3><h3 id="交intersection"><a class="anchor" href="#交intersection">#</a> 交 (Intersection)</h3><h3 id="笛卡尔积cartesian-product-2"><a class="anchor" href="#笛卡尔积cartesian-product-2">#</a> 笛卡尔积 (Cartesian Product)</h3><h2 id="专门的关系运算"><a class="anchor" href="#专门的关系运算">#</a> 专门的关系运算</h2><h3 id="选择"><a class="anchor" href="#选择">#</a> 选择</h3><h3 id="投影"><a class="anchor" href="#投影">#</a> 投影</h3><h3 id="连接"><a class="anchor" href="#连接">#</a> 连接</h3><h3 id="除"><a class="anchor" href="#除">#</a> 除</h3><h1 id="关系演算"><a class="anchor" href="#关系演算">#</a> 关系演算</h1><h1 id="小结"><a class="anchor" href="#小结">#</a> 小结</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ML</title>
      <link href="/2022/10/30/ML/"/>
      <url>/2022/10/30/ML/</url>
      
        <content type="html"><![CDATA[<h1 id="ch_1-basic"><a class="anchor" href="#ch_1-basic">#</a> CH_1 basic</h1><p>什么是 ML?</p><ul><li>机械式的复述</li><li>“举一反三” 是机器学习的目标</li><li>一旦机器具有了 “举一反三” 能力，就可以高效地替代人完成类似工作。</li></ul><p>ML の发展</p><ul><li>ML 诞生的标志是 1959 年 IBM 公司的计算机科学家 亚瑟・塞缪尔 编写的一个跳棋程序</li><li>近年来异常火热，在学术界得到特别重视，在产业界更是得到广泛应用，涉及到欺诈检测、客户定位、产品推荐、实时工业监控、自动驾驶、人脸识别、情感分析和医疗诊断等领域。</li></ul><p>1950，马文・明斯 &amp; 邓恩・埃德蒙 建造了世界上第一台神经网络计算机<br /> 1956，约翰・麦卡锡提出了 “人工智能” 一词<br /><a href="https://imgse.com/i/zVQp9K"><img data-src="https://s1.ax1x.com/2022/11/15/zVQp9K.jpg" alt="zVQp9K.jpg" /></a></p><h1 id="pca_"><a class="anchor" href="#pca_">#</a> PCA_</h1><p><a href="https://imgse.com/i/xIXxEj"><img data-src="https://s1.ax1x.com/2022/10/30/xIXxEj.png" alt="PCA" /></a></p><h2 id="step"><a class="anchor" href="#step">#</a> Step</h2><h3 id="1对所有样本进行中心化"><a class="anchor" href="#1对所有样本进行中心化">#</a> 1. 对所有样本进行中心化：</h3><h3 id="2计算样本协方差矩阵"><a class="anchor" href="#2计算样本协方差矩阵">#</a> 2. 计算样本协方差矩阵</h3><h3 id="3对协方差矩阵做特征值分解"><a class="anchor" href="#3对协方差矩阵做特征值分解">#</a> 3. 对协方差矩阵做特征值分解</h3><h3 id="4取最大的m个特征值所对应的单位特征向量w1w2w3wn"><a class="anchor" href="#4取最大的m个特征值所对应的单位特征向量w1w2w3wn">#</a> 4. 取最大的 m 个特征值所对应的单位特征向量 W1,W2,W3...Wn</h3>]]></content>
      
      
      <categories>
          
          <category> machine learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL</title>
      <link href="/2022/10/26/SQL/"/>
      <url>/2022/10/26/SQL/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章"><a class="anchor" href="#第一章">#</a> 第一章</h1><h2 id="1数据库系统概述"><a class="anchor" href="#1数据库系统概述">#</a> 1. 数据库系统概述</h2><h3 id="1四个基本概念"><a class="anchor" href="#1四个基本概念">#</a> 1. 四个基本概念</h3><h4 id="数据-data"><a class="anchor" href="#数据-data">#</a> 数据 Data</h4><ul><li>是数据库中存储的基本对象。</li><li>特点：数据与其语义是不可分的。</li></ul><h4 id="数据库-db"><a class="anchor" href="#数据库-db">#</a> 数据库 DB</h4><ul><li>是长期存储在计算机内、有组织的、可共享的 大量数据的集合。</li><li>基本特征：数据按一定的数据模型组织、描述和存储。<ul><li>可为各种用户共享。</li><li>冗余度较小。</li><li>数据独立性较高。</li><li>易拓展。</li></ul></li></ul><h4 id="数据库管理系统-dbms"><a class="anchor" href="#数据库管理系统-dbms">#</a> 数据库管理系统 DBMS</h4><ul><li><p>位于用户与操作系统之间的一层 数据管理软件。</p></li><li><p>是基础软件，是一个大型复杂的软件系统</p></li><li><p>用途：科学地组织和存储数据、高效地获取和维护数据</p></li><li><p>数据定义功能：提供数据定义语言 (DDL)。 定义数据库中的数据对象</p></li><li><p>数据组织、存储和管理：</p><ul><li>分类组织、存储和管理各种数据</li><li>确定 组织数据的文件结构和存取方式</li><li>实现数据之间的联系</li><li>提供多种存取方法提高存取效率</li></ul></li><li><p>数据操纵功能：</p><ul><li>提供数据操纵语言 (DML)</li><li>实现对数据库的基本操作 (查询、插入、删除 and 修改)</li></ul></li><li><p>数据库的事务管理和运行管理：</p><ul><li>数据库在建立、运行和维护时由 DBMS 统一管理和控制<br />保证数据的安全性、完整性、多用户对数据的并发使用发生故障后的系统恢复。</li></ul></li><li><p>数据库的建立和维护功能 (实用程序)</p><ul><li>数据库初始数据装载转换</li><li>数据库转储</li><li>介质故障恢复</li><li>数据库 的重组织</li><li>性能监视分析 etc</li></ul></li><li><p>其他功能：</p><ul><li>DBMS 与网络中其它软件系统的通信</li><li>两个 DBMS 系统的数据转换</li><li>异构数据库之间的互访和互操作</li></ul></li></ul><h4 id="数据库系统-dbs"><a class="anchor" href="#数据库系统-dbs">#</a> 数据库系统 DBS</h4><ul><li>在计算机系统中引入数据库后的系统构成</li><li>数据库系统构成：<ul><li>数据库</li><li>数据库管理系统 (及其开发工具)</li><li>应用系统</li><li>数据库管理员</li></ul></li></ul><h3 id="2数据库系统的特点"><a class="anchor" href="#2数据库系统的特点">#</a> 2. 数据库系统的特点</h3><ul><li><p>数据结构化</p></li><li><p>数据的共享性高，冗余度低，易扩充</p></li><li><p>数据独立性高：</p></li></ul><ol><li>物理独立性<br />物理存储改变了，应用程序不改变</li><li>逻辑独立性</li></ol><ul><li>数据由 DBMS 统一管理和控制</li></ul><ol><li><p>数据独立性是由 DBMS 的二级映像功能来保证的</p></li><li><p>DBMS 提供的数据控制功能</p><p>(1). 数据的安全性保护<br /> (2). 数据的完整性 (Integrity) 检查<br /> (3). 并发 (Concurrency) 控制<br /> (4). 数据库恢复</p></li></ol><h2 id="2数据模型"><a class="anchor" href="#2数据模型">#</a> 2. 数据模型</h2><p>分两类，分属两个不同的层次</p><h3 id="概念模型信息模型"><a class="anchor" href="#概念模型信息模型">#</a> 概念模型 (信息模型)</h3><p>按 用户的观点 来对数据和信息建模，用于数据库设计。</p><p>现实世界中的客观对象抽象为<strong>概念模型</strong><br />把概念模型转换为某一 DBMS 支持的数据模型</p><h3 id="逻辑模型-and-物理模型"><a class="anchor" href="#逻辑模型-and-物理模型">#</a> 逻辑模型 and 物理模型</h3><ul><li>逻辑模型：主要包括网状模型、层次模型、关系模型、面向对象模型，<br /> 按<strong>计算机系统的观点对数据建模，用于 DBMS 实现</strong></li><li>物理模型：对数据最底层的抽象，描述数据在系统内部的表示方式和存取方法，在磁盘或磁带上的存储方式和存取方法。<br /><a href="https://imgse.com/i/x4s7ff"><img data-src="https://s1.ax1x.com/2022/10/28/x4s7ff.png" alt="两步抽象.png" /></a></li></ul><h3 id="1数据模型的组成要素"><a class="anchor" href="#1数据模型的组成要素">#</a> 1. 数据模型的组成要素</h3><h4 id="1数据结构"><a class="anchor" href="#1数据结构">#</a> (1) 数据结构</h4><h4 id="2数据操作"><a class="anchor" href="#2数据操作">#</a> (2) 数据操作</h4><ul><li>查询</li><li>更新 (包括插入、删除、修改)</li></ul><h4 id="3完整性约束条件"><a class="anchor" href="#3完整性约束条件">#</a> (3) 完整性约束条件</h4><ul><li>一组完整性规则的集合</li><li>完整性规则：给定的数据模型中数据及其联系所具有的制约和存储规则</li><li>用以限定符合数据模型的数据库状态以及状态的变化，以保证数据的正确、有效、相容。</li><li><strong>完整定义</strong>：<br />(1). 反应和规定本数据模型必须遵守的基本的通用的完整性约束条件。<br />eg：在关系模型中，任何关系必须满足 [实体完整性] 和 [参照完整性] 两个条件。<br />(2). 提供定义完整性约束条件的机制，以反映具体应用所涉及的数据必须遵守的特定的语义约束条件。</li></ul><h3 id="2概念模型"><a class="anchor" href="#2概念模型">#</a> 2. 概念模型</h3><h4 id="1信息世界中的基本概念"><a class="anchor" href="#1信息世界中的基本概念">#</a> 1. 信息世界中的基本概念</h4><blockquote><p>实体 (Entity)：    客观存在并可互相区别的事物。可以是 具体的人、事、物 or 抽象的概念<br />属性 (Attribute): 实体具有的某一特征。一个实体可由若干个属性来刻画。<br />码 (Key): 唯一标识实体的属性集。<br />域 (Domain): 属性的取值范围<br />实体型 (Entity Type): 用实体名及其属性名集合 来抽象和刻画同类实体<br />实体集 (Entity Set): 同一类型实体的集合<br />联系 (Relationship):</p><blockquote><p>现实世界中事物内部以及事物之间的联系在信息世界中反映为实体内部的联系 and 实体之间的联系。<br /><strong>实体内部</strong>的联系通常是指组成实体的各属性之间的联系<br /><strong>实体之间</strong>的联系通常是指不同实体集之间的联系</p></blockquote></blockquote><h4 id="2两个实体型之间的联系"><a class="anchor" href="#2两个实体型之间的联系">#</a> 2. 两个实体型之间的联系</h4><p><a href="https://imgse.com/i/x52D91"><img data-src="https://s1.ax1x.com/2022/10/29/x52D91.png" alt="两个实体型之间的联系" /></a></p><h4 id="3两个以上实体型之间的联系"><a class="anchor" href="#3两个以上实体型之间的联系">#</a> 3. 两个以上实体型之间的联系</h4><p><a href="https://imgse.com/i/x5Rc2q"><img data-src="https://s1.ax1x.com/2022/10/29/x5Rc2q.png" alt="两个以上实体型之间的联系" /></a></p><h4 id="4单个实体型内的联系"><a class="anchor" href="#4单个实体型内的联系">#</a> 4. 单个实体型内的联系</h4><p><a href="https://imgse.com/i/x5RHR1"><img data-src="https://s1.ax1x.com/2022/10/29/x5RHR1.png" alt="单个实体型内的联系" /></a></p><h4 id="5概念模型的一种表示方法"><a class="anchor" href="#5概念模型的一种表示方法">#</a> 5. 概念模型的一种表示方法</h4><p>E-R 图</p><h4 id="6一个实例"><a class="anchor" href="#6一个实例">#</a> 6. 一个实例</h4><p><a href="https://imgse.com/i/x5RzIH"><img data-src="https://s1.ax1x.com/2022/10/29/x5RzIH.png" alt="" /></a></p><h3 id="3最常用的数据模型"><a class="anchor" href="#3最常用的数据模型">#</a> 3. 最常用的数据模型</h3><h4 id="1非关系模型"><a class="anchor" href="#1非关系模型">#</a> 1. 非关系模型</h4><ul><li>层次模型 (Hierarchical Model)</li><li>网状模型 (Network Model)</li></ul><h4 id="2关系模型relational-model"><a class="anchor" href="#2关系模型relational-model">#</a> 2. 关系模型 (Relational Model)</h4><h4 id="3面向对象模型object-oriented-model"><a class="anchor" href="#3面向对象模型object-oriented-model">#</a> 3. 面向对象模型 (Object Oriented Model)</h4><h4 id="4对象关系模型object-relational-model"><a class="anchor" href="#4对象关系模型object-relational-model">#</a> 4. 对象关系模型 (Object Relational Model)</h4><h3 id="4层次模型"><a class="anchor" href="#4层次模型">#</a> 4. 层次模型</h3><p>是数据库系统中最早出现的 数据模型，典型代表：IBM 公司的 IMS (info Management System) 数据库管理系统；用<strong>树形结构</strong>来表示各类实体以及实体间的联系。</p><h4 id="1层次模型的数据结构"><a class="anchor" href="#1层次模型的数据结构">#</a> 1. 层次模型的数据结构</h4><ul><li>满足 de 集合：<ul><li>根节点 (有且只有一个结点 没有双亲结点)</li><li>根以外的其它结点有且只有一个双亲结点</li></ul></li><li>术语：根节点，双亲结点，兄弟结点，叶结点</li></ul><h4 id="2多对多联系在层次模型中的表示"><a class="anchor" href="#2多对多联系在层次模型中的表示">#</a> 2. 多对多联系在层次模型中的表示</h4><ul><li>方法：多对多联系分解成一对多联系</li><li>分解方法：<ul><li>冗余结点法</li><li>虚拟结点法</li></ul></li></ul><h4 id="3层次模型的数据操纵与完整性约束"><a class="anchor" href="#3层次模型的数据操纵与完整性约束">#</a> 3. 层次模型的数据操纵与完整性约束</h4><ul><li><p>层次模型的数据操纵</p><ul><li>查询</li><li>插入</li><li>删除</li><li>更新</li></ul></li><li><p>层次模型的完整性约束条件</p></li></ul><h4 id="4层次模型的存储结构"><a class="anchor" href="#4层次模型的存储结构">#</a> 4. 层次模型的存储结构</h4><blockquote><p><strong>邻接法</strong>： 按照树的前序遍历 ----&gt; 依次邻接存放，即通过物理空间的位置相邻来实现层次谁徐<br /><strong>链接法</strong>：(用来反映数据之间的层次关系)</p><blockquote><p>子女 - 兄弟链接法：<br />层次序列链接法：<br /><a href="https://imgse.com/i/x5IaMn"><img data-src="https://s1.ax1x.com/2022/10/29/x5IaMn.png" alt="" /></a></p></blockquote></blockquote><h4 id="5优缺点"><a class="anchor" href="#5优缺点">#</a> 5. 优缺点：</h4><p>优点：<br />数据结构简单清晰<br />查询效率高，性能 优于关系模型，不低于 网状模型<br />提供了良好的完整性支持</p><p>缺点：<br />多对多联系表示不自然<br />对插入删除擦做限制多，引用程序的编写比较复杂<br />查询子女结点必须通过双亲结点<br />由结构严密，层次命令趋于程序化</p><h3 id="5网状模型"><a class="anchor" href="#5网状模型">#</a> 5. 网状模型</h3><h3 id="6关系模型"><a class="anchor" href="#6关系模型">#</a> 6. 关系模型</h3>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ch2_数据链路层</title>
      <link href="/2022/10/16/Ch2-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
      <url>/2022/10/16/Ch2-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="数据链路层"><a class="anchor" href="#数据链路层">#</a> 数据链路层</h1><h2 id="基本概念"><a class="anchor" href="#基本概念">#</a> 基本概念</h2><ul><li><strong>结点</strong>：主机、路由器。</li><li><strong>链路</strong>：网络中两个结点之间的<strong>物理通道</strong>，链路的传输介质主要有 - 双绞线、光纤 and 微波。分为 有线链路、无线链路。</li><li><strong>数据链路</strong>：网络中两个结点之间的<strong>逻辑通道</strong>，把实现控制数据 传输协议的硬件和软件加到链路上 就构成数据链路。</li><li><strong>桢</strong>：链路层的协议数据单元，封装网络层数据报。</li><li><strong>数据链路层</strong>：负责通过一条链路 从一个结点向另一个物理链路直接相连的相邻结点 传送数据报。</li></ul><p>功能概述：在物理层提供服务的基础上向 网络层提供服务，其最基本的服务是 将源自网络层来的数据可靠地传输到相邻结点的目标机网络层。<br />主要作用：<strong>加强物理层传输原始比特流</strong>的功能。将物理层提供的可能出错的物理连接改造成为 逻辑上无差错的数据链路，使之对网络层表现为一条无差错的链路。</p><pre><code>**功能一**：为网络层提供服务。有确认无连接服务，无确认无连接服务，有确认面向连接服务。！有连接一定有确认！**功能二**：链路管理，即连接的建立、维持、释放。(用于面向连接服务)**功能三**：组帧。**功能四**：流量控制。**功能五**：差错控制(帧错/位错)。</code></pre><h1 id="封装成帧透明传输"><a class="anchor" href="#封装成帧透明传输">#</a> 封装成帧 &amp; 透明传输</h1><h2 id="封装成帧"><a class="anchor" href="#封装成帧">#</a> 封装成帧</h2><ul><li><strong>封装成帧</strong>：在一段数据的前后部分添加首部和尾部，构成一个帧。<br />接收端在收到物理层 上交的比特流后，就能根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束。<br />首部和尾部包含许多的控制信息，重要作用 -- 帧定界 (确定帧的界限)</li><li><strong>帧同步</strong>：接收方应当能从接收到的 二进制比特流中区分出 帧的起始和终止。</li></ul><p><strong>组帧</strong>四种方法：字符计数法、字符 (节) 填充法、零比特填充法、违法编码法。</p><h2 id="透明传输"><a class="anchor" href="#透明传输">#</a> 透明传输</h2><p>是指不管所传的数据是什么样的比特组合，都应当能在链路上传送。so，链路层就 &quot;看不见&quot; 有什么妨碍数据传输的东西。<br />当所传数据中的比特组合恰巧与某一个控制信息完全一样时，就必须采取适当的措施，使接收方不会将这样的数据误认为是某种控制信息。这样才能保证数据链路层的传输透明的。</p><h3 id="字符计数法"><a class="anchor" href="#字符计数法">#</a> 字符计数法</h3><p><a href="https://imgse.com/i/zDZ4qf"><img data-src="https://s1.ax1x.com/2022/12/02/zDZ4qf.jpg" alt="zDZ4qf.jpg" /></a></p><h3 id="字符节填充法"><a class="anchor" href="#字符节填充法">#</a> 字符 (节) 填充法</h3><p>(字符填充的首位定界法)<br /> 方法是：发送端的数据链路层在数据中出现控制字符 “SOH” 或 “EOT” 的前面插入一个转义字符”ESC”。而在接收端的数据链路层在将数据送往网络层之前删除这个插入的转义字符。我们把这种方法叫做字节填充法。当然如果转义字符”ESC“也出现在数据当中，那么解决的方法仍然是在转义字符的前面插入一个转义字符，所以，当接受到连续的两个转义字符的时候，就去删除其中前面的一个<br /><a href="https://imgse.com/i/zDZIZ8"><img data-src="https://s1.ax1x.com/2022/12/02/zDZIZ8.jpg" alt="zDZIZ8.jpg" /></a></p><h3 id="零比特填充法"><a class="anchor" href="#零比特填充法">#</a> 零比特填充法</h3><p>由于使用 01111110（6 个 1）来标志一帧的开始和结束，故发送方只要在数据中遇到 5 个连续的 “1” 时，自动在其后插入一个 “0”；接收方每收到 5 个连续的 “1” 时，自动删除后面紧跟的 “0”，以恢复原信息。<br /><strong>保证了透明传输：在传送的比特流中可以传送任意比特组合，而不会引起对帧边界的判断错误。</strong><br /><a href="https://imgse.com/i/zDZhsP"><img data-src="https://s1.ax1x.com/2022/12/02/zDZhsP.jpg" alt="zDZhsP.jpg" /></a></p><h3 id="违法编码发"><a class="anchor" href="#违法编码发">#</a> 违法编码发</h3><p>曼彻斯特编码：</p><p>计算机传输数据时，用「电流」的高低来标识数据，「一高一低」的电流表示 1 ，「一低一高」的电流表示 0 。</p><p>违规编码法利用违规的电流来表示帧界定符，比如，用两个连续的高电流表示帧的开始，两个连续的底电流表示帧的结束<br />局域网中 IEEE 802 就采用了这种方法。<br /><a href="https://imgse.com/i/zDZfMt"><img data-src="https://s1.ax1x.com/2022/12/02/zDZfMt.jpg" alt="zDZfMt.jpg" /></a></p><p>差分曼彻斯特编码：</p><h1 id="差错控制检错编码"><a class="anchor" href="#差错控制检错编码">#</a> 差错控制 (检错编码)</h1><p>传输中的差错都是由于噪声引起的。</p><ol><li>全局性：由于线路本身的电气特性所产生的<strong>随机噪声</strong> (热噪声)，是信道固有的，随即存在的。<br />解决方法：提高信噪比来减少 or 避免干扰。(对传感器下手)</li><li>局部性：外界特性的短暂原因所造成的<strong>冲击噪声</strong>，是产生差错的主要原因。<br />解决方法：通常利用编码技术来解决。</li></ol><p><a href="https://imgse.com/i/zDeFzR"><img data-src="https://s1.ax1x.com/2022/12/02/zDeFzR.jpg" alt="zDeFzR.jpg" /></a><br /> 链路层为网络层提供服务：无确认无连接服务、有确认无连接服务、有确认面向连接服务。</p><h2 id="检错编码"><a class="anchor" href="#检错编码">#</a> 检错编码</h2><h3 id="奇偶校验"><a class="anchor" href="#奇偶校验">#</a> 奇偶校验</h3><blockquote><p>奇校验：这串序列 1 的个数如果为偶数则在前面加个 1，使 1 的个数变成奇数，否则加 0。</p></blockquote><blockquote><p>偶校验：这串序列 1 的个数如果为奇数则在前面加个 1，使 1 的个数变成偶数，否则加 0。</p></blockquote><h3 id="循环冗余码crc"><a class="anchor" href="#循环冗余码crc">#</a> 循环冗余码 CRC</h3><h2 id="纠错编码-海明码"><a class="anchor" href="#纠错编码-海明码">#</a> 纠错编码 海明码！</h2><p>海明码学习前提<br />要点：</p><ol><li>不要用异或套用公式！！！题目随便变几个变死你！</li><li>看完这篇博客不要看别的博客！！！！别的人瞎写的坑死你</li></ol><p>学习海明码之前，我们要约定 3 个原则：</p><ol><li>海明码只能检测出 2 位错，纠 1 位错。</li><li>默认进行偶校验 (除说明用奇校验)</li><li>海明码是一串由 0 和 1 组成的序列 (除 01 外没有其他的值，记住了！这是重点)<br /> 如果下面有任何无法理解的问题，反复看上面三个原则，下面再也不赘述。</li></ol><h3 id="前提奇偶校验"><a class="anchor" href="#前提奇偶校验">#</a> 前提：奇偶校验</h3><blockquote><p>奇校验：这串序列 1 的个数如果为偶数则在前面加个 1，使 1 的个数变成奇数，否则加 0。</p></blockquote><blockquote><p>偶校验：这串序列 1 的个数如果为奇数则在前面加个 1，使 1 的个数变成偶数，否则加 0。</p></blockquote><p>例子：1111 奇校验就是 11111 偶校验就是 01111<br />1110 奇校验就是 01110 偶校验就是 11110</p><p><strong>特性是检测一位错，无法纠错。</strong></p><h3 id="概述海明码的构成"><a class="anchor" href="#概述海明码的构成">#</a> 概述：海明码的构成</h3><p>例如如下序列：<br />D = 1100<br /> 我们想要让其变成海明码只需如下操作</p><ol><li>算出校验位数 k#<br />正常情况下我们需要如下此操作：</li></ol><p>2^k &gt;= k + 数据位数 + 1</p><p>这里等于 3</p><ol start="2"><li>确定校验位在海明码中的位置#<br />这里按 2^k 次幂留出来，就像 1，2，4，8，16，32。（如果问有 5 位等其他烦人的数据位怎么办后面我会说，先按 4 位数做）</li></ol><table><thead><tr><th>H7</th><th>H6</th><th>H5</th><th>H4</th><th>H3</th><th>H2</th><th>H1</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>0</td><td></td><td>0</td><td></td><td></td></tr></tbody></table><ol start="3"><li>分组（重点，很多人蒙圈就在此）#<br />我们需要确认 H1,H2,H4 这三个校验位都来校验哪些位置。<br />我们按这个规则进行分配。</li></ol><p>将 1,2,4（海明码下标为 1,2,4）#<br />的二进制码写出来，并且最高位补到 3 位 (前面算的 K 数)<br /> 如下所示：</p><table><thead><tr><th>1</th><th>2</th><th>4</th></tr></thead><tbody><tr><td>001</td><td>010</td><td>100</td></tr></tbody></table><p><strong>然后我们将 0 替换为 /*，作为通配表</strong></p><table><thead><tr><th>1</th><th>2</th><th>4</th></tr></thead><tbody><tr><td>**1</td><td>·1·</td><td>1··</td></tr></tbody></table><p><strong>我们将 1 到 7 的二进制序列，列出来如下表</strong></p><table><thead><tr><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th></tr></thead><tbody><tr><td>111</td><td>110</td><td>101</td><td>100</td><td>011</td><td>010</td><td>001</td></tr></tbody></table><p><strong>！！！重点！！！！#</strong><br />我们将 7-&gt;1 依次与上面的通配表进行匹配</p><table><thead><tr><th>1</th><th>2</th><th>4</th></tr></thead><tbody><tr><td>**1</td><td>·1·</td><td>1··</td></tr><tr><td>001(1)</td><td>010(2)</td><td>100(4)</td></tr><tr><td>011(3)</td><td>011(3)</td><td>101(5)</td></tr><tr><td>101(5)</td><td>110(6)</td><td>110(6)</td></tr><tr><td>111(7)</td><td>111(7)</td><td>111(7)</td></tr></tbody></table><p>因此我们可以确定<br /> H1 负责 1 3 5 7 位数的校验<br /> H2 负责 2 3 6 7 位数的校验<br /> H4 负责 4 5 6 7 位数的校验</p><ol start="4"><li>求出校验位是 0 还是 1#</li></ol><p>因为上面我们得出以下结论：<br />H1 负责 1 3 5 7 位数的校验<br /> H2 负责 2 3 6 7 位数的校验<br /> H4 负责 4 5 6 7 位数的校验</p><p><strong>偶校验</strong><br /> H3,H5,H7 1 的个数为奇数 因此 H1=1<br />H3,H6,H7 1 的个数为偶数 因此 H2=0<br />H5,H6,H7 1 的个数为偶数 因此 H4=0</p><table><thead><tr><th>H7</th><th>H6</th><th>H5</th><th>H4</th><th>H3</th><th>H2</th><th>H1</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td></tr></tbody></table><ol start="5"><li>查错#<br />查错比较简单，如果以下三组<br />既<br /> H1,H3,H5,H7<br /> 或者<br /> H2,H3,H6,H7<br /> 或者<br /> H4,H5,H6,H7<br /> 偶校验出错，则出错。</li></ol><p>比方说 如果 H1,H3,H5,H7 由 1100 变成了 1110 （1 的个数为偶数）就是出错了</p><p>这里该不赘述<br /> 6. 纠错#<br />首先我们先理解以下为什么海明码能纠错。<br />首先我们先画个圆。然后按如下形式做交叉<br /><a href="https://imgse.com/i/zZAiND"><img data-src="https://s1.ax1x.com/2022/11/16/zZAiND.jpg" alt="zZAiND.jpg" /></a><br /> 如果这个位置出错了，那么一定是 1 3 7 5 这四个位置中的一个位置出错 (如果俩位出错则无法纠错，这个点一定要记住)<br /> 如果此时其他的俩个组 即：2，3，6，7 和 4，5，6，7 偶校验都通过了的话。<br />也就证明只可能是 1 出错<br />所以我们可以将 1 的位数 做修改。如果是 0 变为 1，如果是 1 变为。来达到纠错的目的。</p><p>但是如果 2，3，5，7 这个位置也出错了，4，5，6，7 这个位置没有出错。<br />我们很容易就推导出，是 3 这个位置出错了。<br />我们就可以修改 3 的值，如果是 0 变为 1 或者如果是 1 变为 0.</p><p>在此时我们会发现一个巧妙的规则！<br />当我们把 1，3，5，7 设为 P1,<br />2,3,6,7 设为 P2<br />4,5,6,7 设为 P3 时</p><p>当如果哪组校验失败就为 1<br /><a href="https://imgse.com/i/zZAF4e"><img data-src="https://s1.ax1x.com/2022/11/16/zZAF4e.jpg" alt="zZAF4e.jpg" /></a></p><p>转载：<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZ29kb2ZvcmFuZ2UvcC8xMjAwMzY3Ni5odG1s">https://www.cnblogs.com/godoforange/p/12003676.html</span></p><h1 id="流量控制"><a class="anchor" href="#流量控制">#</a> 流量控制</h1><p>数据链路层的流量控制是<strong>点对点</strong>的、传输层的流量控制是<strong>端到端</strong>。</p><p><strong>数据链路层</strong>流量控制手段：接收方收不下就不回复确认。<br /><strong>传输层</strong>流量控制手段：接收端给发送端一个窗口公告。</p><blockquote><p>可靠传输的基本概念：</p><ol><li>比特差错 只是传输差错的一种</li><li>从整个计算机网络体系结构来看，传输差错还包括 <strong>分组丢失、分组失序 及 分组重复</strong></li><li>分组丢失、分组失序 及 分组重复 这些传输差错，一般不会出现在 数据链路层，而会出现在其上层</li><li>可靠传输服务并不仅局限于数据链路层，其它各层均可选择实现可靠传输<br /><a href="https://imgse.com/i/pSmyefO"><img data-src="https://s1.ax1x.com/2023/01/10/pSmyefO.jpg" alt="pSmyefO.jpg" /></a></li><li>可靠传输的实现比较复杂，开销也比较大，是否使用可靠传输取决于应用需求</li></ol></blockquote><blockquote><p>数据链路层向上层提供的服务类型</p><ol><li>不可靠传输服务：仅仅丢弃有误码的帧，其它啥也不干</li><li>可靠传输服务：想办法实现<strong>发送端发什么，接收端就收到什么</strong></li></ol></blockquote><ul><li>一般情况下，有线链路的误码率比较低，为了减小开销，并不要求数据链路层层向上提供可靠传输服务。即使出现了误码，可靠传输的问题由上层处理</li></ul><h2 id="停止等待协议sw"><a class="anchor" href="#停止等待协议sw">#</a> 停止等待协议 (SW)</h2><p>信道利用率太低！<br /><a href="https://imgse.com/i/pSmy74K"><img data-src="https://s1.ax1x.com/2023/01/10/pSmy74K.jpg" alt="pSmy74K.jpg" /></a><br /><a href="https://imgse.com/i/pSm6Euj"><img data-src="https://s1.ax1x.com/2023/01/10/pSm6Euj.md.jpg" alt="pSm6Euj.md.jpg" /></a></p><ol><li>为了让发送方能够判断所收到的 ACK 分组是否是重复的，需要给 ACK 分组编号，所用的比特数量与数据分组编号所用比特数一样。<br />数据链路层一般不会出现 ACK 分组迟到的情况，因此在数据链路层实现停止 - 等待协议可以不用给 ACK 分组编号。</li><li>为了让接受方能够判断所收到的数据分组是否是重复的，需要给<strong>数据分组</strong>编号，由 停止 - 等待协议的停等特性，只需一个比特编号。 ACK0 ACK1</li><li>超时计时器的重传时间：略大于 &quot;从发送方到接收方的平均往返时间&quot;</li></ol><ul><li>在数据链路层 点对点的往返时间比较确定，重传时间好确定</li><li>but 在运输层 由端到端往返时间非常不确定，设置合适的重传时间并不容易</li></ul><h2 id="后退n帧协议gbn"><a class="anchor" href="#后退n帧协议gbn">#</a> 后退 N 帧协议 (GBN)</h2><p><a href="https://imgse.com/i/pSmWsE9"><img data-src="https://s1.ax1x.com/2023/01/10/pSmWsE9.jpg" alt="pSmWsE9.jpg" /></a><br /><a href="https://imgse.com/i/pSmWyNR"><img data-src="https://s1.ax1x.com/2023/01/10/pSmWyNR.jpg" alt="pSmWyNR.jpg" /></a></p><ul><li>是一种连续的 ARQ 协议</li></ul><h2 id="选择重传协议sr"><a class="anchor" href="#选择重传协议sr">#</a> 选择重传协议 (SR)</h2><p><a href="https://imgse.com/i/pSmWBB4"><img data-src="https://s1.ax1x.com/2023/01/10/pSmWBB4.jpg" alt="pSmWBB4.jpg" /></a><br /><a href="https://imgse.com/i/pSmWDHJ"><img data-src="https://s1.ax1x.com/2023/01/10/pSmWDHJ.jpg" alt="pSmWDHJ.jpg" /></a></p><ul><li>if W<sub>R</sub> = 5 接收方无法分辨新旧数组</li></ul><h1 id="信道划分介质访问控制"><a class="anchor" href="#信道划分介质访问控制">#</a> 信道划分介质访问控制</h1><ul><li>6</li><li>7</li></ul><blockquote><p>媒体介入控制的基本概念：<br />共享信道要着重考虑的一个问题 - 如何协调多个发送站点和接受站点对一个 共享传输媒体的占用<br /> MAC (Medium Access Control)<br /><a href="https://imgse.com/i/pSmfNad"><img data-src="https://s1.ax1x.com/2023/01/10/pSmfNad.jpg" alt="pSmfNad.jpg" /></a></p></blockquote><h1 id="传输数据适用的两种链路"><a class="anchor" href="#传输数据适用的两种链路">#</a> 传输数据适用的两种链路</h1><h2 id="点对点链路"><a class="anchor" href="#点对点链路">#</a> 点对点链路</h2><p>两个相邻节点通过一个链路相连，没有第三者。<br />Application: PPP 协议、常用于广域网。<br /><a href="https://imgse.com/i/pSmfZb4"><img data-src="https://s1.ax1x.com/2023/01/10/pSmfZb4.jpg" alt="pSmfZb4.jpg" /></a></p><h2 id="广播式链路"><a class="anchor" href="#广播式链路">#</a> 广播式链路</h2><p>所有主机共享通信介质<br /> Application: 早期的总线以太网、无线局域网，常用于<strong>局域网</strong>。<br />典型拓扑结构：总线型、星型 (逻辑总线型)</p><h1 id="介质访问控制"><a class="anchor" href="#介质访问控制">#</a> 介质访问控制</h1><p><a href="https://imgse.com/i/zra4Df"><img data-src="https://s1.ax1x.com/2022/12/03/zra4Df.jpg" alt="zra4Df.jpg" /></a><br /> 采取一定的措施，使得两对节点之间的通信不会发生干扰的情况</p><h2 id="静态信道划分-信道划分介质访问控制"><a class="anchor" href="#静态信道划分-信道划分介质访问控制">#</a> 静态信道划分 - 信道划分介质访问控制</h2><p>信道划分介质访问控制：将使用介质的每个设备与来自同一信道上的其他设备的通信隔离开，把时域和频域资源合理地分配给网络上的设备<br /><a href="https://imgse.com/i/zrMJtf"><img data-src="https://s1.ax1x.com/2022/12/03/zrMJtf.jpg" alt="zrMJtf.jpg" /></a></p><h3 id="频分多路复用-fdm"><a class="anchor" href="#频分多路复用-fdm">#</a> 频分多路复用 FDM</h3><p>频分复用的所有用户在同样的时间占用不同的带宽 (频率带宽) 资源。</p><p><a href="https://imgse.com/i/zrM37t"><img data-src="https://s1.ax1x.com/2022/12/03/zrM37t.jpg" alt="zrM37t.jpg" /></a></p><h3 id="时分多路复用-tdm"><a class="anchor" href="#时分多路复用-tdm">#</a> 时分多路复用 TDM</h3><p>时分复用帧 (TDM) 是在物理层传送的比特流所划分的帧、标志一个周期。<br />每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙、所有用户轮流占用信道。<br />g<br /><a href="https://imgse.com/i/zrMGAP"><img data-src="https://s1.ax1x.com/2022/12/03/zrMGAP.jpg" alt="zrMGAP.jpg" /></a></p><blockquote><p>改进的时分复用 -- 统计时分复用 STDM**（Statistical Time Division Multiplexing）</p></blockquote><p>STDM 帧不是固定分配时隙、而是按需动态分配时隙</p><p><a href="https://imgse.com/i/zrM10I"><img data-src="https://s1.ax1x.com/2022/12/03/zrM10I.jpg" alt="zrM10I.jpg" /></a></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUVFNDExMzdIUy8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smYW1wO3ZkX3NvdXJjZT04YjI3MWNiYTc1NjFmNThlZGY0MTA2ZGIwZGYxY2M1ZA==">https://www.bilibili.com/video/BV1EE41137HS/?spm_id_from=333.337.search-card.all.click&amp;vd_source=8b271cba7561f58edf4106db0df1cc5d</span></p><h3 id="波分多路复用-wdm"><a class="anchor" href="#波分多路复用-wdm">#</a> 波分多路复用 WDM</h3><p>(Wavelength Division Multiplexer)<br /> 光的频分多路复用<br /><a href="https://imgse.com/i/zrMlnA"><img data-src="https://s1.ax1x.com/2022/12/03/zrMlnA.jpg" alt="zrMlnA.jpg" /></a></p><h3 id="码分多路复用-cdm"><a class="anchor" href="#码分多路复用-cdm">#</a> 码分多路复用 CDM</h3><p>2G 网络就是 CDMA 技术<br />可以让不同的用户在同样时间使用同样频率进行通信。<br />由于各用户使用经过特殊挑选的不同码型，因此各用户之间不会干扰。</p><p>CDM 的每一个用户可以在<strong>同样的时间使用同样的频带进行通信</strong></p><p>CDMA 中、每一个比特时间在划分为 m 个短的间隔、称为码片 (chip).m 通常为 64 or 128</p><p>若叠加为（A+B+C）,A 收到并做内积得（A+B+C）*A, 由于 A 与 B 和 C 正交，所以（A+B+C）<em>A=A</em>A<br /><a href="https://imgse.com/i/zrU4k4"><img data-src="https://s1.ax1x.com/2022/12/03/zrU4k4.jpg" alt="zrU4k4.jpg" /></a><br /><a href="https://imgse.com/i/zrUW0U"><img data-src="https://s1.ax1x.com/2022/12/03/zrUW0U.jpg" alt="zrUW0U.jpg" /></a><br /><a href="https://imgse.com/i/zra91I"><img data-src="https://s1.ax1x.com/2022/12/03/zra91I.jpg" alt="zra91I.jpg" /></a><br /><a href="https://imgse.com/i/zrUf7F"><img data-src="https://s1.ax1x.com/2022/12/03/zrUf7F.jpg" alt="zrUf7F.jpg" /></a></p><h2 id="动态分配信道"><a class="anchor" href="#动态分配信道">#</a> 动态分配信道</h2><ol><li>轮询访问介质访问控制 令牌传递协议</li><li>随机访问介质访问控制 -&gt;4</li></ol><h3 id="aloha协议"><a class="anchor" href="#aloha协议">#</a> ALOHA 协议</h3><ol><li>pure ALOHA<br /><a href="https://imgse.com/i/pSVDqiQ"><img data-src="https://s1.ax1x.com/2023/01/07/pSVDqiQ.jpg" alt="pSVDqiQ.jpg" /></a><br /><a href="https://imgse.com/i/pSVsl7T"><img data-src="https://s1.ax1x.com/2023/01/07/pSVsl7T.jpg" alt="pSVsl7T.jpg" /></a></li></ol><p>vulnerable Time = 2 * T</p><ol start="2"><li>slotted ALOHA<br /><a href="https://imgse.com/i/pSVsQBV"><img data-src="https://s1.ax1x.com/2023/01/07/pSVsQBV.jpg" alt="pSVsQBV.jpg" /></a><br />G : 想要同时 transmit 的发送站数量<br /><a href="https://imgse.com/i/pSVs3AU"><img data-src="https://s1.ax1x.com/2023/01/07/pSVs3AU.jpg" alt="pSVs3AU.jpg" /></a></li></ol><h3 id="csma协议"><a class="anchor" href="#csma协议">#</a> CSMA 协议</h3><ol><li>1 - 坚持 CSMA</li><li>非坚持 CSMA</li><li>p - 坚持 CSMA</li></ol><p><a href="https://imgse.com/i/zrsqTP"><img data-src="https://s1.ax1x.com/2022/12/03/zrsqTP.jpg" alt="zrsqTP.jpg" /></a></p><h3 id="csmacd协议"><a class="anchor" href="#csmacd协议">#</a> CSMA/CD 协议</h3><p>Carrier Sense Multiple Access/Collision Detection<br /> 载波监听多址接入 / 碰撞检测</p><p>MA 多址接入：多个站点连接在一条总线上，竞争使用总线。</p><p>CS 载波侦听：<br />每一个站点在发送帧之前先要检测一下总线上是否有有其它站点在发送帧 (&quot;<strong> 先听后说</strong> &quot;)：</p><ol><li>若检测到总线空闲 96 比特时间，则发送这个帧</li><li>若检测到总线忙，则继续检测并等待总线转为空闲 96 比特时间，然后发送这个帧。</li></ol><p>CD 碰撞检测：<br />每一个正在发送帧的站 边发送边检测碰撞 (&quot;<strong> 边说边听</strong> &quot;):</p><ul><li>一旦发现总线上出现碰撞，立即停止发送，退避一段 随机时间后再次发送 (&quot;一旦冲突 立即停说 等待时机 重新再说&quot;)<br /><a href="https://imgse.com/i/pSK9YPs"><img data-src="https://s1.ax1x.com/2023/01/13/pSK9YPs.jpg" alt="pSK9YPs.jpg" /></a></li></ul><blockquote><p>关键标识符：て<br />て：以太网单程端到端传播时延<br /> 2 て：以太网的端到端往返传播时延 or 争用期 or 碰撞窗口</p></blockquote><ol><li>争用期<br /><a href="https://imgse.com/i/pSK9G5j"><img data-src="https://s1.ax1x.com/2023/01/13/pSK9G5j.jpg" alt="pSK9G5j.jpg" /></a><br />Obeviously, 在以太网中发送帧的主机越多，端到端的传播时延越大，发生碰撞的几率越大。<br />因此，共享式以太网不能连接太多的主机，使用的总线也不能太长</li></ol><ul><li>10Mbps 以太网把争用期定为 512 比特发送时间，即 51.2 微秒，其总线长度不超过 5120m，but 考虑其它因素，信号衰减等，以太网规定总线长度不能超过 2500m<br /><a href="https://imgse.com/i/pSKCewF"><img data-src="https://s1.ax1x.com/2023/01/13/pSKCewF.jpg" alt="pSKCewF.jpg" /></a></li></ul><ol start="2"><li><p>最小帧长<br /> 64 字节 512bit<br /> 最小帧长确保了主机可在帧发送完成之前就检测到该帧的发送过程中是否遭遇了碰撞<br /><a href="https://imgse.com/i/pSKCTmT"><img data-src="https://s1.ax1x.com/2023/01/13/pSKCTmT.jpg" alt="pSKCTmT.jpg" /></a></p></li><li><p>最大帧长<br /> 1588、1522 字节<br /><a href="https://imgse.com/i/pSKCIXV"><img data-src="https://s1.ax1x.com/2023/01/13/pSKCIXV.jpg" alt="pSKCIXV.jpg" /></a></p></li><li><p>截断二进制指数退避算法<br /> 16 次！<br /><a href="https://imgse.com/i/pSKP90O"><img data-src="https://s1.ax1x.com/2023/01/13/pSKP90O.jpg" alt="pSKP90O.jpg" /></a></p></li><li><p>信道利用率<br /><a href="https://imgse.com/i/pSKC560"><img data-src="https://s1.ax1x.com/2023/01/13/pSKC560.jpg" alt="pSKC560.jpg" /></a></p></li><li><p>帧发送流程<br /><a href="https://imgse.com/i/pSKC4lq"><img data-src="https://s1.ax1x.com/2023/01/13/pSKC4lq.jpg" alt="pSKC4lq.jpg" /></a></p></li><li><p>帧接受流程<br /><a href="https://imgse.com/i/pSKChpn"><img data-src="https://s1.ax1x.com/2023/01/13/pSKChpn.jpg" alt="pSKChpn.jpg" /></a></p></li><li><p>Q<br /><a href="https://imgse.com/i/pSKC70U"><img data-src="https://s1.ax1x.com/2023/01/13/pSKC70U.jpg" alt="pSKC70U.jpg" /></a><br /><a href="https://imgse.com/i/pSKCH7F"><img data-src="https://s1.ax1x.com/2023/01/13/pSKCH7F.jpg" alt="pSKCH7F.jpg" /></a></p></li></ol><p>现在的以太网 不太有碰撞 不用 CSMA/CD</p><h3 id="csmaca协议"><a class="anchor" href="#csmaca协议">#</a> CSMA/CA 协议</h3><p>Carrier Sense Multiple Access/Collision Avoidance<br /> 载波监听多址接入 / 碰撞避免</p><ul><li><p>在无线局域网，仍然可以 使用载波侦听多址接入 CSMA,<br /> 即在发送帧之前先对传输媒体进行载波侦听<br /> - 若发现有其他站在发送帧 就推迟发送以免发生碰撞</p></li><li><p>在无线局域网中，不能使用碰撞检测 CD：</p></li></ul><ol><li><p>由无线信道的传输条件特殊，其信号强度的动态范围非常大，无线网卡上接收到的信号往往比发送信号小得多。<br />如果要在无线网卡上实现碰撞检测 CD, 对硬件要求非常高</p></li><li><p>即使能够在硬件上实现无线局域网的碰撞检测功能，但由于无线电波的特殊性 (存在隐蔽站的问题) , 进行检测的意义也不大<br /><a href="https://imgse.com/i/pSMFw2d"><img data-src="https://s1.ax1x.com/2023/01/13/pSMFw2d.md.jpg" alt="pSMFw2d.md.jpg" /></a></p></li></ol><h4 id="basic"><a class="anchor" href="#basic">#</a> basic</h4><ol><li>802.11 无线局域网 使用 CSMA/CA 协议，在 CSMA 的基础上增加了一个碰撞避免 CA 功能，而不再实现碰撞检测功能。</li><li>由于不可能避免所有碰撞，并且无线信道误码率较高，802.11 标准还使用了数据链路层确认机制 (SW 停止 - 等待协议) 来保证数据被正确接收。</li><li>802.11 的 MAC 层标准定义了两种不同的媒体接入控制方式：</li></ol><ul><li>分布式协调功能 DCF (Distributed Coordination Function)<br /> 802.11 定义的默认方式<br />没有中心控制站点，每个站点使用 CSMA/CA 协议通过争用信道来获取发送权。</li><li>点协调功能 PCF (Point)<br /> 802.11 定义的可选方式，用の少<br />使用集中控制の接入算法 (一般在接入点 AP 实现集中控制)</li></ul><h4 id="帧间间隔ifsinterframe-space"><a class="anchor" href="#帧间间隔ifsinterframe-space">#</a> 帧间间隔 IFS (InterFrame Space)</h4><ol><li>802.11 规定全部の站点必须在持续检测到信道空闲一段指定时间后才能发送帧<br />这段时间称为 帧间间隔 IFS</li><li>IFS の长短取决于该站点要发送の帧的类型：</li></ol><ul><li>高优先级的帧需要等待の時間较短，因此可优先获得发送权；</li><li>低优先级的帧需要等待の時間较长，<br />（若某个低优先级的帧没来得及发送，高优先级的帧已经发送到信道上，则信道变为忙状态，因而低优先级的帧只能推迟发送了。这样就减少了碰撞的机会）</li></ul><ol start="3"><li>常用的 2 种 IFS：</li></ol><ul><li><p>短帧间间隔<strong> SIFS</strong> (28 微秒)：<br />最短的 IFS, 用来分隔开属于一次对话の各帧。<br />一个站点应当能够在这段时间内从发送方式切换到接收方式。<br />使用 SIFS 的帧类型有 ACK 帧、CTS 帧、由过长的 MAC 帧分片后的数据帧<br />所有回答 AP 探询的帧 and 在 PCF 方式中接入点 AP 发送出的任何帧。</p></li><li><p>DCF 帧间间隔<strong> DIFS</strong> (128 微秒):<br /> 比 SIFS 长得多，在 DCF 方式中用来发送数据帧和管理帧。</p></li></ul><h4 id="工作原理"><a class="anchor" href="#工作原理">#</a> 工作原理</h4><p><a href="https://imgse.com/i/pSQiVPg"><img data-src="https://s1.ax1x.com/2023/01/14/pSQiVPg.jpg" alt="pSQiVPg.jpg" /></a></p><ol><li><p>源站发送前检测到信道空闲后等待一段 DIFS ？<br />考虑到可能有其它站 有高优先级的帧要发送。<br />若有，让 。</p></li><li><p>目的站正确接收数据帧后 还等待一段 SIFS ？<br />SISF 使最短的帧间间隔 用来分隔开属于一次对话的各帧。<br />这段时间，一个站点应当能够从发送方式切换到接收方式</p></li><li><p>当站点检测到信道空闲的，并且所发送的数据帧不是上一次发送完后 立即连续发送的数据帧，则不使用退避算法。</p></li></ol><blockquote><p>以下情况必须使用退避算法：</p><ul><li>发送数据帧之前检测到信道处于忙状态</li><li>在每一次重传一个数据帧时</li><li>在每一次成功发送后 要连续发送下一帧时 (避免一个站点长时间占用信道)</li></ul></blockquote><h4 id="退避算法"><a class="anchor" href="#退避算法">#</a> 退避算法</h4><p><a href="https://imgse.com/i/pSQAka6"><img data-src="https://s1.ax1x.com/2023/01/14/pSQAka6.jpg" alt="pSQAka6.jpg" /></a><br /><a href="https://imgse.com/i/pSQAFVx"><img data-src="https://s1.ax1x.com/2023/01/14/pSQAFVx.jpg" alt="pSQAFVx.jpg" /></a></p><h4 id="信道预约虚拟载波侦听"><a class="anchor" href="#信道预约虚拟载波侦听">#</a> 信道预约 &amp; 虚拟载波侦听</h4><p><a href="https://imgse.com/i/pSQAVPO"><img data-src="https://s1.ax1x.com/2023/01/14/pSQAVPO.jpg" alt="pSQAVPO.jpg" /></a></p><ol><li>源站发送数据帧之前发送一个短的控制帧 -&gt; <strong>请求发送 RTS</strong><br />RTS (源地址、目的地址、这次通信 (包括 all ACK) 所需的持续时间)</li><li><strong>允许发送 CTS</strong>(Clear to send)<br /> 包括这次通信所需时间 (copy 来的)</li></ol><p><a href="https://imgse.com/i/pSQAZGD"><img data-src="https://s1.ax1x.com/2023/01/14/pSQAZGD.jpg" alt="pSQAZGD.jpg" /></a></p><ul><li>RTS 帧 CTS 帧 很短</li></ul><blockquote><p>802.11 规定 3 种情况供用户选择：</p><ol><li>使用 RTS 、CTS 帧</li><li>只有数据帧超过一定长度才 使用 RTS 、CTS 帧</li><li>不 使用 RTS 、CTS 帧</li></ol></blockquote><p><a href="https://imgse.com/i/pSQAAIK"><img data-src="https://s1.ax1x.com/2023/01/14/pSQAAIK.jpg" alt="pSQAAIK.jpg" /></a><br /><a href="https://imgse.com/i/pSQAeRe"><img data-src="https://s1.ax1x.com/2023/01/14/pSQAeRe.jpg" alt="pSQAeRe.jpg" /></a></p><h4 id="sum"><a class="anchor" href="#sum">#</a> SUM</h4><p><a href="https://imgse.com/i/pSQESFf"><img data-src="https://s1.ax1x.com/2023/01/14/pSQESFf.jpg" alt="pSQESFf.jpg" /></a></p><h1 id="mac地址-ip地址-arp协议"><a class="anchor" href="#mac地址-ip地址-arp协议">#</a> MAC 地址、IP 地址、ARP 协议</h1><p>[数据链路层]<br /> MAC 地址是以太网的 MAC 子层所使用的地址<br /> [网际层]<br /> IP 地址是 TCP/IP 体系结构网际层所使用的地址；</p><p>ARP 协议属于 TCP/IP 体系结构的网际层<br />作用是已知设备所分配到的 IP 地址，使用 ARP 协议可通过该 IP 地址获得到设备的 MAC 地址</p><h2 id="mac地址"><a class="anchor" href="#mac地址">#</a> MAC 地址</h2><blockquote><p>使用点对点信道的数据链路层不需要使用地址</p></blockquote><blockquote><p>使用广播信道的数据链路层必须来区分各主机</p></blockquote><blockquote><p><a href="https://imgse.com/i/pSlAnXj"><img data-src="https://s1.ax1x.com/2023/01/15/pSlAnXj.jpg" alt="pSlAnXj.jpg" /></a></p></blockquote><h3 id="basic-2"><a class="anchor" href="#basic-2">#</a> BASIC</h3><p><a href="https://imgse.com/i/pSlAgjH"><img data-src="https://s1.ax1x.com/2023/01/15/pSlAgjH.jpg" alt="pSlAgjH.jpg" /></a><br /><a href="https://imgse.com/i/pSlAcge"><img data-src="https://s1.ax1x.com/2023/01/15/pSlAcge.jpg" alt="pSlAcge.jpg" /></a></p><p>一般情况下 用户主机会包含两个网络适配器：有线局域网适配器 (有线网卡) and 无线局域网适配器 (无线网卡)。<br />每个网络适配器都有一个全球唯一的 MAC 地址。<br />而交换机 &amp; 路由器往往拥有更多の网络接口，所以会拥有更多的 MAC 地址。<br /><strong>综上，严格说，MAC 地址是对网络上个接口的唯一标识，而不是对网络设备上的唯一标识。</strong></p><h3 id="ieee-802-局域网的mac地址格式"><a class="anchor" href="#ieee-802-局域网的mac地址格式">#</a> IEEE 802 局域网的 MAC 地址格式</h3><p><a href="https://imgse.com/i/pSlZWDJ"><img data-src="https://s1.ax1x.com/2023/01/15/pSlZWDJ.jpg" alt="pSlZWDJ.jpg" /></a><br />s</p><h3 id="eg"><a class="anchor" href="#eg">#</a> EG</h3><p><a href="https://imgse.com/i/pSleJaR"><img data-src="https://s1.ax1x.com/2023/01/15/pSleJaR.jpg" alt="pSleJaR.jpg" /></a><br /><a href="https://imgse.com/i/pSleYI1"><img data-src="https://s1.ax1x.com/2023/01/15/pSleYI1.jpg" alt="pSleYI1.jpg" /></a><br /><a href="https://imgse.com/i/pSle3qJ"><img data-src="https://s1.ax1x.com/2023/01/15/pSle3qJ.jpg" alt="pSle3qJ.jpg" /></a><br /><a href="https://imgse.com/i/pSleGZ9"><img data-src="https://s1.ax1x.com/2023/01/15/pSleGZ9.jpg" alt="pSleGZ9.jpg" /></a></p><h2 id="ip地址"><a class="anchor" href="#ip地址">#</a> IP 地址</h2><p>#IP 地址是因特网 (Internet) 上的<strong>主机</strong>和<strong>路由器</strong>所使用的标识，标识两部分信息：</p><ol><li>网络编号：标识因特网上数以百万计的网络</li><li>主机编号：标识同一网络上的不同主机 (or 路由器各接口)</li></ol><p><a href="https://imgse.com/i/pS3OzAe"><img data-src="https://s1.ax1x.com/2023/01/18/pS3OzAe.jpg" alt="pS3OzAe.jpg" /></a><br /><a href="https://imgse.com/i/pS3Ov7D"><img data-src="https://s1.ax1x.com/2023/01/18/pS3Ov7D.jpg" alt="pS3Ov7D.jpg" /></a><br /><a href="https://imgse.com/i/pS3Oj0O"><img data-src="https://s1.ax1x.com/2023/01/18/pS3Oj0O.jpg" alt="pS3Oj0O.jpg" /></a><br /><a href="https://imgse.com/i/pS3OXnK"><img data-src="https://s1.ax1x.com/2023/01/18/pS3OXnK.jpg" alt="pS3OXnK.jpg" /></a></p><h2 id="arp协议"><a class="anchor" href="#arp协议">#</a> ARP 协议</h2><p><a href="https://imgse.com/i/pS3OLX6"><img data-src="https://s1.ax1x.com/2023/01/18/pS3OLX6.jpg" alt="pS3OLX6.jpg" /></a></p><blockquote><p><a href="https://imgse.com/i/pS3Xict"><img data-src="https://s1.ax1x.com/2023/01/18/pS3Xict.jpg" alt="pS3Xict.jpg" /></a><br /><a href="https://imgse.com/i/pS3XP1I"><img data-src="https://s1.ax1x.com/2023/01/18/pS3XP1I.jpg" alt="pS3XP1I.jpg" /></a><br /><a href="https://imgse.com/i/pS3XC9A"><img data-src="https://s1.ax1x.com/2023/01/18/pS3XC9A.jpg" alt="pS3XC9A.jpg" /></a><br /><a href="https://imgse.com/i/pS3XAnf"><img data-src="https://s1.ax1x.com/2023/01/18/pS3XAnf.jpg" alt="pS3XAnf.jpg" /></a><br /><a href="https://imgse.com/i/pS3Xphd"><img data-src="https://s1.ax1x.com/2023/01/18/pS3Xphd.jpg" alt="pS3Xphd.jpg" /></a><br /><a href="https://imgse.com/i/pS3XFjP"><img data-src="https://s1.ax1x.com/2023/01/18/pS3XFjP.jpg" alt="pS3XFjP.jpg" /></a><br /><a href="https://imgse.com/i/pS3XEB8"><img data-src="https://s1.ax1x.com/2023/01/18/pS3XEB8.jpg" alt="pS3XEB8.jpg" /></a><br /><a href="https://imgse.com/i/pS3XVHS"><img data-src="https://s1.ax1x.com/2023/01/18/pS3XVHS.jpg" alt="pS3XVHS.jpg" /></a></p></blockquote><p>主机 B の ARP 高速缓存表</p><ul><li>动态：自动获取，生命周期默认为两分钟</li><li>静态：手工设置，不同操作系统下的生命周期不同<br />例如系统重启后不存在 or 系统重启后依然有效</li></ul><h1 id="集线器交换机"><a class="anchor" href="#集线器交换机">#</a> 集线器 &amp; 交换机</h1><h2 id="集线器"><a class="anchor" href="#集线器">#</a> 集线器</h2><p>集线器 HUB <strong>只工作在物理层</strong>，它的每个接口仅简单的转发比特，不进行碰撞检测 (由各站的网卡检测)</p><p>集线器一般都有少量的容错能力和网络管理功能。<br />(集线器能检测出网卡故障 并断开与故障网卡的连线 -&gt; 使整个以太网仍能正常工作)</p><p>使用集线器的以太网在逻辑上仍是一个总线网，各占共享总线资源，使用 CSMA/CD 协议<br /><a href="https://imgse.com/i/pS8Ng8f"><img data-src="https://s1.ax1x.com/2023/01/19/pS8Ng8f.jpg" alt="pS8Ng8f.jpg" /></a><br /><a href="https://imgse.com/i/pSJhgzT"><img data-src="https://s1.ax1x.com/2023/01/22/pSJhgzT.jpg" alt="pSJhgzT.jpg" /></a></p><h2 id="交换机"><a class="anchor" href="#交换机">#</a> 交换机</h2><p><a href="https://imgse.com/i/pSJhRQU"><img data-src="https://s1.ax1x.com/2023/01/22/pSJhRQU.jpg" alt="pSJhRQU.jpg" /></a></p><h2 id="对比集线器和交换机"><a class="anchor" href="#对比集线器和交换机">#</a> 对比集线器和交换机</h2><p><a href="https://imgse.com/i/pSJhWyF"><img data-src="https://s1.ax1x.com/2023/01/22/pSJhWyF.jpg" alt="pSJhWyF.jpg" /></a><br /><a href="https://imgse.com/i/pSJhfL4"><img data-src="https://s1.ax1x.com/2023/01/22/pSJhfL4.jpg" alt="pSJhfL4.jpg" /></a><br /><a href="https://imgse.com/i/pSJh4eJ"><img data-src="https://s1.ax1x.com/2023/01/22/pSJh4eJ.jpg" alt="pSJh4eJ.jpg" /></a><br /><a href="https://imgse.com/i/pSJhcWV"><img data-src="https://s1.ax1x.com/2023/01/22/pSJhcWV.jpg" alt="pSJhcWV.jpg" /></a><br /><a href="https://imgse.com/i/pSJh6J0"><img data-src="https://s1.ax1x.com/2023/01/22/pSJh6J0.jpg" alt="pSJh6J0.jpg" /></a></p><h1 id="以太网交换机"><a class="anchor" href="#以太网交换机">#</a> 以太网交换机</h1><h2 id="の自学习和转发帧的流程"><a class="anchor" href="#の自学习和转发帧的流程">#</a> の自学习和转发帧的流程</h2><ol><li>收到帧后进行登记。等级内容为帧的<strong>源 MAC 地址</strong>及进入交换机的<strong>接口号</strong></li><li>根据帧的目的 MAC 地址和交换机的帧交换表对帧进行转发，有 3 种情况：<br />(1). <strong>明确转发</strong>：交换机知道应当从哪个接口转发该帧 (单播、多播、广播)<br />(2). <strong>盲目转发</strong>：(泛洪) 不知道、除进入交换机的接口外的其它所有接口转发<br /> (3). <strong>明确丢弃</strong>：交换机知道不应该转发该帧，将其丢弃</li></ol><blockquote><p>以太网交换机工作在<strong>数据链路层</strong> (也包括<strong>物理层</strong>)<br /> 以太网交换机收到帧后，在帧交换表中查找帧的目的 MAC 地址所对应的接口号，然后通过该接口转发帧。<br />以太网交换机是一种即插即用设备，刚上电启动时其内部的帧交换表是空的。<br />随着网络中各主机间的通信，以太网交换机<strong>通过自学习算法</strong>自动逐渐建立起<strong>帧交换表</strong>。<br />帧交换表的每条记录都有自己的有效时间，到期删除：<br />(1). 交换机的接口改接了另一台主机<br /> (2). 主机更换了网卡</p></blockquote><p><a href="https://imgse.com/i/pStmIdf"><img data-src="https://s1.ax1x.com/2023/01/24/pStmIdf.jpg" alt="pStmIdf.jpg" /></a><br /><a href="https://imgse.com/i/pStmoo8"><img data-src="https://s1.ax1x.com/2023/01/24/pStmoo8.jpg" alt="pStmoo8.jpg" /></a><br /><a href="https://imgse.com/i/pStm5eP"><img data-src="https://s1.ax1x.com/2023/01/24/pStm5eP.jpg" alt="pStm5eP.jpg" /></a><br /><a href="https://imgse.com/i/pStmhLt"><img data-src="https://s1.ax1x.com/2023/01/24/pStmhLt.jpg" alt="pStmhLt.jpg" /></a></p><h2 id="の生成树协议stp"><a class="anchor" href="#の生成树协议stp">#</a> の生成树协议 STP</h2><p><strong>Spanning Tree Protocol</strong><br /> 可以在在增加冗余链路来提高网络可靠性的同时又避免网络环路带来的问题<br /><a href="https://imgse.com/i/pStnFSJ"><img data-src="https://s1.ax1x.com/2023/01/24/pStnFSJ.jpg" alt="pStnFSJ.jpg" /></a><br /><a href="https://imgse.com/i/pStnPW4"><img data-src="https://s1.ax1x.com/2023/01/24/pStnPW4.jpg" alt="pStnPW4.jpg" /></a></p><h1 id="虚拟局域网vlan"><a class="anchor" href="#虚拟局域网vlan">#</a> 虚拟局域网 VLAN</h1><p><strong>Virtual Local Area Network</strong><br /> 是一种将局域网内的设备划分成与物理位置无关的逻辑组的技术，这些逻辑组具有某些共同的需求。</p><h2 id="概述"><a class="anchor" href="#概述">#</a> 概述</h2><p><a href="https://imgse.com/i/pStnatS"><img data-src="https://s1.ax1x.com/2023/01/24/pStnatS.jpg" alt="pStnatS.jpg" /></a><br /><a href="https://imgse.com/i/pStnUk8"><img data-src="https://s1.ax1x.com/2023/01/24/pStnUk8.jpg" alt="pStnUk8.jpg" /></a></p><h2 id="实现机制"><a class="anchor" href="#实现机制">#</a> 实现机制</h2><h3 id="ieee-8021q帧"><a class="anchor" href="#ieee-8021q帧">#</a> IEEE 802.1Q 帧</h3><p>(Dot One Q 帧) 对以太网的 MAC 帧格式进行了拓展，插入 <strong>4 字节的 VLAN 标记</strong></p><p>802.1Q 帧是由交换机来处理的，而不是用户主机来处理的</p><h3 id="交换机的端口类型"><a class="anchor" href="#交换机的端口类型">#</a> 交换机的端口类型</h3><p>有以下 3 种：</p><p>Access</p><p>Trunk</p><p>Hybird</p><p>交换机各端口的缺省 VLAN ID:</p><p>在思科交换机上称 Native VLAN, 即本征 VLAN。<br />在华为交换机上称为 Port VLAN ID, 即端口 VLAN ID, 简记 PVID</p><ol><li>Access 端口</li></ol><p>一般用于连接用户计算机</p><p>只能属于一个 VLAN</p><p>Access 端口的 PVID 值与端口所属 VLAN 的 ID 相同 (默认 1)</p><p>Access 端口接收处理方法：<br />一般只接受 “未打标签” 的普通以太网的 MAC 帧，根据接收端口的 PVID 值给帧 “<strong>打标签</strong>”, 即插入 4 字节 VLAN 标记字段，字段中的 VID 取值与端口的 PVID 取值相等。</p><p>Access 端口发送处理方法：<br />若帧中的 VID 与端口的 PVID 相等，则 &quot;去标签&quot; 并转发该帧；<br /> 否则不转发<br /><a href="https://imgse.com/i/pStdgMt"><img data-src="https://s1.ax1x.com/2023/01/25/pStdgMt.jpg" alt="pStdgMt.jpg" /></a></p><ol start="2"><li>Trunk 端口</li></ol><p>一般用于交换机之间 or 交换机与路由器之间的互联</p><p>可以属于多个 VLAN</p><p>用户可以设置 Trunk 端口的 PVID 值。默认 1</p><p>Trunk 端口发送处理方法：<br />对 VID 等于 PVID 的帧，“去标签” 再转发；</p><p>对 VID 不等于 PVID 的帧，直接转发</p><p>Trunk 端口接收处理方法：<br />接收 “未打标签” 的帧，根据接收帧的端口的 PVID 给帧 “打标签”, 即插入 4 字节 VLAN 标记字段，字段中的 VID 取值与端口的 PVID 相同</p><p>接收 &quot;已打标签的帧&quot;</p><p><a href="https://imgse.com/i/pStd6xI"><img data-src="https://s1.ax1x.com/2023/01/25/pStd6xI.jpg" alt="pStd6xI.jpg" /></a><br /><a href="https://imgse.com/i/pStdyRA"><img data-src="https://s1.ax1x.com/2023/01/25/pStdyRA.jpg" alt="pStdyRA.jpg" /></a></p><ol start="3"><li>Hybird 端口</li></ol><p>既可用于交换机之间 or 交换机与路由器之间 (同 Trunk 端口)<br /> 又可用于交换机与用户计算机之间的互连 (同 Access 端口)</p><p>Hybird 端口可以属于多个 VLAN (同 Trunk)</p><p>用户可以设置 Hybird 端口的 PVID 值。默认 1 (Trunk)</p><p>Hybird 端口发送处理方法：<strong>(不同 Trunk)</strong></p><p><strong>查看帧的 VID 是否在端口的 &quot;去标签&quot; 列表中:</strong></p><p>若存在，“去标签” 再转发；</p><p>若不存在，直接转发</p><p>Hybird 端口接收处理方法：(Trunk)<br /> 接收 “未打标签” 的帧，根据接收帧的端口的 PVID 给帧 “打标签”, 即插入 4 字节 VLAN 标记字段，字段中的 VID 取值与端口的 PVID 相同</p><p>接收 &quot;已打标签的帧&quot;</p><p><a href="https://imgse.com/i/pStdzi4"><img data-src="https://s1.ax1x.com/2023/01/25/pStdzi4.jpg" alt="pStdzi4.jpg" /></a></p>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ch1_物理层</title>
      <link href="/2022/10/16/Ch1-%E7%89%A9%E7%90%86%E5%B1%82/"/>
      <url>/2022/10/16/Ch1-%E7%89%A9%E7%90%86%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="基本概念"><a class="anchor" href="#基本概念">#</a> 基本概念</h1><p>物理层考虑的是怎样才能在 连接各种计算机の传输媒体上 传输数据比特流。</p><p>物理层为数据链路层屏蔽了各种传输媒体の差异、使数据链路层只需考虑 如何完成本层の协议 &amp; 服务，而不必考虑网络具体的传输媒体是什么。</p><p><strong>物理层协议の主要任务：</strong></p><ol><li><p>机械特性：<br />指明接口所用接线器的<strong>形状</strong>和<strong>尺寸</strong>，<strong>引脚数目</strong>和<strong>排列</strong>、<strong>固定</strong>和<strong>锁定</strong>装置。</p></li><li><p>电器特性：<br />指明在接口电缆の各条线上出现の<strong>电压的范围</strong>。</p></li><li><p>功能特性：<br />指明某条线上 出现的 某一电平 的<strong>电压 表示何种意义</strong>。</p></li><li><p>过程特性：<br />指明对于不同功能的 各种可能<strong>事件 的出现顺序</strong>。</p></li></ol><h1 id="の传输媒体"><a class="anchor" href="#の传输媒体">#</a> の传输媒体</h1><h2 id="导引型传输媒体"><a class="anchor" href="#导引型传输媒体">#</a> 导引型传输媒体</h2><h3 id="同轴电缆"><a class="anchor" href="#同轴电缆">#</a> 同轴电缆</h3><p>贵、布线不灵活 不方便</p><ol><li>基带同轴电缆</li><li>宽带同轴电缆</li></ol><h3 id="双绞线"><a class="anchor" href="#双绞线">#</a> 双绞线</h3><p><strong>绞合の作用：</strong></p><blockquote><p>抵御部分来自外界的电磁波干扰<br />减少相邻导线的电磁波干扰</p></blockquote><h3 id="光纤"><a class="anchor" href="#光纤">#</a> 光纤</h3><p>优点：</p><blockquote><p>通信容量大 (25000~30000GHz 的宽带)<br /> 传输损耗小、远距离传输时更加经济<br />抗<strong>雷电</strong>和<strong>电磁干扰</strong> 性能好。在大电流脉冲干扰的环境尤为重要<br />无串音干扰、保密性好、不易被窃听<br />体积小、重量轻</p></blockquote><p>缺点：</p><blockquote><p>割接需要专用设备<br />光电接口价格较贵</p></blockquote><ol><li>多模光纤：50 微米、62.5 微米</li><li>只适合<strong>近距离传输</strong> (建筑物内)</li><li>单模光纤：9 微米</li><li>适合长距离传输且衰减小、制造成本高、对光源要求高</li></ol><ul><li>光在纤芯中传输の方式是<strong>不断地全反射</strong></li></ul><p><strong>当光从高折射率的媒体射向低折射率的媒体时，其 折射角 &gt; 入射角；</strong></p><p><strong>因此、如果入射角足够大，就会出现全反射，即光碰到包层时 就会反射回纤芯</strong></p><h3 id="电力线"><a class="anchor" href="#电力线">#</a> 电力线</h3><p><a href="https://imgse.com/i/zcuFDH"><img data-src="https://s1.ax1x.com/2022/12/06/zcuFDH.jpg" alt="zcuFDH.jpg" /></a></p><h2 id="非导引型传输媒体"><a class="anchor" href="#非导引型传输媒体">#</a> 非导引型传输媒体</h2><h3 id="无线电波"><a class="anchor" href="#无线电波">#</a> 无线电波</h3><p><a href="https://imgse.com/i/zcukbd"><img data-src="https://s1.ax1x.com/2022/12/06/zcukbd.jpg" alt="zcukbd.jpg" /></a></p><h3 id="微波"><a class="anchor" href="#微波">#</a> 微波</h3><ol><li>地面微波接力通信</li><li>卫星通信</li></ol><h3 id="红外线"><a class="anchor" href="#红外线">#</a> 红外线</h3><p>点对点传输 直线传输</p><h3 id="可见光"><a class="anchor" href="#可见光">#</a> 可见光</h3><p>LiFi</p><h1 id="传输方式"><a class="anchor" href="#传输方式">#</a> 传输方式</h1><h2 id="串行传输"><a class="anchor" href="#串行传输">#</a> 串行传输</h2><h2 id="并行传输"><a class="anchor" href="#并行传输">#</a> 并行传输</h2><p><a href="https://imgse.com/i/zcK5lT"><img data-src="https://s1.ax1x.com/2022/12/06/zcK5lT.jpg" alt="zcK5lT.jpg" /></a></p><h2 id="同步传输"><a class="anchor" href="#同步传输">#</a> 同步传输</h2><h2 id="异步传输"><a class="anchor" href="#异步传输">#</a> 异步传输</h2><p><a href="https://imgse.com/i/zcK4pV"><img data-src="https://s1.ax1x.com/2022/12/06/zcK4pV.jpg" alt="zcK4pV.jpg" /></a></p><h2 id="单向通信单工"><a class="anchor" href="#单向通信单工">#</a> 单向通信 (单工)</h2><h2 id="双向交替通信半双工"><a class="anchor" href="#双向交替通信半双工">#</a> 双向交替通信 (半双工)</h2><p>对讲机</p><h2 id="双向同时通信全双工"><a class="anchor" href="#双向同时通信全双工">#</a> 双向同时通信 (全双工)</h2><p><a href="https://imgse.com/i/zcKff0"><img data-src="https://s1.ax1x.com/2022/12/06/zcKff0.jpg" alt="zcKff0.jpg" /></a></p><h1 id="编码与调制"><a class="anchor" href="#编码与调制">#</a> 编码与调制</h1><p>码元：在使用时间域的波形 表示数字信号时、代表<strong>不同离散数值</strong>的基本波形。<br /><a href="https://imgse.com/i/zcM2uD"><img data-src="https://s1.ax1x.com/2022/12/06/zcM2uD.jpg" alt="zcM2uD.jpg" /></a></p><h2 id="常用编码"><a class="anchor" href="#常用编码">#</a> 常用编码</h2><h3 id="不归零编码"><a class="anchor" href="#不归零编码">#</a> 不归零编码</h3><p><a href="https://imgse.com/i/zcMcjO"><img data-src="https://s1.ax1x.com/2022/12/06/zcMcjO.jpg" alt="zcMcjO.jpg" /></a></p><h3 id="归零编码"><a class="anchor" href="#归零编码">#</a> 归零编码</h3><p><a href="https://imgse.com/i/zcM6gK"><img data-src="https://s1.ax1x.com/2022/12/06/zcM6gK.jpg" alt="zcM6gK.jpg" /></a></p><h3 id="曼彻斯特编码"><a class="anchor" href="#曼彻斯特编码">#</a> 曼彻斯特编码</h3><p>码元中间时刻跳变 表示：时钟、数据</p><h3 id="差分曼彻斯特编码"><a class="anchor" href="#差分曼彻斯特编码">#</a> 差分曼彻斯特编码</h3><p>码元中间时刻跳变 表示：时钟<br />码元开始处电平是否发生变化：数据<br /><a href="https://imgse.com/i/zcMy36"><img data-src="https://s1.ax1x.com/2022/12/06/zcMy36.jpg" alt="zcMy36.jpg" /></a></p><p><a href="https://imgse.com/i/zcQEVJ"><img data-src="https://s1.ax1x.com/2022/12/06/zcQEVJ.md.jpg" alt="zcQEVJ.md.jpg" /></a></p><h2 id="基本调制方法"><a class="anchor" href="#基本调制方法">#</a> 基本调制方法</h2><p><a href="https://imgse.com/i/zcl51P"><img data-src="https://s1.ax1x.com/2022/12/06/zcl51P.jpg" alt="zcl51P.jpg" /></a><br /><a href="https://imgse.com/i/zcl4pt"><img data-src="https://s1.ax1x.com/2022/12/06/zcl4pt.jpg" alt="zcl4pt.jpg" /></a><br /><a href="https://imgse.com/i/zclffI"><img data-src="https://s1.ax1x.com/2022/12/06/zclffI.jpg" alt="zclffI.jpg" /></a></p><h3 id="混合调制"><a class="anchor" href="#混合调制">#</a> 混合调制</h3><p><strong>--- 正交振幅调制 QAM</strong></p><p><a href="https://imgse.com/i/zclWtA"><img data-src="https://s1.ax1x.com/2022/12/06/zclWtA.jpg" alt="zclWtA.jpg" /></a></p><h2 id="信道的极限容量"><a class="anchor" href="#信道的极限容量">#</a> 信道的极限容量</h2><p><a href="https://imgse.com/i/zclRkd"><img data-src="https://s1.ax1x.com/2022/12/06/zclRkd.jpg" alt="zclRkd.jpg" /></a></p><h3 id="奈氏准则"><a class="anchor" href="#奈氏准则">#</a> 奈氏准则</h3><p>在假定理想条件下、为了<strong>避免码间串扰、码元传输速率是有上限的</strong>。</p><blockquote><p>理想低通信道の最高码元传输速率 = 2W Baud = 2W<br /> 理想带通信道の最高码元传输速率 = W Baud = W</p></blockquote><p><strong>W 信道带宽</strong><br /><a href="https://imgse.com/i/zc3nGn"><img data-src="https://s1.ax1x.com/2022/12/06/zc3nGn.jpg" alt="zc3nGn.jpg" /></a></p><h3 id="香农公式"><a class="anchor" href="#香农公式">#</a> 香农公式</h3><p><a href="https://imgse.com/i/zc3u2q"><img data-src="https://s1.ax1x.com/2022/12/06/zc3u2q.jpg" alt="zc3u2q.jpg" /></a><br /><a href="https://imgse.com/i/zc3Kx0"><img data-src="https://s1.ax1x.com/2022/12/06/zc3Kx0.jpg" alt="zc3Kx0.jpg" /></a></p><h3 id="例题"><a class="anchor" href="#例题">#</a> 例题：</h3><p><a href="https://imgse.com/i/zc3EVg"><img data-src="https://s1.ax1x.com/2022/12/06/zc3EVg.jpg" alt="zc3EVg.jpg" /></a><br /><a href="https://imgse.com/i/zc3VaQ"><img data-src="https://s1.ax1x.com/2022/12/06/zc3VaQ.jpg" alt="zc3VaQ.jpg" /></a><br /><a href="https://imgse.com/i/zc3Z5j"><img data-src="https://s1.ax1x.com/2022/12/06/zc3Z5j.jpg" alt="zc3Z5j.jpg" /></a><br /><a href="https://imgse.com/i/zc3kqS"><img data-src="https://s1.ax1x.com/2022/12/06/zc3kqS.jpg" alt="zc3kqS.jpg" /></a><br /><a href="https://imgse.com/i/zc3Fr8"><img data-src="https://s1.ax1x.com/2022/12/06/zc3Fr8.jpg" alt="zc3Fr8.jpg" /></a><br /><a href="https://imgse.com/i/zc3mPs"><img data-src="https://s1.ax1x.com/2022/12/06/zc3mPs.jpg" alt="zc3mPs.jpg" /></a></p>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ch0_计网体系结构</title>
      <link href="/2022/10/16/Ch0-%E8%AE%A1%E7%BD%91%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
      <url>/2022/10/16/Ch0-%E8%AE%A1%E7%BD%91%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="计网体系结构"><a class="anchor" href="#计网体系结构">#</a> 计网体系结构</h1><h2 id="概念"><a class="anchor" href="#概念">#</a> 概念</h2><ol><li><p>计算机网络：是一个将分散的、具有独立功能的计算机系统，通过<strong>通信设备</strong>与<strong>线路</strong>连接起来，由功能完善的软件实现<strong>资源共享</strong>和<strong>信息传递</strong>的系统。</p></li><li><p>计算机网络是互连的、自治的计算机集合。</p><ul><li>互连：通过通信链路互联互通。</li><li>自治：无主从关系。</li></ul></li></ol><h2 id="功能"><a class="anchor" href="#功能">#</a> 功能</h2><ol><li>数据通信</li><li>资源共享  （可共享硬件、软件、数据 ）</li><li>分布式处理  （多台计算机各自承担同一工作任务的不同部分 Hadoop...）<ul><li>可靠性</li><li>负载均衡</li></ul></li></ol><h2 id="因特网发展阶段"><a class="anchor" href="#因特网发展阶段">#</a> 因特网发展阶段</h2><ol><li><p>ARPAnet 阿帕网 (无线分组交换网 &amp; 卫星通信网) -&gt; internet (1983 阿帕网接受 TCP/IP)(互联网) -&gt; Internet (因特网)</p></li><li><p>三级结构：</p></li></ol><p>1985 年起 USA 国家科学基金会 NSF 围绕 6 个大型计算机中心建设计算机网络，即国家科学基金网 NSFNET<br /> 主干网：<br />- 地区网：<br />- 校园网<br /> - 校园网<br /> - 地区网：<br />- 企业网<br /> 3. 多层次 ISP 结构：<br />ISP：Internet service provider 若中国电信、<br />分为 主干 ISP、地区 ISP、本地 ISP・・</p><h1 id="组成分类"><a class="anchor" href="#组成分类">#</a> 组成 &amp; 分类</h1><p><a href="https://imgse.com/i/xBKch6"><img data-src="https://s1.ax1x.com/2022/10/16/xBKch6.png" alt="" /></a><a href="https://imgse.com/i/xBK29K"><img data-src="https://s1.ax1x.com/2022/10/16/xBK29K.png" alt="" /></a></p><p><a href="https://imgse.com/i/xBJ5kQ"><img data-src="https://s1.ax1x.com/2022/10/16/xBJ5kQ.md.png" alt="xBJ5kQ.md.png" /></a></p><h2 id="性能指标"><a class="anchor" href="#性能指标">#</a> 性能指标</h2><ul><li><strong>速率</strong>：即数据率 or 数据传输率 or 比特率。<br />连接在计算机网络上的<em>主机</em>在数字信道上传送数据<em>位数的速率</em>。</li><li><strong>带宽</strong>：表示网络的通信线路传送数据的能力，通常指单位时间内从网络中的某一点到另外一点所能通过的 “最高数据率”。单位 “比特每秒”<br /> 原指某个信号具有的频带宽度，最高频率与最低频率只差，单位是赫兹（Hz）</li><li><strong>吞吐量</strong>单位时间内通过某个网络 (or 信道、接口) 的数据量。</li><li><strong>时延</strong>：指数据 (报文 / 分组 / 比特流) 从网络 (or 链路) 的一端传送到另一端所需的时间。也叫延迟 or 迟延。单位 S。</li><li><strong>时延带宽积</strong>：传播时延 x 带宽 (某段链路现在有多少比特)</li><li><strong>往返时间 RTT</strong>：包括往返传播时延 (传播时延 * 2) + 末端处理时间</li><li><strong>利用率</strong>：信道利用率 网络利用率<br /><a href="https://imgse.com/i/xBaF8H"><img data-src="https://s1.ax1x.com/2022/10/16/xBaF8H.png" alt="速率.png" /></a><br /><a href="https://imgse.com/i/xBaVKI"><img data-src="https://s1.ax1x.com/2022/10/16/xBaVKI.png" alt="带宽.png" /></a><br /><a href="https://imgse.com/i/xBaAxA"><img data-src="https://s1.ax1x.com/2022/10/16/xBaAxA.png" alt="吞吐量.png" /></a><br /><a href="https://imgse.com/i/xBak2d"><img data-src="https://s1.ax1x.com/2022/10/16/xBak2d.png" alt="时延.png" /></a><br /><a href="https://imgse.com/i/xBaJrq"><img data-src="https://s1.ax1x.com/2022/10/16/xBaJrq.png" alt="利用率.png" /></a></li></ul><h1 id="专业术语"><a class="anchor" href="#专业术语">#</a> 专业术语</h1><p><a href="https://imgse.com/i/zsWJzV"><img data-src="https://s1.ax1x.com/2022/12/04/zsWJzV.jpg" alt="zsWJzV.jpg" /></a></p><h2 id="实体"><a class="anchor" href="#实体">#</a> 实体</h2><p>任何可发送 or 接受信息的<strong>硬件</strong> or<strong> 软件进程</strong>。</p><h2 id="对等实体"><a class="anchor" href="#对等实体">#</a> 对等实体</h2><p>收发双方相同层次中的实体<br /><a href="https://imgse.com/i/zsRa4I"><img data-src="https://s1.ax1x.com/2022/12/04/zsRa4I.jpg" alt="zsRa4I.jpg" /></a></p><h2 id="协议"><a class="anchor" href="#协议">#</a> 协议</h2><p>控制两个对等实体进行逻辑通信的规则的集合<br />三要素 ： 语法、语义、同步</p><ol><li>语法 ：定义所交换信息的格式<br /><a href="https://imgse.com/i/zsWQaj"><img data-src="https://s1.ax1x.com/2022/12/04/zsWQaj.jpg" alt="zsWQaj.jpg" /></a></li><li>语义 ：定义收发双方所要完成的操作<br /><a href="https://imgse.com/i/zsWuqg"><img data-src="https://s1.ax1x.com/2022/12/04/zsWuqg.jpg" alt="zsWuqg.jpg" /></a></li><li>同步 ：定义收发双方的时序关系<br /><a href="https://imgse.com/i/zsWMZQ"><img data-src="https://s1.ax1x.com/2022/12/04/zsWMZQ.jpg" alt="zsWMZQ.jpg" /></a></li></ol><h2 id="服务"><a class="anchor" href="#服务">#</a> 服务</h2><ul><li>在协议控制下，两个对等实体间的逻辑通信使得本层能够向上一层提供服务</li><li>要实现本层协议，还需要下面一层所提供的服务</li></ul><blockquote><p><strong>协议</strong>是 &quot;水平的 horizontal&quot;,<strong> 服务</strong>是 &quot;垂直的 vertical&quot;</p></blockquote><ul><li>实体看得见相邻下层所提供的服务、但并不知道实现该服务的具体协议。也就是说，下面的协议对上面的是 “透明” 的。</li></ul><h3 id="服务访问点"><a class="anchor" href="#服务访问点">#</a> 服务访问点</h3><p>在同一系统中<strong>相邻两层的实体交换信息的逻辑接口</strong>，用于区分不同的服务类型</p><ol><li>数据链路层の服务访问点为帧の &quot;类型&quot; 字段。</li><li>网络层の服务访问点为 IP 数据报首部中の “协议字段”</li><li>运输层の服务访问点为 “端口号”<br /><a href="https://imgse.com/i/zsfr7Q"><img data-src="https://s1.ax1x.com/2022/12/04/zsfr7Q.jpg" alt="zsfr7Q.jpg" /></a></li></ol><h3 id="服务原语"><a class="anchor" href="#服务原语">#</a> 服务原语</h3><p>上层使用下层所提供の服务必须通过与下一层交换一些命令，这些命令称为服务原语<br /><a href="https://imgse.com/i/zs4sWn"><img data-src="https://s1.ax1x.com/2022/12/04/zs4sWn.jpg" alt="zs4sWn.jpg" /></a></p><h3 id="协议数据单元pdu"><a class="anchor" href="#协议数据单元pdu">#</a> 协议数据单元 PDU</h3><p>对等层次之间传送の数据包 为该层的协议数据单元 PDU<br /><a href="https://imgse.com/i/zs4Dij"><img data-src="https://s1.ax1x.com/2022/12/04/zs4Dij.jpg" alt="zs4Dij.jpg" /></a></p><h3 id="服务数据单元sdu"><a class="anchor" href="#服务数据单元sdu">#</a> 服务数据单元 SDU</h3><p>同一系统内，层与层之间交换的数据包称为服务数据单元</p><h3 id="多个sdu可以合为一个pdu-一个sdu也可划分为几个pdu"><a class="anchor" href="#多个sdu可以合为一个pdu-一个sdu也可划分为几个pdu">#</a> 多个 SDU 可以合为一个 PDU 一个 SDU 也可划分为几个 PDU</h3><p><a href="https://imgse.com/i/zs4rJs"><img data-src="https://s1.ax1x.com/2022/12/04/zs4rJs.jpg" alt="zs4rJs.jpg" /></a></p>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OS(一)</title>
      <link href="/2022/10/09/OS-1/"/>
      <url>/2022/10/09/OS-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>markdown</title>
      <link href="/2022/09/21/java-basic/"/>
      <url>/2022/09/21/java-basic/</url>
      
        <content type="html"><![CDATA[<p>#标题一<br />の<br /> ## 标题二</p><p>### 标题三</p><p>#### 标题四</p><p><strong>这是加粗</strong></p><p><em>这是斜体</em></p><p><s>这是横线</s></p><ul><li><p>无序列表</p></li><li><p>无序列表</p></li></ul><p>1. 有序序列 1<br />2. 有序序列 2</p><p><code>内嵌代码</code></p><pre><code>代码块</code></pre><blockquote><p>引用<br />吾生也有涯，而知也无涯</p></blockquote><p>&lt;!-- 有序列表 --&gt;</p><ol><li>凯瑟琳</li><li>海瑟薇</li><li>亚瑟。皮特<br /> &lt;!-- 无序列表 --&gt;</li></ol><ul><li>APPLE</li><li>PEACH</li><li>lemon<br />&lt;!-- 加粗 --&gt;<br /><strong> 微信：帕克</strong><br /> &lt;!-- 斜体 --&gt;<br /><em> 微信：帕克</em><br /> &lt;!-- 删除线 --&gt;<br /><s> 微信：帕克</s></li></ul><h2 id="u微信帕克u微信帕克"><a class="anchor" href="#u微信帕克u微信帕克">#</a> &lt;u&gt; 微信：帕克 &lt;/u&gt;<br /> 微信：帕克</h2><h2 id="个人博客"><a class="anchor" href="#个人博客">#</a> 个人博客：</h2><p>b 站</p><ol><li><p>上标</p><p>H<sup>2</sup>O</p></li><li><p>下标</p><p>H<sub>2</sub>O</p></li></ol><p>&lt;!-- 高亮 --&gt;<br />== 微信：帕克 ==</p><ol><li><p>未完成任务</p><ul class="task-list"><li class="task-list-item"><input type="checkbox" id="cbx_0" disabled="true" /><label for="cbx_0"> 公众号：</label></li><li class="task-list-item"><input type="checkbox" id="cbx_1" disabled="true" /><label for="cbx_1"> 个人博客：</label></li></ul></li><li><p>已完成任务</p><ul class="task-list"><li class="task-list-item"><input type="checkbox" id="cbx_2" checked="true" disabled="true" /><label for="cbx_2"> 知乎：</label></li><li class="task-list-item"><input type="checkbox" id="cbx_3" checked="true" disabled="true" /><label for="cbx_3"> CSDN：</label></li></ul></li><li><p>左对齐</p></li></ol><table><thead><tr><th style="text-align:left">平台</th><th style="text-align:left">链接</th></tr></thead><tbody><tr><td style="text-align:left">公众号</td><td style="text-align:left">jjjl</td></tr></tbody></table><ol start="2"><li>居中对齐</li></ol><table><thead><tr><th style="text-align:center">平台</th><th style="text-align:center">链接</th></tr></thead><tbody><tr><td style="text-align:center">公众号</td><td style="text-align:center">hh 就</td></tr></tbody></table><ol><li><p>行间公式</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x_1+x_2=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></p></li><li><p>独立公式块</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x^2+y^2=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p></li><li><p>链接</p></li></ol><p><span class="exturl" data-url="aHR0cHM6Ly9jdW55dTE5NDMuc2l0ZQ==">汲汲雨</span></p><ol start="2"><li>图片</li></ol><p><img data-src="https://cdn.jsdelivr.net/gh/cunyu1943/image-hosting-for-blog/blog/image-blogzhuye.png" alt="汲汲雨" /></p><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table><hr /><p>title: 第 1 周 计算<br /> date: 2020/04/12 20:46:25<br />categories:</p><ul><li>[计算机科学，Java, 零基础学 Java 语言 - 浙江大学 - 翁恺]<br />tags:</li></ul><hr /><p>:::note info<br /> 以下为个人学习笔记和习题整理<br />课程：零基础学 Java 语言 - 浙江大学 - 翁恺 @ 中国大学 MOOC<br /><span class="exturl" data-url="aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcvY291cnNlL1pKVS0xMDAxNTQxMDAx">https://www.icourse163.org/course/ZJU-1001541001</span><br />:::</p><h1 id="课堂笔记"><a class="anchor" href="#课堂笔记">#</a> 课堂笔记</h1><h2 id="读输入-字符串输出"><a class="anchor" href="#读输入-字符串输出">#</a> 读输入、字符串输出</h2><figure class="highlight java"><figcaption data-lang="java"><span>scanner</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 让 in 这个对象做读入下一行的动作，结果交给 System.out 这个对象去打印一行。</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 字符串的 + 用来连接两个字符串形成更长的字符串。</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span> <span class="token operator">+</span> <span class="token string">" world."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>tips：</p><ul><li><code>System.out.println</code>  会换行， <code>System.out.print</code>  则不会换行</li><li>出现警告： <code>Resource leak: 'in' is never closed</code> ，可以在函数的最后加入</li></ul><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 释放</span></pre></td></tr></table></figure><h2 id="变量"><a class="anchor" href="#变量">#</a> 变量</h2><ul><li><p><strong>形式</strong>：&lt;类型名称&gt; &lt; 变量名称 &gt; = &lt; 初始值 &gt;<br /> <code>int price, amount; // 同时定义两个变量</code> <br /> <code>int price = 0; // 定义变量并赋值</code> <br /> <code>int price, amount = 100, age;</code></p></li><li><p><strong>类型名称</strong>：Java 是一种<strong>强类型语言</strong>，所有变量在使用前必须定义或声明，所有变量必须具有确定的数据类型。数据类型表示在变量中可以存放什么样的数据，程序运行过程中也不能改变变量的类型。</p></li><li><p><strong>变量名称</strong>：又称标识符，只能由字母、数字、下划线构成，数字不能出现在第一个位置。此外，Java 的保留字也不能用作标识符。</p></li><li><p>Java 的保留字列表</p></li></ul><table><thead><tr><th>abstract</th><th>do</th><th>implements</th><th>protected</th><th>throws</th></tr></thead><tbody><tr><td>boolean</td><td>double</td><td>import</td><td>public</td><td>transient</td></tr><tr><td>break</td><td>else</td><td>instanceof</td><td>return</td><td>true</td></tr><tr><td>byte</td><td>extends</td><td>int</td><td>short</td><td>try</td></tr><tr><td>case</td><td>false</td><td>interface</td><td>static</td><td>while</td></tr><tr><td>catch</td><td>final</td><td>long</td><td>strictfp</td><td>void</td></tr><tr><td>char</td><td>finally</td><td>native</td><td>super</td><td>volatile</td></tr><tr><td>class</td><td>float</td><td>new</td><td>switch</td></tr><tr><td>const*</td><td>for</td><td>null</td><td>synchronized</td></tr><tr><td>continue</td><td>goto*</td><td>package</td><td>this</td></tr><tr><td>default</td><td>if</td><td>private</td><td>throw</td></tr></tbody></table><ul class="task-list"><li>以下哪些标识符是符合规则的？</li><li class="task-list-item"><input type="checkbox" id="cbx_4" checked="true" disabled="true" /><label for="cbx_4"> currency</label></li><li class="task-list-item"><input type="checkbox" id="cbx_5" checked="true" disabled="true" /><label for="cbx_5"> lastName</label></li><li class="task-list-item"><input type="checkbox" id="cbx_6" checked="true" disabled="true" /><label for="cbx_6"> fireplace</label></li><li class="task-list-item"><input type="checkbox" id="cbx_7" disabled="true" /><label for="cbx_7"> _last_name</label></li><li class="task-list-item"><input type="checkbox" id="cbx_8" checked="true" disabled="true" /><label for="cbx_8"> xingmin</label></li><li class="task-list-item"><input type="checkbox" id="cbx_9" disabled="true" /><label for="cbx_9"> class</label></li><li class="task-list-item"><input type="checkbox" id="cbx_10" disabled="true" /><label for="cbx_10"> goto</label></li><li class="task-list-item"><input type="checkbox" id="cbx_11" disabled="true" /><label for="cbx_11"> 4ever</label></li><li class="task-list-item"><input type="checkbox" id="cbx_12" disabled="true" /><label for="cbx_12"> time-machine</label></li><li class="task-list-item"><input type="checkbox" id="cbx_13" disabled="true" /><label for="cbx_13"> Int</label></li><li class="task-list-item"><input type="checkbox" id="cbx_14" disabled="true" /><label for="cbx_14"> $12</label></li><li class="task-list-item"><input type="checkbox" id="cbx_15" disabled="true" /><label for="cbx_15"> 我是变量</label></li></ul><h2 id="常量-final"><a class="anchor" href="#常量-final">#</a> 常量 final</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">AMOUNT</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">//final 是一个修饰符，表示这个变量的值一旦初始化，就不能再修改了。</span></pre></td></tr></table></figure><h2 id="变量类型"><a class="anchor" href="#变量类型">#</a> 变量类型</h2><h3 id="整数-int"><a class="anchor" href="#整数-int">#</a> 整数 int</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> price <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ul><li>如果用户输入的不是整数，则会报错  <code>java.util.InputMismatchException</code> 。</li><li>程序要求读入多个数字时，可以在一行输入，中间用空格分开，也可以多行输入。</li><li>每次召唤 <code>in.nextInt()</code> ，它就等待用户输入一个整数。</li><li>两个整数的运算结果只能是整数。</li><li>在 Java 中， <code>10</code>  和 <code>10.0</code>  是完全不同的数。</li></ul><h3 id="浮点数-double"><a class="anchor" href="#浮点数-double">#</a> 浮点数 double</h3><ul><li><strong>浮点数运算有误差</strong>：由于二进制的自身限制，浮点计算需要将十进制先转换为二进制，然后对二进制数进行计算，因此导致误差。</li></ul><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token operator">-</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 结果为 0.09999999999999987</span></pre></td></tr></table></figure><ul><li>整数类型不能表达有小数部分的数；整数运算速度快，占内存小；日常中整数运算多。</li></ul><h2 id="赋值运算"><a class="anchor" href="#赋值运算">#</a> 赋值运算</h2><h3 id="强制类型转换"><a class="anchor" href="#强制类型转换">#</a> 强制类型转换</h3><ul><li>浮点数和整数放在一起运算时，Java 会将整数转换成浮点数，然后进行浮点数运算。</li><li>强制性转换的优先级高于四则运算。</li></ul><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>a<span class="token operator">/</span>b<span class="token punctuation">;</span> <span class="token comment">// 会报错</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token operator">/</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不会报错</span></pre></td></tr></table></figure><h3 id="运算符优先级"><a class="anchor" href="#运算符优先级">#</a> 运算符优先级</h3><ul><li>单目运算符 <code>+</code>   <code>-</code>  优先级最高</li><li>结合关系一般自左向右，单目 <code>+</code>   <code>-</code>  和赋值 <code>=</code>  自右向左。</li></ul><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>result <span class="token operator">=</span> a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">+</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>result <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token punctuation">(</span>result <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="复合赋值"><a class="anchor" href="#复合赋值">#</a> 复合赋值</h3><ul><li>5 个算术运算符， <code>+ - * / %</code> ，可以和赋值运算符  <code>=</code>  结合起来，形成复合赋值运算。注意，两个运算符中间不要有空格。</li></ul><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>total <span class="token operator">+=</span> <span class="token punctuation">(</span>sum<span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>total <span class="token operator">=</span> total <span class="token operator">+</span> <span class="token punctuation">(</span>sum<span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>total <span class="token operator">*</span> <span class="token operator">=</span> sum<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>total <span class="token operator">=</span> total<span class="token operator">*</span><span class="token punctuation">(</span>sum<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>total <span class="token operator">/=</span> <span class="token number">12</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>total <span class="token operator">=</span> total <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ul><li>递增递减运算符  <code>++</code>   <code>--</code> ，给变量 + 1 或 - 1</li><li>前缀后缀：</li></ul><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>a <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>t1 <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//t1 先被赋值为 a 即 14， a 自加到 15</span></pre></td></tr><tr><td data-num="3"></td><td><pre>t2 <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span> <span class="token comment">//a 先自加到 15，t2 被赋值为 a 即 15</span></pre></td></tr></table></figure><h1 id="编程题"><a class="anchor" href="#编程题">#</a> 编程题</h1><h2 id="题目1-温度转换5分"><a class="anchor" href="#题目1-温度转换5分">#</a> 题目 1. 温度转换（5 分）</h2><ul><li><p><strong>题目内容</strong><br />写一个将华氏温度转换成摄氏温度的程序，转换的公式是：</p><p><code>°F = (9/5)*°C + 32</code></p><p>其中 C 表示摄氏温度，F 表示华氏温度。</p><p>程序的输入是一个整数，表示华氏温度。输出对应的摄氏温度，也是一个整数。</p><p>提示，为了把计算结果的浮点数转换成整数，需要使用下面的表达式：</p><p><code>(int)x;</code></p><p>其中 x 是要转换的那个浮点数。</p><p><em>注意：除了题目要求的输出，不能输出任何其他内容，比如输入时的提示，输出时的说明等等都不能。这道题目要求转换后的数字，程序就只能输出这个数字，除此之外任何内容都不能输出。</em></p></li><li><p><strong>输入格式</strong><br />一个整数。</p></li><li><p><strong>输出格式</strong><br />一个整数。</p></li><li><p><strong>输入样例</strong><br /> 100</p></li><li><p><strong>输出样例</strong><br /> 37</p></li></ul><h3 id="解题代码"><a class="anchor" href="#解题代码">#</a> 解题代码</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 获得输入的整数</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">int</span> fahrenheit <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 计算摄氏度</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">double</span> centigrade <span class="token operator">=</span> <span class="token punctuation">(</span>fahrenheit <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">/</span> <span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// 将浮点数转换为整数输出</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>centigrade<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/14/hello-world/"/>
      <url>/2022/09/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo</span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=">troubleshooting</span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==">GitHub</span>.</p><h2 id="quick-start"><a class="anchor" href="#quick-start">#</a> Quick Start</h2><h3 id="create-a-new-post"><a class="anchor" href="#create-a-new-post">#</a> Create a new post</h3><figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo new <span class="token string">"My New Post"</span></pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s">Writing</span></p><h3 id="run-server"><a class="anchor" href="#run-server">#</a> Run server</h3><figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=">Server</span></p><h3 id="generate-static-files"><a class="anchor" href="#generate-static-files">#</a> Generate static files</h3><figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s">Generating</span></p><h3 id="deploy-to-remote-sites"><a class="anchor" href="#deploy-to-remote-sites">#</a> Deploy to remote sites</h3><figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s">Deployment</span><br />H<sub>2</sub>O<br />2<sup>10</sup></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
